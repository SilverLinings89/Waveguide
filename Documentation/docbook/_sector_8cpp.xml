<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sector_8cpp">
    <title>Sector.cpp File Reference</title>
    <programlisting>#include &quot;Sector.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_sector_8cpp_1ab00f84d46942545c4c2e3d75db5c47a3">SectorFlagCPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Core/Sector.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;SectorFlagCPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;SectorFlagCPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;Sector.h&quot;</emphasis>
5 
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
8 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
9 
10 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
11 <link linkend="class_sector">Sector&lt;Dofs_Per_Sector&gt;::~Sector</link>()&#32;{}
12 
13 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
14 <link linkend="class_sector">Sector&lt;3&gt;::~Sector</link>()&#32;{}
15 
16 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
17 <link linkend="class_sector">Sector&lt;2&gt;::~Sector</link>()&#32;{}
18 
19 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a538e56d469fd8efd80afbc613451837e">20 </link><link linkend="class_sector_1a538e56d469fd8efd80afbc613451837e">Sector&lt;Dofs_Per_Sector&gt;::Sector</link>(<emphasis class="keywordtype">bool</emphasis>&#32;in_left,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;in_right,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_z_0,
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_z_1)
22 &#32;&#32;&#32;&#32;:&#32;left(in_left),
23 &#32;&#32;&#32;&#32;&#32;&#32;right(in_right),
24 &#32;&#32;&#32;&#32;&#32;&#32;boundary(in_left&#32;&amp;&amp;&#32;in_right),
25 &#32;&#32;&#32;&#32;&#32;&#32;z_0(in_z_0),
26 &#32;&#32;&#32;&#32;&#32;&#32;z_1(in_z_1)&#32;{
27 &#32;&#32;dofs_l&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[Dofs_Per_Sector];
28 &#32;&#32;dofs_r&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[Dofs_Per_Sector];
29 &#32;&#32;derivative&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>[Dofs_Per_Sector];
30 &#32;&#32;zero_derivative&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>[Dofs_Per_Sector];
31 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Dofs_Per_Sector&#32;==&#32;3)&#32;{
32 &#32;&#32;&#32;&#32;zero_derivative[0]&#32;=&#32;<emphasis class="keyword">true</emphasis>;
33 &#32;&#32;&#32;&#32;zero_derivative[1]&#32;=&#32;<emphasis class="keyword">false</emphasis>;
34 &#32;&#32;&#32;&#32;zero_derivative[2]&#32;=&#32;<emphasis class="keyword">true</emphasis>;
35 &#32;&#32;&#32;&#32;derivative[0]&#32;=&#32;0;
36 &#32;&#32;&#32;&#32;derivative[1]&#32;=&#32;2;
37 &#32;&#32;&#32;&#32;derivative[2]&#32;=&#32;0;
38 &#32;&#32;}
39 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Dofs_Per_Sector&#32;==&#32;2)&#32;{
40 &#32;&#32;&#32;&#32;zero_derivative[0]&#32;=&#32;<emphasis class="keyword">false</emphasis>;
41 &#32;&#32;&#32;&#32;zero_derivative[1]&#32;=&#32;<emphasis class="keyword">true</emphasis>;
42 &#32;&#32;&#32;&#32;derivative[0]&#32;=&#32;1;
43 &#32;&#32;&#32;&#32;derivative[1]&#32;=&#32;0;
44 &#32;&#32;}
45 
46 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Dofs_Per_Sector;&#32;i++)&#32;{
47 &#32;&#32;&#32;&#32;dofs_l[i]&#32;=&#32;0;
48 &#32;&#32;&#32;&#32;dofs_r[i]&#32;=&#32;0;
49 &#32;&#32;}
50 &#32;&#32;NInternalBoundaryDofs&#32;=&#32;0;
51 &#32;&#32;LowestDof&#32;=&#32;0;
52 &#32;&#32;NActiveCells&#32;=&#32;0;
53 &#32;&#32;NDofs&#32;=&#32;Dofs_Per_Sector;
54 }
55 
56 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
57 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">Sector&lt;2&gt;::set_properties</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
58 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Wrong&#32;call&#32;in&#32;Sector.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
59 }
60 
61 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
62 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">Sector&lt;3&gt;::set_properties</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
63 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Wrong&#32;call&#32;in&#32;Sector.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
64 }
65 
66 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
67 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">Sector&lt;2&gt;::set_properties</link>(<emphasis class="keywordtype">double</emphasis>&#32;in_m_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_m_1,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_0,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_1)&#32;{
69 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<link linkend="class_sector_1a5086c099e7bc0bcd921596f3f097c134">left</link>)&#32;{
70 &#32;&#32;&#32;&#32;dofs_l[0]&#32;=&#32;in_m_0;
71 &#32;&#32;&#32;&#32;dofs_l[1]&#32;=&#32;in_v_0;
72 &#32;&#32;}
73 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<link linkend="class_sector_1a719bee5389220c7c80c103db57480cd5">right</link>)&#32;{
74 &#32;&#32;&#32;&#32;dofs_r[0]&#32;=&#32;in_m_1;
75 &#32;&#32;&#32;&#32;dofs_r[1]&#32;=&#32;in_v_1;
76 &#32;&#32;}
77 }
78 
79 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
80 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">Sector&lt;3&gt;::set_properties</link>(<emphasis class="keywordtype">double</emphasis>&#32;in_m_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_m_1,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_r_0,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_r_1,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_1)&#32;{
82 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<link linkend="class_sector_1a5086c099e7bc0bcd921596f3f097c134">left</link>)&#32;{
83 &#32;&#32;&#32;&#32;dofs_l[0]&#32;=&#32;in_r_0;
84 &#32;&#32;&#32;&#32;dofs_l[1]&#32;=&#32;in_m_0;
85 &#32;&#32;&#32;&#32;dofs_l[2]&#32;=&#32;in_v_0;
86 &#32;&#32;}
87 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!<link linkend="class_sector_1a719bee5389220c7c80c103db57480cd5">right</link>)&#32;{
88 &#32;&#32;&#32;&#32;dofs_r[0]&#32;=&#32;in_r_1;
89 &#32;&#32;&#32;&#32;dofs_r[1]&#32;=&#32;in_m_1;
90 &#32;&#32;&#32;&#32;dofs_r[2]&#32;=&#32;in_v_1;
91 &#32;&#32;}
92 }
93 
94 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
95 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">Sector&lt;2&gt;::set_properties_force</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
97 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Wrong&#32;call&#32;in&#32;Sector.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
98 }
99 
100 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
101 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">Sector&lt;3&gt;::set_properties_force</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
102 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Wrong&#32;call&#32;in&#32;Sector.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
103 }
104 
105 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
106 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">Sector&lt;2&gt;::set_properties_force</link>(<emphasis class="keywordtype">double</emphasis>&#32;in_m_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_m_1,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_1)&#32;{
108 &#32;&#32;dofs_l[0]&#32;=&#32;in_m_0;
109 &#32;&#32;dofs_l[1]&#32;=&#32;in_v_0;
110 &#32;&#32;dofs_r[0]&#32;=&#32;in_m_1;
111 &#32;&#32;dofs_r[1]&#32;=&#32;in_v_1;
112 }
113 
114 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
115 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">Sector&lt;3&gt;::set_properties_force</link>(<emphasis class="keywordtype">double</emphasis>&#32;in_m_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_m_1,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_r_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_r_1,
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_0,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_v_1)&#32;{
118 &#32;&#32;dofs_l[0]&#32;=&#32;in_r_0;
119 &#32;&#32;dofs_l[1]&#32;=&#32;in_m_0;
120 &#32;&#32;dofs_l[2]&#32;=&#32;in_v_0;
121 &#32;&#32;dofs_r[0]&#32;=&#32;in_r_1;
122 &#32;&#32;dofs_r[1]&#32;=&#32;in_m_1;
123 &#32;&#32;dofs_r[2]&#32;=&#32;in_v_1;
124 }
125 
126 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">127 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">Sector&lt;Dofs_Per_Sector&gt;::set_properties</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
128 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;code&#32;does&#32;not&#32;work&#32;for&#32;this&#32;number&#32;of&#32;dofs&#32;per&#32;Sector.&quot;</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
130 &#32;&#32;<emphasis class="keywordflow">return</emphasis>;
131 }
132 
133 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
134 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ad5afcfc433e07108c156e2596ded82cd">Sector&lt;Dofs_Per_Sector&gt;::set_properties</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
136 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;code&#32;does&#32;not&#32;work&#32;for&#32;this&#32;number&#32;of&#32;dofs&#32;per&#32;Sector.&quot;</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
138 &#32;&#32;<emphasis class="keywordflow">return</emphasis>;
139 }
140 
141 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">142 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">Sector&lt;Dofs_Per_Sector&gt;::set_properties_force</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
144 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;code&#32;does&#32;not&#32;work&#32;for&#32;this&#32;number&#32;of&#32;dofs&#32;per&#32;Sector.&quot;</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
146 &#32;&#32;<emphasis class="keywordflow">return</emphasis>;
147 }
148 
149 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
150 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">Sector&lt;Dofs_Per_Sector&gt;::set_properties_force</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)&#32;{
152 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;code&#32;does&#32;not&#32;work&#32;for&#32;this&#32;number&#32;of&#32;dofs&#32;per&#32;Sector.&quot;</emphasis>
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
154 &#32;&#32;<emphasis class="keywordflow">return</emphasis>;
155 }
156 
157 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a2a7e42b042cbcf3bb107a64d377c578f">158 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1a2a7e42b042cbcf3bb107a64d377c578f">Sector&lt;Dofs_Per_Sector&gt;::get_dof</link>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i,&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
159 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;0&#32;&amp;&amp;&#32;i&#32;&lt;&#32;NDofs)&#32;{
160 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;0.0)&#32;z&#32;=&#32;0.0;
161 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&gt;&#32;1.0)&#32;z&#32;=&#32;1.0;
162 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(zero_derivative[i])&#32;{
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomialZeroDerivative(z,&#32;dofs_l[i],&#32;dofs_r[i]);
164 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomial(z,&#32;dofs_l[i],&#32;dofs_r[i],
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dofs_l[derivative[i]],
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dofs_r[derivative[i]]);
168 &#32;&#32;&#32;&#32;}
169 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
170 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;There&#32;seems&#32;to&#32;be&#32;an&#32;error&#32;in&#32;Sector::get_dof.&#32;i&#32;&gt;&#32;0&#32;&amp;&amp;&#32;i&#32;&lt;&#32;&quot;</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;dofs_per_sector&#32;false.&quot;</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
173 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
174 &#32;&#32;}
175 }
176 
177 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a2fcef999ffc19d510f17662565b921f0">178 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1a2fcef999ffc19d510f17662565b921f0">Sector&lt;Dofs_Per_Sector&gt;::get_r</link>(<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
179 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;0.0)&#32;z&#32;=&#32;0.0;
180 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&gt;&#32;1.0)&#32;z&#32;=&#32;1.0;
181 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Dofs_Per_Sector&#32;&lt;&#32;3)&#32;{
182 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Error&#32;in&#32;Sector:&#32;Acces&#32;to&#32;radius&#32;dof&#32;without&#32;existence.&quot;</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
184 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
185 &#32;&#32;}
186 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomialZeroDerivative(z,&#32;dofs_l[0],&#32;dofs_r[0]);
187 }
188 
189 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1acf707bf29246b564338b49d6653812ab">190 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1acf707bf29246b564338b49d6653812ab">Sector&lt;Dofs_Per_Sector&gt;::get_m</link>(<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
191 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;0.0)&#32;z&#32;=&#32;0.0;
192 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&gt;&#32;1.0)&#32;z&#32;=&#32;1.0;
193 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Dofs_Per_Sector&#32;==&#32;2)&#32;{
194 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomial(z,&#32;dofs_l[0],&#32;dofs_r[0],&#32;dofs_l[1],
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dofs_r[1]);
196 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
197 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomial(z,&#32;dofs_l[1],&#32;dofs_r[1],&#32;dofs_l[2],
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dofs_r[2]);
199 &#32;&#32;}
200 }
201 
202 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1addd7217e2ab6fe8104e092e4514804fc">203 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1addd7217e2ab6fe8104e092e4514804fc">Sector&lt;Dofs_Per_Sector&gt;::get_v</link>(<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
204 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;0.0)&#32;z&#32;=&#32;0.0;
205 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&gt;&#32;1.0)&#32;z&#32;=&#32;1.0;
206 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Dofs_Per_Sector&#32;==&#32;2)&#32;{
207 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomialZeroDerivative(z,&#32;dofs_l[1],&#32;dofs_r[1]);
208 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
209 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;InterpolationPolynomialZeroDerivative(z,&#32;dofs_l[2],&#32;dofs_r[2]);
210 &#32;&#32;}
211 }
212 
213 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a01595c09bec7ef57431ab39e29a90a67">214 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1a01595c09bec7ef57431ab39e29a90a67">Sector&lt;Dofs_Per_Sector&gt;::getQ1</link>(<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
215 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;1&#32;/&#32;(dofs_l[0]&#32;+&#32;z&#32;*&#32;z&#32;*&#32;z&#32;*&#32;(2&#32;*&#32;dofs_l[0]&#32;-&#32;2&#32;*&#32;dofs_r[0])&#32;-
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z&#32;*&#32;z&#32;*&#32;(3&#32;*&#32;dofs_l[0]&#32;-&#32;3&#32;*&#32;dofs_r[0]));
217 }
218 
219 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a55743720f4d5d768c7bd30658c19f499">220 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1a55743720f4d5d768c7bd30658c19f499">Sector&lt;Dofs_Per_Sector&gt;::getQ2</link>(<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
221 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;1&#32;/&#32;(dofs_l[0]&#32;+&#32;z&#32;*&#32;z&#32;*&#32;z&#32;*&#32;(2&#32;*&#32;dofs_l[0]&#32;-&#32;2&#32;*&#32;dofs_r[0])&#32;-
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z&#32;*&#32;z&#32;*&#32;(3&#32;*&#32;dofs_l[0]&#32;-&#32;3&#32;*&#32;dofs_r[0]));
223 }
224 
225 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a11a28348094a673a59d26fe1c05cd910">226 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_sector_1a11a28348094a673a59d26fe1c05cd910">Sector&lt;Dofs_Per_Sector&gt;::getQ3</link>(<emphasis class="keywordtype">double</emphasis>)<emphasis class="keyword">&#32;const&#32;</emphasis>{
227 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
228 }
229 
230 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
231 Tensor&lt;2,&#32;3,&#32;double&gt;&#32;<link linkend="class_sector_1a2b2569942b14219db1d11200684f7ac8">Sector&lt;3&gt;::TransformationTensorInternal</link>(<emphasis class="keywordtype">double</emphasis>&#32;in_x,
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_y,
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
234 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;0&#32;||&#32;z&#32;&gt;&#32;1)
235 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Falty&#32;implementation&#32;of&#32;internal&#32;Tensor&#32;calculation:&#32;z:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
237 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;RadiusInMultiplyer&#32;=
238 &#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;/&#32;(2&#32;*&#32;dofs_l[0]);
239 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;RadiusOutMultiplyer&#32;=
240 &#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;/&#32;(2&#32;*&#32;dofs_r[0]);
241 
242 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;temp&#32;=&#32;1&#32;/&#32;(RadiusInMultiplyer&#32;-&#32;3&#32;*&#32;RadiusInMultiplyer&#32;*&#32;z&#32;*&#32;z&#32;+
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;*&#32;RadiusInMultiplyer&#32;*&#32;z&#32;*&#32;z&#32;*&#32;z&#32;+
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;z&#32;*&#32;z&#32;-
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;z&#32;*&#32;z&#32;*&#32;z);
246 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;zz&#32;=&#32;z&#32;*&#32;z;
247 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;zzz&#32;=&#32;zz&#32;*&#32;z;
248 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;zzzz&#32;=&#32;zz&#32;*&#32;zz;
249 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;zzzzz&#32;=&#32;zzz&#32;*&#32;zz;
250 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;help1&#32;=&#32;(RadiusInMultiplyer&#32;-&#32;3&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zz&#32;+
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzz&#32;+&#32;3&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zz&#32;-
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzz);
253 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;help2&#32;=
254 &#32;&#32;&#32;&#32;&#32;&#32;(help1&#32;*&#32;(dofs_l[2]&#32;-&#32;6&#32;*&#32;dofs_l[1]&#32;*&#32;z&#32;+&#32;6&#32;*&#32;dofs_r[1]&#32;*&#32;z&#32;-
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;dofs_l[2]&#32;*&#32;z&#32;-&#32;2&#32;*&#32;dofs_r[2]&#32;*&#32;z&#32;+&#32;6&#32;*&#32;dofs_l[1]&#32;*&#32;zz&#32;-
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;dofs_r[1]&#32;*&#32;zz&#32;+&#32;3&#32;*&#32;dofs_l[2]&#32;*&#32;zz&#32;+&#32;3&#32;*&#32;dofs_r[2]&#32;*&#32;zz)&#32;+
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;z&#32;*&#32;(RadiusInMultiplyer&#32;-&#32;RadiusOutMultiplyer)&#32;*&#32;(z&#32;-&#32;1)&#32;*
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(dofs_l[1]&#32;+
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zzz&#32;*&#32;(2&#32;*&#32;dofs_l[1]&#32;-&#32;2&#32;*&#32;dofs_r[1]&#32;+&#32;dofs_l[2]&#32;+&#32;dofs_r[2])&#32;+
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dofs_l[2]&#32;*&#32;z&#32;-
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zz&#32;*&#32;(3&#32;*&#32;dofs_l[1]&#32;-&#32;3&#32;*&#32;dofs_r[1]&#32;+&#32;2&#32;*&#32;dofs_l[2]&#32;+&#32;dofs_r[2])))&#32;/
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help1&#32;-
263 &#32;&#32;&#32;&#32;&#32;&#32;(6&#32;*&#32;in_y&#32;*&#32;z&#32;*&#32;(RadiusInMultiplyer&#32;-&#32;RadiusOutMultiplyer)&#32;*&#32;(z&#32;-&#32;1))&#32;/
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;help1;
265 
266 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;u;
267 &#32;&#32;u[0][0]&#32;=&#32;temp;
268 &#32;&#32;u[0][1]&#32;=&#32;0.0;
269 &#32;&#32;u[0][2]&#32;=&#32;0.0;
270 &#32;&#32;u[1][0]&#32;=&#32;0.0;
271 &#32;&#32;u[1][1]&#32;=&#32;temp;
272 &#32;&#32;u[1][2]&#32;=&#32;0.0;
273 &#32;&#32;u[2][0]&#32;=
274 &#32;&#32;&#32;&#32;&#32;&#32;-(6&#32;*&#32;in_x&#32;*&#32;z&#32;*&#32;(RadiusInMultiplyer&#32;-&#32;RadiusOutMultiplyer)&#32;*&#32;(z&#32;-&#32;1))&#32;/
275 &#32;&#32;&#32;&#32;&#32;&#32;help1;
276 &#32;&#32;u[2][1]&#32;=
277 &#32;&#32;&#32;&#32;&#32;&#32;(RadiusInMultiplyer&#32;*&#32;dofs_l[2]&#32;+
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zz&#32;+
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;36&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzz&#32;-
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zz&#32;-
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zz&#32;-
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;60&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzzz&#32;-
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;36&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzz&#32;-
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;36&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzz&#32;+
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;24&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzzzz&#32;+
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;60&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzzz&#32;+
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;60&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzzz&#32;+
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;36&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzz&#32;-
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;24&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzzzz&#32;-
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;24&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;zzzzz&#32;-
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;60&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzzz&#32;+
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;24&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;zzzzz&#32;-
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zz&#32;+
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;32&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zzz&#32;+
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;3&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zz&#32;+
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;9&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zz&#32;-
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;35&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zzzz&#32;+
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zzz&#32;-
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;32&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zzz&#32;+
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zzzzz&#32;-
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;25&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zzzz&#32;+
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;35&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zzzz&#32;-
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zzz&#32;+
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zzzzz&#32;-
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;zzzzz&#32;+
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;25&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zzzz&#32;-
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;zzzzz&#32;-
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;RadiusInMultiplyer&#32;*&#32;in_y&#32;*&#32;zz&#32;+
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;in_y&#32;*&#32;zz&#32;-
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;12&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;z&#32;+
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;dofs_l[1]&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;z&#32;+
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;dofs_r[1]&#32;*&#32;RadiusInMultiplyer&#32;*&#32;z&#32;-
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_l[2]&#32;*&#32;z&#32;-
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;*&#32;RadiusInMultiplyer&#32;*&#32;dofs_r[2]&#32;*&#32;z&#32;+
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;RadiusInMultiplyer&#32;*&#32;in_y&#32;*&#32;z&#32;-&#32;6&#32;*&#32;RadiusOutMultiplyer&#32;*&#32;in_y&#32;*&#32;z)&#32;/
316 &#32;&#32;&#32;&#32;&#32;&#32;help1;
317 &#32;&#32;u[2][2]&#32;=&#32;1.0;
318 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Q[3];
319 
320 &#32;&#32;Q[0]&#32;=&#32;1&#32;/&#32;(RadiusInMultiplyer&#32;+
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zzz&#32;*&#32;(2&#32;*&#32;RadiusInMultiplyer&#32;-&#32;2&#32;*&#32;RadiusOutMultiplyer)&#32;-
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zz&#32;*&#32;(3&#32;*&#32;RadiusInMultiplyer&#32;-&#32;3&#32;*&#32;RadiusOutMultiplyer));
323 &#32;&#32;Q[1]&#32;=&#32;1&#32;/&#32;(RadiusInMultiplyer&#32;+
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zzz&#32;*&#32;(2&#32;*&#32;RadiusInMultiplyer&#32;-&#32;2&#32;*&#32;RadiusOutMultiplyer)&#32;-
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;zz&#32;*&#32;(3&#32;*&#32;RadiusInMultiplyer&#32;-&#32;3&#32;*&#32;RadiusOutMultiplyer));
326 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Q[1]&#32;&lt;&#32;0)&#32;Q[1]&#32;*=&#32;-1.0;
327 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Q[0]&#32;&lt;&#32;0)&#32;Q[0]&#32;*=&#32;-1.0;
328 &#32;&#32;Q[2]&#32;=
329 &#32;&#32;&#32;&#32;&#32;&#32;sqrt(help2&#32;*&#32;help2&#32;+
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(36&#32;*&#32;in_x&#32;*&#32;in_x&#32;*&#32;zz&#32;*&#32;(RadiusInMultiplyer&#32;-&#32;RadiusOutMultiplyer)&#32;*
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(RadiusInMultiplyer&#32;-&#32;RadiusOutMultiplyer)&#32;*&#32;(z&#32;-&#32;1)&#32;*&#32;(z&#32;-&#32;1))&#32;/
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(help1&#32;*&#32;help1)&#32;+
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1);
334 
335 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;ginv;
336 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
337 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;ginv[i][j]&#32;+=&#32;u[i][k]&#32;*&#32;u[j][k];
339 &#32;&#32;&#32;&#32;}
340 &#32;&#32;}
341 
342 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;g;
343 
344 &#32;&#32;g&#32;=&#32;invert(ginv);
345 
346 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sp&#32;=&#32;dotproduct(u[0],&#32;crossproduct(u[1],&#32;u[2]));
347 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sp&#32;&lt;&#32;0)&#32;sp&#32;*=&#32;-1.0;
348 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
349 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;g[i][j]&#32;*=&#32;sp&#32;*&#32;Q[0]&#32;*&#32;Q[1]&#32;*&#32;Q[2]&#32;/&#32;(Q[i]&#32;*&#32;Q[j]);
351 &#32;&#32;&#32;&#32;}
352 &#32;&#32;}
353 
354 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;g;
355 }
356 
357 <emphasis class="keyword">template</emphasis>&#32;&lt;&gt;
358 Tensor&lt;2,&#32;3,&#32;double&gt;&#32;<link linkend="class_sector_1a2b2569942b14219db1d11200684f7ac8">Sector&lt;2&gt;::TransformationTensorInternal</link>(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)<emphasis class="keyword">&#32;const&#32;</emphasis>{
360 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(z&#32;&lt;&#32;0&#32;||&#32;z&#32;&gt;&#32;1)
361 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Falty&#32;implementation&#32;of&#32;internal&#32;Tensor&#32;calculation:&#32;z:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;z
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
363 
364 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;zz&#32;=&#32;z&#32;*&#32;z;
365 
366 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;u;
367 &#32;&#32;u[0][0]&#32;=&#32;1;
368 &#32;&#32;u[0][1]&#32;=&#32;0.0;
369 &#32;&#32;u[0][2]&#32;=&#32;0.0;
370 &#32;&#32;u[1][0]&#32;=&#32;0.0;
371 &#32;&#32;u[1][1]&#32;=&#32;1;
372 &#32;&#32;u[1][2]&#32;=&#32;0.0;
373 &#32;&#32;u[2][0]&#32;=&#32;0.0;
374 &#32;&#32;u[2][1]&#32;=&#32;6&#32;*&#32;dofs_l[0]&#32;*&#32;z&#32;-&#32;dofs_l[1]&#32;-&#32;6&#32;*&#32;dofs_r[0]&#32;*&#32;z&#32;+
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;dofs_l[1]&#32;*&#32;z&#32;+&#32;2&#32;*&#32;dofs_r[1]&#32;*&#32;z&#32;-&#32;6&#32;*&#32;dofs_l[0]&#32;*&#32;zz&#32;+
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6&#32;*&#32;dofs_r[0]&#32;*&#32;zz&#32;-&#32;3&#32;*&#32;dofs_l[1]&#32;*&#32;zz&#32;-&#32;3&#32;*&#32;dofs_r[1]&#32;*&#32;zz;
377 &#32;&#32;u[2][2]&#32;=&#32;1.0;
378 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Q[3];
379 &#32;&#32;Q[0]&#32;=&#32;1;
380 &#32;&#32;Q[1]&#32;=&#32;1;
381 &#32;&#32;Q[2]&#32;=&#32;std::sqrt(
382 &#32;&#32;&#32;&#32;&#32;&#32;(dofs_l[1]&#32;-
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;*&#32;z&#32;*&#32;(3&#32;*&#32;dofs_l[0]&#32;-&#32;3&#32;*&#32;dofs_r[0]&#32;+&#32;2&#32;*&#32;dofs_l[1]&#32;+&#32;dofs_r[1])&#32;+
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;3&#32;*&#32;zz&#32;*
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pow(2&#32;*&#32;dofs_l[0]&#32;-&#32;2&#32;*&#32;dofs_r[0]&#32;+&#32;dofs_l[1]&#32;+&#32;dofs_r[1],&#32;2))&#32;+
386 &#32;&#32;&#32;&#32;&#32;&#32;1);
387 
388 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;ginv;
389 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
390 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;ginv[i][j]&#32;+=&#32;u[i][k]&#32;*&#32;u[j][k];
392 &#32;&#32;&#32;&#32;}
393 &#32;&#32;}
394 
395 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;g;
396 
397 &#32;&#32;g&#32;=&#32;invert(ginv);
398 
399 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sp&#32;=&#32;dotproduct(u[0],&#32;crossproduct(u[1],&#32;u[2]));
400 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sp&#32;&lt;&#32;0)&#32;sp&#32;*=&#32;-1.0;
401 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
402 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
403 &#32;&#32;&#32;&#32;&#32;&#32;g[i][j]&#32;*=&#32;sp&#32;*&#32;Q[0]&#32;*&#32;Q[1]&#32;*&#32;Q[2]&#32;/&#32;(Q[i]&#32;*&#32;Q[j]);
404 &#32;&#32;&#32;&#32;}
405 &#32;&#32;}
406 
407 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;g;
408 }
409 
410 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dimension&gt;
<link linkend="class_sector_1a2b2569942b14219db1d11200684f7ac8">411 </link>Tensor&lt;2,&#32;3,&#32;double&gt;&#32;<link linkend="class_sector_1a2b2569942b14219db1d11200684f7ac8">Sector&lt;Dimension&gt;::TransformationTensorInternal</link>(
412 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>)<emphasis class="keyword">&#32;const&#32;</emphasis>{
413 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;ret;
414 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;code&#32;does&#32;not&#32;work&#32;for&#32;you&#32;Sector&#32;specification.&quot;</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Dimension&#32;&lt;&lt;&#32;std::endl;
416 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
417 }
418 
419 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a74f1d1424faf72379ef85818509feb18">420 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_sector_1a74f1d1424faf72379ef85818509feb18">Sector&lt;Dofs_Per_Sector&gt;::getLowestDof</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
421 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;LowestDof;
422 }
423 
424 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a28c9ae7f32eb149d7f3a8e7808e56aa7">425 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_sector_1a28c9ae7f32eb149d7f3a8e7808e56aa7">Sector&lt;Dofs_Per_Sector&gt;::getNDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
426 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NDofs;
427 }
428 
429 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a664059f783a9f7be0da5aa48a18430e0">430 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_sector_1a664059f783a9f7be0da5aa48a18430e0">Sector&lt;Dofs_Per_Sector&gt;::getNInternalBoundaryDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
431 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NInternalBoundaryDofs;
432 }
433 
434 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a4a746c6e92da3f9968fa1ae8df179ac0">435 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_sector_1a4a746c6e92da3f9968fa1ae8df179ac0">Sector&lt;Dofs_Per_Sector&gt;::getNActiveCells</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
436 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;NActiveCells;
437 }
438 
439 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a43ad74bf2b9e740f2d3172b15349de5c">440 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a43ad74bf2b9e740f2d3172b15349de5c">Sector&lt;Dofs_Per_Sector&gt;::setLowestDof</link>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_lowestdof)&#32;{
441 &#32;&#32;LowestDof&#32;=&#32;in_lowestdof;
442 }
443 
444 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1aae228325497b1b8da9bc2e2a325fcc6f">445 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1aae228325497b1b8da9bc2e2a325fcc6f">Sector&lt;Dofs_Per_Sector&gt;::setNDofs</link>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_ndofs)&#32;{
446 &#32;&#32;NDofs&#32;=&#32;in_ndofs;
447 }
448 
449 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1a0d8e1e8ea932dddd7af3dae10af20156">450 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1a0d8e1e8ea932dddd7af3dae10af20156">Sector&lt;Dofs_Per_Sector&gt;::setNInternalBoundaryDofs</link>(
451 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_ninternalboundarydofs)&#32;{
452 &#32;&#32;NInternalBoundaryDofs&#32;=&#32;in_ninternalboundarydofs;
453 }
454 
455 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Dofs_Per_Sector&gt;
<link linkend="class_sector_1ac021e78fe81aea278d5d0c76486fdb50">456 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_sector_1ac021e78fe81aea278d5d0c76486fdb50">Sector&lt;Dofs_Per_Sector&gt;::setNActiveCells</link>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_nactivecells)&#32;{
457 &#32;&#32;NActiveCells&#32;=&#32;in_nactivecells;
458 }
459 
460 <emphasis class="keyword">template</emphasis>&#32;<emphasis class="keyword">class&#32;</emphasis><link linkend="class_sector">Sector&lt;2&gt;</link>;
461 <emphasis class="keyword">template</emphasis>&#32;<emphasis class="keyword">class&#32;</emphasis><link linkend="class_sector">Sector&lt;3&gt;</link>;
462 
463 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
