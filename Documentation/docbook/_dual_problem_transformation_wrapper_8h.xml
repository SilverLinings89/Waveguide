<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_dual_problem_transformation_wrapper_8h">
    <title>DualProblemTransformationWrapper.h File Reference</title>
    <programlisting>#include &lt;math.h&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &quot;../Core/Sector.h&quot;</programlisting>
    <programlisting>#include &quot;SpaceTransformation.h&quot;</programlisting>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_dual_problem_transformation_wrapper">DualProblemTransformationWrapper</link></para>
<para><emphasis>If we do an adjoint computation, we need a SpaceTransformation, which has the same properties as the primal one but measures in transformed coordinates.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/DualProblemTransformationWrapper.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;DualProblemTransformationWrapperFlag</emphasis>
2 <emphasis class="preprocessor">#define&#32;DualProblemTransformationWrapperFlag</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&quot;../Core/Sector.h&quot;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;SpaceTransformation.h&quot;</emphasis>
11 
12 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
13 
14 <emphasis class="comment"></emphasis>
15 <emphasis class="comment">/**</emphasis>
16 <emphasis class="comment">&#32;*&#32;\class&#32;DualProblemTransformationWrapper</emphasis>
17 <emphasis class="comment">&#32;*&#32;\brief&#32;If&#32;we&#32;do&#32;an&#32;adjoint&#32;computation,&#32;we&#32;need&#32;a&#32;SpaceTransformation,&#32;which&#32;has&#32;the&#32;same&#32;properties&#32;as&#32;the&#32;primal&#32;one&#32;but&#32;measures&#32;in&#32;transformed&#32;coordinates.&#32;This&#32;Wrapper&#32;contains&#32;the&#32;space&#32;transformation&#32;of&#32;the&#32;primal&#32;version&#32;but&#32;maps&#32;input&#32;parameters&#32;to&#32;their&#32;dual&#32;equivalent.</emphasis>
18 <emphasis class="comment">&#32;*</emphasis>
19 <emphasis class="comment">&#32;*&#32;Essentially&#32;this&#32;class&#32;enables&#32;us&#32;to&#32;write&#32;a&#32;waveguide&#32;class&#32;which&#32;is&#32;unaware&#32;of&#32;its&#32;being&#32;primal&#32;or&#32;dual.&#32;Using&#32;this&#32;wrapper&#32;makes&#32;us&#32;compute&#32;the&#32;solution&#32;of&#32;the&#32;inverse&#32;order&#32;shape&#32;parametrization.</emphasis>
20 <emphasis class="comment">&#32;*&#32;\author&#32;Pascal&#32;Kraft</emphasis>
21 <emphasis class="comment">&#32;*&#32;\date&#32;1.12.2016</emphasis>
22 <emphasis class="comment">&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper">23 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_dual_problem_transformation_wrapper">DualProblemTransformationWrapper</link>&#32;:&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;{
24 
25 <emphasis class="keyword">public</emphasis>:<emphasis class="comment"></emphasis>
26 <emphasis class="comment">/**</emphasis>
27 <emphasis class="comment">&#32;*&#32;Since&#32;this&#32;object&#32;encapsulates&#32;another&#32;Space&#32;Transformation,&#32;the&#32;construction&#32;is&#32;straight&#32;forward.</emphasis>
28 <emphasis class="comment">&#32;*&#32;\param&#32;non_dual_st&#32;This&#32;pointer&#32;points&#32;to&#32;the&#32;actual&#32;transformation&#32;that&#32;is&#32;being&#32;wrapped.</emphasis>
29 <emphasis class="comment">&#32;*/</emphasis>
30 &#32;&#32;<link linkend="class_dual_problem_transformation_wrapper">DualProblemTransformationWrapper</link>(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*&#32;non_dual_st,&#32;<emphasis class="keywordtype">int</emphasis>&#32;rank);
31 
32 &#32;&#32;~<link linkend="class_dual_problem_transformation_wrapper">DualProblemTransformationWrapper</link>();
33 <emphasis class="comment"></emphasis>
34 <emphasis class="comment">&#32;&#32;/**</emphasis>
35 <emphasis class="comment">&#32;&#32;&#32;*&#32;One&#32;of&#32;the&#32;core&#32;functionalities&#32;of&#32;a&#32;SpaceTransformation&#32;is&#32;to&#32;map&#32;a&#32;mathematical&#32;coordinate&#32;to&#32;a&#32;physical&#32;one&#32;(so&#32;an&#32;transformed&#32;to&#32;an&#32;untransformed&#32;coordinate).</emphasis>
36 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;coord&#32;the&#32;coordinate&#32;to&#32;be&#32;transformed.&#32;In&#32;this&#32;class&#32;we&#32;simply&#32;pass&#32;the</emphasis>
37 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
38 &#32;&#32;Point&lt;3&gt;&#32;math_to_phys(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
39 <emphasis class="comment"></emphasis>
40 <emphasis class="comment">&#32;&#32;/**</emphasis>
41 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;does&#32;the&#32;same&#32;as&#32;math_to_phys&#32;only&#32;in&#32;the&#32;opposit&#32;direction.</emphasis>
42 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;coord&#32;the&#32;coordinate&#32;to&#32;be&#32;transformed.</emphasis>
43 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
44 &#32;&#32;Point&lt;3&gt;&#32;phys_to_math(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
45 
46 <emphasis class="comment"></emphasis>
47 <emphasis class="comment">&#32;&#32;/**</emphasis>
48 <emphasis class="comment">&#32;&#32;&#32;*&#32;In&#32;order&#32;to&#32;test&#32;implementation,&#32;this&#32;function&#32;was&#32;added&#32;to&#32;check,&#32;if&#32;the&#32;transformation-tensor&#32;at&#32;a&#32;given&#32;coordinate&#32;is&#32;the&#32;identity&#32;or&#32;not.</emphasis>
49 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;coord&#32;This&#32;is&#32;the&#32;coordinate&#32;to&#32;test.</emphasis>
50 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
51 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;is_identity(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
52 
53 &#32;&#32;Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Tensor(Point&lt;3&gt;&#32;&amp;&#32;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;;
54 
55 &#32;&#32;Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Preconditioner_Tensor(Point&lt;3&gt;&#32;&amp;&#32;coordinate,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
56 
57 &#32;&#32;Tensor&lt;2,3,std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate,&#32;Tensor&lt;2,3,double&gt;&#32;Tensor_input)&#32;<emphasis class="keyword">const</emphasis>;
58 
59 &#32;&#32;Tensor&lt;2,3,std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor_For_Preconditioner&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate,&#32;Tensor&lt;2,3,double&gt;&#32;Tensor_input,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
60 
61 &#32;&#32;Tensor&lt;2,3,double&gt;&#32;get_Space_Transformation_Tensor&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate)&#32;<emphasis class="keyword">const</emphasis>;
62 
63 &#32;&#32;Tensor&lt;2,3,double&gt;&#32;get_Space_Transformation_Tensor_Homogenized&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;;
64 
65 
66 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;XMinus,&#32;XPlus,&#32;YMinus,&#32;YPlus,&#32;ZMinus,&#32;ZPlus;
67 <emphasis class="comment"></emphasis>
68 <emphasis class="comment">&#32;&#32;/**</emphasis>
69 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the&#32;x-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3&#32;functions.</emphasis>
70 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
71 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
72 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;&#32;PML_in_X(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
73 <emphasis class="comment"></emphasis>
74 <emphasis class="comment">&#32;&#32;/**</emphasis>
75 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the&#32;y-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3&#32;functions.</emphasis>
76 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
77 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
78 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;&#32;PML_in_Y(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
79 <emphasis class="comment"></emphasis>
80 <emphasis class="comment">&#32;&#32;/**</emphasis>
81 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the&#32;z-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3&#32;functions.</emphasis>
82 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
83 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
84 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;&#32;PML_in_Z(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
85 <emphasis class="comment"></emphasis>
86 <emphasis class="comment">&#32;&#32;/**</emphasis>
87 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;fulfills&#32;the&#32;same&#32;purpose&#32;as&#32;those&#32;with&#32;similar&#32;names&#32;but&#32;it&#32;is&#32;supposed&#32;to&#32;be&#32;used&#32;together&#32;with&#32;Preconditioner_PML_in_Z&#32;instead&#32;of&#32;the&#32;versions&#32;without&#32;&quot;Preconditioner&quot;.</emphasis>
88 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
89 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Preconditioner_PML_Z_Distance(Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block&#32;)&#32;<emphasis class="keyword">const</emphasis>;
90 <emphasis class="comment"></emphasis>
91 <emphasis class="comment">&#32;&#32;/**</emphasis>
92 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).</emphasis>
93 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the&#32;PML-surface.</emphasis>
94 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
95 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;PML_X_Distance(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
96 <emphasis class="comment"></emphasis>
97 <emphasis class="comment">&#32;&#32;/**</emphasis>
98 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).</emphasis>
99 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the&#32;PML-surface.</emphasis>
100 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
101 
102 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;PML_Y_Distance(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;<emphasis class="comment"></emphasis>
103 <emphasis class="comment">&#32;&#32;/**</emphasis>
104 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).</emphasis>
105 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the&#32;PML-surface.</emphasis>
106 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
107 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;PML_Z_Distance(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
108 <emphasis class="comment"></emphasis>
109 <emphasis class="comment">&#32;&#32;/**</emphasis>
110 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;contains&#32;all&#32;the&#32;Sectors&#32;who,&#32;as&#32;a&#32;sum,&#32;form&#32;the&#32;complete&#32;Waveguide.&#32;These&#32;Sectors&#32;are&#32;a&#32;partition&#32;of&#32;the&#32;simulated&#32;domain.</emphasis>
111 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper_1ac3ad1e8ae7b9fa8742250daa56e7223a">112 </link>&#32;&#32;std::vector&lt;Sector&lt;3&gt;&gt;&#32;<link linkend="class_dual_problem_transformation_wrapper_1ac3ad1e8ae7b9fa8742250daa56e7223a">case_sectors</link>;
113 <emphasis class="comment"></emphasis>
114 <emphasis class="comment">&#32;&#32;/**</emphasis>
115 <emphasis class="comment">&#32;&#32;&#32;*&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;inside&#32;the&#32;core.</emphasis>
116 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper_1afc5edad35f167cf78e5817aaededa1ca">117 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_dual_problem_transformation_wrapper_1afc5edad35f167cf78e5817aaededa1ca">epsilon_K</link>;<emphasis class="comment"></emphasis>
118 <emphasis class="comment">&#32;&#32;/**</emphasis>
119 <emphasis class="comment">&#32;&#32;&#32;*&#32;&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;outside&#32;the&#32;core.</emphasis>
120 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper_1afc8fe85dfb7dfb8252c60689063409f7">121 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_dual_problem_transformation_wrapper_1afc8fe85dfb7dfb8252c60689063409f7">epsilon_M</link>;<emphasis class="comment"></emphasis>
122 <emphasis class="comment">&#32;&#32;/**</emphasis>
123 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;the&#32;computational&#32;domain&#32;is&#32;split&#32;into&#32;subdomains&#32;(called&#32;sectors),&#32;it&#32;is&#32;important&#32;to&#32;keep&#32;track&#32;of&#32;the&#32;amount&#32;of&#32;subdomains.&#32;This&#32;member&#32;stores&#32;the&#32;number&#32;of&#32;Sectors&#32;the&#32;computational&#32;domain&#32;has&#32;been&#32;split&#32;into.</emphasis>
124 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper_1adac17a1c4ab8089210aa1b34c27e0629">125 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_dual_problem_transformation_wrapper_1adac17a1c4ab8089210aa1b34c27e0629">sectors</link>;
126 <emphasis class="comment"></emphasis>
127 <emphasis class="comment">&#32;&#32;/**</emphasis>
128 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;initialized&#32;with&#32;the&#32;value&#32;Delta&#32;from&#32;the&#32;input-file.</emphasis>
129 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper_1ae6883151a35093eaf92ec04e110d11d7">130 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_dual_problem_transformation_wrapper_1ae6883151a35093eaf92ec04e110d11d7">deltaY</link>;
131 <emphasis class="comment"></emphasis>
132 <emphasis class="comment">&#32;&#32;/**</emphasis>
133 <emphasis class="comment">&#32;&#32;&#32;*&#32;At&#32;the&#32;beginning&#32;(before&#32;the&#32;first&#32;solution&#32;of&#32;a&#32;system)&#32;only&#32;the&#32;boundary&#32;conditions&#32;for&#32;the&#32;shape&#32;of&#32;the&#32;waveguide&#32;are&#32;known.&#32;Therefore&#32;the&#32;values&#32;for&#32;the&#32;degrees&#32;of&#32;freedom&#32;need&#32;to&#32;be&#32;estimated.&#32;This&#32;function&#32;sets&#32;all&#32;variables&#32;to&#32;appropiate&#32;values&#32;and&#32;estimates&#32;an&#32;appropriate&#32;shape&#32;based&#32;on&#32;averages&#32;and&#32;a&#32;polynomial&#32;interpolation&#32;of&#32;the&#32;boundary&#32;conditions&#32;on&#32;the&#32;shape.</emphasis>
134 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
135 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;estimate_and_initialize();
136 <emphasis class="comment"></emphasis>
137 <emphasis class="comment">&#32;&#32;/**</emphasis>
138 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q1&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates&#32;(physical&#32;field).</emphasis>
139 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q1&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the&#32;function.</emphasis>
140 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
141 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_Q1&#32;(&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
142 <emphasis class="comment"></emphasis>
143 <emphasis class="comment">&#32;&#32;/**</emphasis>
144 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q2&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates&#32;(physical&#32;field).</emphasis>
145 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q2&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the&#32;function.</emphasis>
146 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
147 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_Q2&#32;(&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
148 <emphasis class="comment"></emphasis>
149 <emphasis class="comment">&#32;&#32;/**</emphasis>
150 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q3&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates&#32;(physical&#32;field).</emphasis>
151 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q3&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the&#32;function.</emphasis>
152 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
153 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_Q3&#32;(&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
154 
155 <emphasis class="comment"></emphasis>
156 <emphasis class="comment">&#32;&#32;/**</emphasis>
157 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from&#32;the&#32;domain&#32;of&#32;possible&#32;cases.</emphasis>
158 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.</emphasis>
159 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;This&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
160 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
161 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>;
162 <emphasis class="comment"></emphasis>
163 <emphasis class="comment">&#32;&#32;/**</emphasis>
164 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the&#32;input-connector&#32;cannot&#32;be&#32;changed).</emphasis>
165 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter&#32;to&#32;be&#32;changed.</emphasis>
166 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
167 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
168 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;set_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value&#32;);
169 <emphasis class="comment"></emphasis>
170 <emphasis class="comment">&#32;&#32;/**</emphasis>
171 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from&#32;the&#32;domain&#32;of&#32;possible&#32;cases.</emphasis>
172 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.</emphasis>
173 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;This&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
174 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
175 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_free_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>;
176 <emphasis class="comment"></emphasis>
177 <emphasis class="comment">&#32;&#32;/**</emphasis>
178 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the&#32;input-connector&#32;cannot&#32;be&#32;changed).</emphasis>
179 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter&#32;to&#32;be&#32;changed.</emphasis>
180 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
181 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
182 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;set_free_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value&#32;);
183 <emphasis class="comment"></emphasis>
184 <emphasis class="comment">&#32;&#32;/**</emphasis>
185 <emphasis class="comment">&#32;&#32;&#32;*&#32;Using&#32;this&#32;method&#32;unifies&#32;the&#32;usage&#32;of&#32;coordinates.&#32;This&#32;function&#32;takes&#32;a&#32;global&#32;\f$z\f$&#32;coordinate&#32;(in&#32;the&#32;computational&#32;domain)&#32;and&#32;returns&#32;both&#32;a&#32;Sector-Index&#32;and&#32;an&#32;internal&#32;\f$z\f$&#32;coordinate&#32;indicating&#32;which&#32;sector&#32;this&#32;coordinate&#32;belongs&#32;to&#32;and&#32;how&#32;far&#32;along&#32;in&#32;the&#32;sector&#32;it&#32;is&#32;located.</emphasis>
186 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;double&#32;in_z&#32;global&#32;system&#32;\f$z\f$&#32;coordinate&#32;for&#32;the&#32;transformation.</emphasis>
187 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
188 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;Z_to_Sector_and_local_z(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
189 <emphasis class="comment"></emphasis>
190 <emphasis class="comment">&#32;&#32;/**</emphasis>
191 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;complete&#32;length&#32;of&#32;the&#32;computational&#32;domain.</emphasis>
192 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
193 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;System_Length()&#32;<emphasis class="keyword">const</emphasis>;
194 <emphasis class="comment"></emphasis>
195 <emphasis class="comment">&#32;&#32;/**</emphasis>
196 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;sector</emphasis>
197 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
198 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Sector_Length()&#32;<emphasis class="keyword">const</emphasis>;
199 <emphasis class="comment"></emphasis>
200 <emphasis class="comment">&#32;&#32;/**</emphasis>
201 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;layer</emphasis>
202 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
203 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Layer_Length()&#32;<emphasis class="keyword">const</emphasis>;
204 <emphasis class="comment"></emphasis>
205 <emphasis class="comment">&#32;&#32;/**</emphasis>
206 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;radius&#32;for&#32;a&#32;system-coordinate;</emphasis>
207 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
208 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_r(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
209 <emphasis class="comment"></emphasis>
210 <emphasis class="comment">&#32;&#32;/**</emphasis>
211 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;shift&#32;for&#32;a&#32;system-coordinate;</emphasis>
212 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
213 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_m(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
214 <emphasis class="comment"></emphasis>
215 <emphasis class="comment">&#32;&#32;/**</emphasis>
216 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;tilt&#32;for&#32;a&#32;system-coordinate;</emphasis>
217 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
218 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_v(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
219 
220 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;Z_to_Layer(<emphasis class="keywordtype">double</emphasis>)&#32;<emphasis class="keyword">const</emphasis>;
221 <emphasis class="comment"></emphasis>
222 <emphasis class="comment">&#32;&#32;/**</emphasis>
223 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;vector&#32;of&#32;values&#32;saves&#32;the&#32;initial&#32;configuration</emphasis>
224 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_dual_problem_transformation_wrapper_1aa487b458ab65e5741a2c6915f06f7538">225 </link>&#32;&#32;Vector&lt;double&gt;&#32;<link linkend="class_dual_problem_transformation_wrapper_1aa487b458ab65e5741a2c6915f06f7538">InitialDofs</link>;
226 <emphasis class="comment"></emphasis>
227 <emphasis class="comment">&#32;&#32;/**</emphasis>
228 <emphasis class="comment">&#32;&#32;&#32;*&#32;Other&#32;objects&#32;can&#32;use&#32;this&#32;function&#32;to&#32;retrieve&#32;an&#32;array&#32;of&#32;the&#32;current&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;of&#32;the&#32;functional&#32;we&#32;are&#32;optimizing.&#32;This&#32;also&#32;includes&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;and&#32;other&#32;functions&#32;can&#32;be&#32;used&#32;to&#32;determine&#32;this&#32;property.&#32;This&#32;has&#32;to&#32;be&#32;done&#32;because&#32;in&#32;different&#32;cases&#32;the&#32;number&#32;of&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;can&#32;vary&#32;and&#32;we&#32;want&#32;no&#32;logic&#32;about&#32;this&#32;in&#32;other&#32;functions.</emphasis>
229 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
230 &#32;&#32;Vector&lt;double&gt;&#32;Dofs()&#32;<emphasis class="keyword">const</emphasis>;
231 <emphasis class="comment"></emphasis>
232 <emphasis class="comment">&#32;&#32;/**</emphasis>
233 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;number&#32;of&#32;unrestrained&#32;degrees&#32;of&#32;freedom&#32;of&#32;the&#32;current&#32;optimization&#32;run.</emphasis>
234 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
235 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NFreeDofs()&#32;<emphasis class="keyword">const</emphasis>;
236 <emphasis class="comment"></emphasis>
237 <emphasis class="comment">&#32;&#32;/**</emphasis>
238 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;total&#32;number&#32;of&#32;DOFs&#32;including&#32;restrained&#32;ones.&#32;This&#32;is&#32;the&#32;lenght&#32;of&#32;the&#32;array&#32;returned&#32;by&#32;Dofs().</emphasis>
239 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
240 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NDofs()&#32;<emphasis class="keyword">const</emphasis>;
241 <emphasis class="comment"></emphasis>
242 <emphasis class="comment">&#32;&#32;/**</emphasis>
243 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;Dofs()&#32;also&#32;returns&#32;restrained&#32;degrees&#32;of&#32;freedom,&#32;this&#32;function&#32;can&#32;be&#32;applied&#32;to&#32;determine&#32;if&#32;a&#32;degree&#32;of&#32;freedom&#32;is&#32;indeed&#32;free&#32;or&#32;restrained.&#32;&quot;restrained&quot;&#32;means&#32;that&#32;for&#32;example&#32;the&#32;DOF&#32;represents&#32;the&#32;radius&#32;at&#32;one&#32;of&#32;the&#32;connectors&#32;(input&#32;or&#32;output)&#32;and&#32;therefore&#32;we&#32;forbid&#32;the&#32;optimization&#32;scheme&#32;to&#32;vary&#32;this&#32;value.</emphasis>
244 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
245 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;IsDofFree(<emphasis class="keywordtype">int</emphasis>&#32;)&#32;<emphasis class="keyword">const</emphasis>;
246 <emphasis class="comment"></emphasis>
247 <emphasis class="comment">&#32;&#32;/**</emphasis>
248 <emphasis class="comment">&#32;&#32;&#32;*&#32;Console&#32;output&#32;of&#32;the&#32;current&#32;Waveguide&#32;Structure.</emphasis>
249 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
250 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;Print()&#32;<emphasis class="keyword">const</emphasis>;
251 
252 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z(<emphasis class="keywordtype">double</emphasis>&#32;z_in,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
253 
254 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z_with_sum(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
255 
256 &#32;&#32;std::complex&lt;double&gt;&#32;gauss_product_2D_sphere(<emphasis class="keywordtype">double</emphasis>&#32;z,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n,&#32;<emphasis class="keywordtype">double</emphasis>&#32;R,&#32;<emphasis class="keywordtype">double</emphasis>&#32;Xc,&#32;<emphasis class="keywordtype">double</emphasis>&#32;Yc,&#32;&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*&#32;in_w);
257 
258 &#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*&#32;st;
259 };
260 
261 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
