<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_optimization_algorithm_8h">
    <title>OptimizationAlgorithm.h File Reference</title>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_optimization_algorithm">OptimizationAlgorithm</link></para>
<para><emphasis>This class is an interface for Optimization algorithms such as CG or steepest descent.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/OptimizationAlgorithm/OptimizationAlgorithm.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;OptimizationAlgorithm_H_</emphasis>
2 <emphasis class="preprocessor">#define&#32;OptimizationAlgorithm_H_</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
5 <emphasis class="comment"></emphasis>
6 <emphasis class="comment">/**</emphasis>
7 <emphasis class="comment">&#32;*&#32;\class&#32;OptimizationAlgorithm</emphasis>
8 <emphasis class="comment">&#32;*&#32;\brief&#32;This&#32;class&#32;is&#32;an&#32;interface&#32;for&#32;Optimization&#32;algorithms&#32;such&#32;as&#32;CG&#32;or&#32;steepest&#32;descent.</emphasis>
9 <emphasis class="comment">&#32;*</emphasis>
10 <emphasis class="comment">&#32;*&#32;The&#32;derived&#32;classes&#32;take&#32;residuals&#32;and&#32;gradients,&#32;store&#32;them&#32;in&#32;a&#32;history&#32;and&#32;compute&#32;the&#32;next&#32;configuration&#32;based&#32;on&#32;the&#32;data.&#32;This&#32;functionality&#32;is&#32;encapsulated&#32;like&#32;this&#32;to&#32;enable&#32;easy&#32;exchange&#32;and&#32;comparison&#32;of&#32;convergence&#32;rates.</emphasis>
11 <emphasis class="comment">&#32;*&#32;Later&#32;on&#32;the&#32;interface&#32;will&#32;be&#32;extended&#32;to&#32;make&#32;use&#32;of&#32;output&#32;generators&#32;during&#32;runtime&#32;or&#32;at&#32;the&#32;end&#32;of&#32;the&#32;program&#32;to&#32;directly&#32;generate&#32;convergence&#32;plots.&#32;This&#32;class&#32;will&#32;also&#32;be&#32;extended&#32;to&#32;allow&#32;for&#32;restrained&#32;optimization&#32;which&#32;will&#32;become&#32;necessary&#32;at&#32;some&#32;point.</emphasis>
12 <emphasis class="comment">&#32;*&#32;\author&#32;Pascal&#32;Kraft</emphasis>
13 <emphasis class="comment">&#32;*&#32;\date&#32;29.11.2016</emphasis>
14 <emphasis class="comment">&#32;*/</emphasis>
15 
16 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keyword">typename</emphasis>&#32;datatype&gt;
<link linkend="class_optimization_algorithm">17 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_optimization_algorithm">OptimizationAlgorithm</link>{
18 
19 &#32;<emphasis class="keyword">public</emphasis>:
20 
21 &#32;&#32;std::vector&lt;std::vector&lt;datatype&gt;&gt;&#32;states;
22 
23 &#32;&#32;std::vector&lt;datatype&gt;&#32;residuals;
24 
25 &#32;&#32;<link linkend="class_optimization_algorithm">OptimizationAlgorithm</link>();
26 
27 &#32;&#32;~<link linkend="class_optimization_algorithm">OptimizationAlgorithm</link>();
28 <emphasis class="comment"></emphasis>
29 <emphasis class="comment">&#32;&#32;/**</emphasis>
30 <emphasis class="comment">&#32;&#32;&#32;*&#32;A&#32;function&#32;to&#32;pass&#32;a&#32;vector&#32;of&#32;values,&#32;computed&#32;by&#32;performing&#32;a&#32;single&#32;or&#32;multiple&#32;steps&#32;with&#32;short&#32;step-width.</emphasis>
31 <emphasis class="comment">&#32;&#32;&#32;*&#32;&quot;small&quot;&#32;in&#32;the&#32;name&#32;references&#32;the&#32;fact,&#32;that&#32;the&#32;step&#32;width&#32;is&#32;small.&#32;In&#32;gerneral&#32;this&#32;is&#32;done&#32;whenever&#32;an&#32;accurat&#32;approximation&#32;of&#32;a&#32;gradient&#32;is&#32;saught&#32;based&#32;on&#32;linearization.&#32;This&#32;computation&#32;(especially&#32;in&#32;finite&#32;difference&#32;based&#32;approaches)&#32;can&#32;be&#32;much&#32;more&#32;costly&#32;than&#32;a&#32;big&#32;step.&#32;In&#32;a&#32;big&#32;step,&#32;one&#32;forward&#32;problem&#32;has&#32;to&#32;be&#32;solved.&#32;A&#32;small&#32;step&#32;computation&#32;based&#32;on&#32;finite&#32;differences&#32;requires&#32;\f$NDofs\f$&#32;forward&#32;problems&#32;to&#32;be&#32;solved.&#32;This&#32;function&#32;has&#32;the&#32;purpose&#32;of&#32;passing&#32;the&#32;result&#32;of&#32;such&#32;computations&#32;to&#32;the&#32;optimization&#32;algorithm&#32;which&#32;will&#32;store&#32;it&#32;and&#32;use&#32;it&#32;to&#32;compute&#32;optimization&#32;steps&#32;in&#32;the&#32;future.</emphasis>
32 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;vec&#32;This&#32;parameter&#32;is&#32;a&#32;vector&#32;of&#32;changes&#32;of&#32;the&#32;target&#32;functional&#32;based&#32;on&#32;a&#32;change&#32;in&#32;the&#32;individual&#32;component.&#32;The&#32;components&#32;belonging&#32;to&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;are&#32;set&#32;to&#32;zero.</emphasis>
33 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
34 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_optimization_algorithm_1a8b94776efc6cb8783f3781c75a6c8d01">pass_result_small_step</link>(std::vector&lt;datatype&gt;&#32;vec);
35 
36 <emphasis class="comment"></emphasis>
37 <emphasis class="comment">&#32;&#32;/**</emphasis>
38 <emphasis class="comment">&#32;&#32;&#32;*&#32;Similar&#32;to&#32;pass_result_small_step&#32;but&#32;for&#32;the&#32;results&#32;of&#32;big&#32;steps.</emphasis>
39 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;for&#32;a&#32;big&#32;step&#32;we&#32;always&#32;only&#32;perform&#32;the&#32;solution&#32;of&#32;one&#32;forward&#32;problem&#32;we&#32;also&#32;only&#32;get&#32;one&#32;change&#32;of&#32;the&#32;target&#32;functional.&#32;Therefore&#32;in&#32;this&#32;case&#32;we&#32;only&#32;pass&#32;a&#32;value,&#32;not&#32;a&#32;vector&#32;of&#32;the&#32;like.</emphasis>
40 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;input&#32;This&#32;is&#32;the&#32;value&#32;describing&#32;how&#32;much&#32;the&#32;target&#32;functional&#32;has&#32;changed&#32;upon&#32;performing&#32;the&#32;step&#32;last&#32;computed&#32;by&#32;this&#32;optimization&#32;algorithm.</emphasis>
41 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
42 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_optimization_algorithm_1ac35f79dd2065a34291033e10393059f0">pass_result_big_step</link>(datatype&#32;input);
43 <emphasis class="comment"></emphasis>
44 <emphasis class="comment">&#32;&#32;/**</emphasis>
45 <emphasis class="comment">&#32;&#32;&#32;*&#32;The&#32;optimization&#32;is&#32;mainly&#32;split&#32;into&#32;two&#32;kinds&#32;of&#32;steps:&#32;Full&#32;and&#32;small&#32;steps.&#32;For&#32;FD&#32;based&#32;schemes,&#32;a&#32;small&#32;step&#32;is&#32;a&#32;computation&#32;of&#32;finite&#32;differences&#32;for&#32;all&#32;degrees&#32;of&#32;freedom&#32;which&#32;entails&#32;a&#32;lot&#32;of&#32;computation.&#32;Small&#32;here&#32;refers&#32;to&#32;the&#32;norm&#32;of&#32;the&#32;step&#32;width&#32;-&#32;not&#32;necessarily&#32;to&#32;the&#32;amount&#32;of&#32;computation&#32;required.</emphasis>
46 <emphasis class="comment">&#32;&#32;&#32;*&#32;In&#32;general&#32;this&#32;function&#32;is&#32;supposed&#32;to&#32;gather&#32;information&#32;about&#32;the&#32;target&#32;functional&#32;around&#32;the&#32;current&#32;state.</emphasis>
47 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;small_steps_before&#32;this&#32;number&#32;tells&#32;the&#32;scheme&#32;how&#32;many&#32;small&#32;steps&#32;were&#32;performed&#32;before&#32;the&#32;current&#32;request.</emphasis>
48 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;this&#32;is&#32;true,&#32;if&#32;the&#32;Optimization&#32;Scheme&#32;requires&#32;more&#32;small&#32;steps&#32;before&#32;a&#32;big&#32;step&#32;can&#32;be&#32;performed.</emphasis>
49 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
50 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_optimization_algorithm_1acd99748a064841050a37f71625742578">perform_small_step_next</link>(&#32;<emphasis class="keywordtype">int</emphasis>&#32;small_steps_before&#32;)&#32;=&#32;0;
51 <emphasis class="comment"></emphasis>
52 <emphasis class="comment">&#32;&#32;/**</emphasis>
53 <emphasis class="comment">&#32;&#32;&#32;*&#32;For&#32;the&#32;optimization&#32;scheme&#32;to&#32;know,&#32;which&#32;step&#32;size&#32;is&#32;appropriate,&#32;this&#32;function&#32;was&#32;included.</emphasis>
54 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;small_steps_before&#32;similar&#32;to&#32;perform_small_step_next&#32;this&#32;is&#32;the&#32;number&#32;of&#32;small&#32;steps&#32;before&#32;the&#32;current&#32;one.</emphasis>
55 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;double&#32;this&#32;is&#32;how&#32;much&#32;the&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;should&#32;be&#32;adapted.</emphasis>
56 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
57 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_optimization_algorithm_1a2646d4c12be435b286a9a720e45789e6">get_small_step_step_width</link>(&#32;<emphasis class="keywordtype">int</emphasis>&#32;small_steps_before&#32;)&#32;=&#32;0;
58 <emphasis class="comment"></emphasis>
59 <emphasis class="comment">&#32;&#32;/**</emphasis>
60 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;functions&#32;returns&#32;true,&#32;if&#32;enough&#32;steps&#32;were&#32;performed&#32;to&#32;compute&#32;the&#32;next&#32;state&#32;to&#32;compute&#32;a&#32;full&#32;solution&#32;on.</emphasis>
61 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;small_steps_before&#32;number&#32;of&#32;small&#32;steps&#32;performed&#32;before&#32;this&#32;call.</emphasis>
62 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;true,&#32;if&#32;the&#32;next&#32;computation&#32;should&#32;be&#32;a&#32;big&#32;step&#32;-&#32;otherwise&#32;false.</emphasis>
63 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
64 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_optimization_algorithm_1ab633847baf50637039a6498ba2fa114d">perform_big_step_next</link>(&#32;<emphasis class="keywordtype">int</emphasis>&#32;small_steps_before&#32;)&#32;=0&#32;;
65 <emphasis class="comment"></emphasis>
66 <emphasis class="comment">&#32;&#32;/**</emphasis>
67 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;computes&#32;the&#32;states&#32;that&#32;should&#32;be&#32;computed&#32;next.&#32;If&#32;the&#32;next&#32;step&#32;will&#32;be&#32;a&#32;small&#32;step&#32;the&#32;update&#32;can&#32;be&#32;done&#32;by&#32;simply&#32;updating&#32;all&#32;dofs&#32;with&#32;a&#32;step&#32;width&#32;(or&#32;only&#32;one&#32;depending&#32;on&#32;the&#32;pattern)&#32;so&#32;this&#32;function&#32;is&#32;only&#32;used&#32;when&#32;a&#32;big&#32;step&#32;will&#32;be&#32;computed&#32;next&#32;and&#32;therefore&#32;all&#32;dofs&#32;could&#32;change&#32;differently.</emphasis>
68 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;This&#32;is&#32;a&#32;vector&#32;of&#32;degrees&#32;of&#32;freedom&#32;which&#32;can&#32;be&#32;used&#32;by&#32;the&#32;Optimization&#32;Strategy&#32;to&#32;update&#32;the&#32;Space&#32;Transformation.</emphasis>
69 <emphasis class="comment">&#32;&#32;&#32;*</emphasis>
70 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
71 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;std::vector&lt;double&gt;&#32;<link linkend="class_optimization_algorithm_1a01cc30d556e002bf8cb1128dd932071a">get_big_step_configuration</link>()&#32;=0;
72 
73 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;WriteStepsOut(std::ofstream&#32;&amp;);
74 
75 };
76 
77 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
