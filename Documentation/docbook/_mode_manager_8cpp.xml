<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mode_manager_8cpp">
    <title>ModeManager.cpp File Reference</title>
    <programlisting>#include &lt;math.h&gt;</programlisting>
    <programlisting>#include &lt;stdio.h&gt;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/logstream.h&gt;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &quot;ModeManager.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_mode_manager_8cpp_1af6ac8e18da6e02431cc1b9bbee79d6f6">CODE_HELPERS_MODEMANAGER_CPP_</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Helpers/ModeManager.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*</emphasis>
2 <emphasis class="comment">&#32;*&#32;ModeManager.cpp</emphasis>
3 <emphasis class="comment">&#32;*&#32;\brief&#32;this&#32;class&#32;is&#32;supposed&#32;to&#32;handle&#32;general&#32;modal&#32;computations.&#32;It&#32;can</emphasis>
4 <emphasis class="comment">&#32;*&#32;compute&#32;the&#32;analytic&#32;shape&#32;of&#32;a&#32;mode&#32;for&#32;circular&#32;connectors&#32;as&#32;well&#32;as</emphasis>
5 <emphasis class="comment">&#32;*&#32;loading&#32;data&#32;from&#32;an&#32;input&#32;file&#32;for&#32;rectangular&#32;connectors.&#32;\date&#32;23.03.2017</emphasis>
6 <emphasis class="comment">&#32;*&#32;\author&#32;Pascal&#32;Kraft</emphasis>
7 <emphasis class="comment">&#32;*/</emphasis>
8 
9 <emphasis class="preprocessor">#ifndef&#32;CODE_HELPERS_MODEMANAGER_CPP_</emphasis>
10 <emphasis class="preprocessor">#define&#32;CODE_HELPERS_MODEMANAGER_CPP_</emphasis>
11 
12 <emphasis class="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
16 
17 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/logstream.h&gt;</emphasis>
18 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
19 <emphasis class="preprocessor">#include&#32;&quot;ModeManager.h&quot;</emphasis>
20 
21 ModeManager::ModeManager()&#32;{
22 &#32;&#32;in_prepared&#32;=&#32;<emphasis class="keyword">false</emphasis>;
23 &#32;&#32;out_prepared&#32;=&#32;<emphasis class="keyword">false</emphasis>;
24 }
25 
26 <emphasis class="keywordtype">void</emphasis>&#32;ModeManager::load()&#32;{
27 &#32;&#32;<emphasis class="comment">//&#32;in_circular&#32;=&#32;GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Circle;</emphasis>
28 &#32;&#32;in_circular&#32;=&#32;<emphasis class="keyword">true</emphasis>;
29 
30 &#32;&#32;<emphasis class="comment">//&#32;out_circular&#32;=&#32;GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Circle;</emphasis>
31 &#32;&#32;out_circular&#32;=&#32;<emphasis class="keyword">true</emphasis>;
32 &#32;&#32;v_in&#32;=&#32;2&#32;*&#32;GlobalParams.Phys_V;
33 &#32;&#32;v_out&#32;=&#32;2&#32;*&#32;GlobalParams.Phys_V;
34 &#32;&#32;<emphasis class="keywordflow">return</emphasis>;
35 }
36 
37 <emphasis class="keywordtype">void</emphasis>&#32;ModeManager::prepare_mode_in()&#32;{
38 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(in_circular)&#32;{
39 &#32;&#32;&#32;&#32;u_in&#32;=&#32;get_us(v_in);
40 &#32;&#32;}
41 &#32;&#32;in_prepared&#32;=&#32;<emphasis class="keyword">true</emphasis>;
42 }
43 
44 <emphasis class="keywordtype">void</emphasis>&#32;ModeManager::prepare_mode_out()&#32;{
45 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(out_circular)&#32;{
46 &#32;&#32;&#32;&#32;u_out&#32;=&#32;get_us(v_out);
47 &#32;&#32;}
48 &#32;&#32;out_prepared&#32;=&#32;<emphasis class="keyword">true</emphasis>;
49 }
50 
51 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_input_component(<emphasis class="keywordtype">int</emphasis>&#32;in_component,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::Point&lt;3,&#32;double&gt;&#32;position,
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;mode)&#32;{
54 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!in_prepared)&#32;{
55 &#32;&#32;&#32;&#32;prepare_mode_in();
56 &#32;&#32;}
57 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(in_circular)&#32;{
58 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;std::sqrt(position[0]&#32;*&#32;position[0]&#32;+&#32;position[1]&#32;*&#32;position[1]);
59 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(in_component&#32;==&#32;0)&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(r&#32;&lt;&#32;u_in[mode])&#32;{
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_n(r,&#32;mode)&#32;/&#32;J_n(u_in[mode],&#32;mode);
62 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_n(r,&#32;mode)&#32;/&#32;K_n(u_in[mode],&#32;mode);
64 &#32;&#32;&#32;&#32;&#32;&#32;}
65 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
67 &#32;&#32;&#32;&#32;}
68 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
69 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
70 &#32;&#32;}
71 }
72 
73 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_output_component(<emphasis class="keywordtype">int</emphasis>&#32;in_component,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::Point&lt;3,&#32;double&gt;&#32;position,
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;mode)&#32;{
76 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!out_prepared)&#32;{
77 &#32;&#32;&#32;&#32;prepare_mode_out();
78 &#32;&#32;}
79 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(out_circular)&#32;{
80 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;std::sqrt(position[0]&#32;*&#32;position[0]&#32;+&#32;position[1]&#32;*&#32;position[1]);
81 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(in_component&#32;==&#32;0)&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(r&#32;&lt;&#32;u_out[mode])&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_n(r,&#32;mode)&#32;/&#32;J_n(u_out[mode],&#32;mode);
84 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_n(r,&#32;mode)&#32;/&#32;K_n(u_out[mode],&#32;mode);
86 &#32;&#32;&#32;&#32;&#32;&#32;}
87 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
89 &#32;&#32;&#32;&#32;}
90 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
91 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
92 &#32;&#32;}
93 }
94 
95 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::bessi0(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
96 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;1.0e0;
97 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;3.5156229e0;
98 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;3.0899424e0;
99 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;1.2067492e0;
100 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;0.2659732e0;
101 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;0.360768e-1;
102 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;0.45813e-2;
103 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;0.39894228e0;
104 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;0.1328592e-1;
105 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;0.225319e-2;
106 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;-0.157565e-2;
107 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;0.916281e-2;
108 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;-0.2057706e-1;
109 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;0.2635537e-1;
110 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q8&#32;=&#32;-0.1647633e-1;
111 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q9&#32;=&#32;0.392377e-2;
112 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(abs(x)&#32;&lt;&#32;3.75)&#32;{
113 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;(x&#32;/&#32;3.75)&#32;*&#32;(x&#32;/&#32;3.75);
114 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p1&#32;+&#32;y&#32;*&#32;(p2&#32;+&#32;y&#32;*&#32;(p3&#32;+&#32;y&#32;*&#32;(p4&#32;+&#32;y&#32;*&#32;(p5&#32;+&#32;y&#32;*&#32;(p6&#32;+&#32;y&#32;*&#32;p7)))));
115 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
116 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
117 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;3.75&#32;/&#32;ax;
118 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(std::exp(ax)&#32;/&#32;std::sqrt(ax))&#32;*
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(q1&#32;+
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q2&#32;+
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q3&#32;+
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q4&#32;+
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q5&#32;+
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q6&#32;+&#32;y&#32;*&#32;(q7&#32;+&#32;y&#32;*&#32;(q8&#32;+&#32;y&#32;*&#32;q9))))))));
125 &#32;&#32;}
126 }
127 
128 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::bessi1(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
129 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;0.5e0;
130 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;0.87890594e0;
131 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;0.51498869e0;
132 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;0.15084934e0;
133 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;0.2658733e-1;
134 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;0.301532e-2;
135 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;0.32411e-3;
136 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;0.39894228e0;
137 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;-0.3988024e-1;
138 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;-0.362018e-2;
139 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;0.163801e-2;
140 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;-0.1031555e-1;
141 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;0.2282967e-1;
142 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;-0.2895312e-1;
143 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q8&#32;=&#32;0.1787654e-1;
144 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q9&#32;=&#32;-0.420059e-2;
145 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(x)&#32;&lt;&#32;3.75)&#32;{
146 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;(x&#32;/&#32;3.75)&#32;*&#32;(x&#32;/&#32;3.75);
147 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;x&#32;*
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p1&#32;+&#32;y&#32;*&#32;(p2&#32;+&#32;y&#32;*&#32;(p3&#32;+&#32;y&#32;*&#32;(p4&#32;+&#32;y&#32;*&#32;(p5&#32;+&#32;y&#32;*&#32;(p6&#32;+&#32;y&#32;*&#32;p7))))));
149 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
150 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
151 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;3.75&#32;/&#32;ax;
152 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ret&#32;=
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::exp(ax)&#32;/&#32;std::sqrt(ax))&#32;*
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(q1&#32;+
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q2&#32;+
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q3&#32;+
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q4&#32;+
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(q5&#32;+&#32;y&#32;*&#32;(q6&#32;+&#32;y&#32;*&#32;(q7&#32;+&#32;y&#32;*&#32;(q8&#32;+&#32;y&#32;*&#32;q9))))))));
159 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;0)&#32;ret&#32;*=&#32;-1.0;
160 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
161 &#32;&#32;}
162 }
163 
164 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::J_0(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
165 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;1.e0;
166 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;-.1098628627E-2;
167 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;.2734510407e-4;
168 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;-.2073370639e-5;
169 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;.2093887211e-6;
170 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;-.1562499995e-1;
171 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;.1430488765e-3;
172 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;-.6911147651e-5;
173 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;.7621095161e-6;
174 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;-.934945152e-7;
175 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r1&#32;=&#32;57568490574.e0;
176 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r2&#32;=&#32;-13362590354.e0;
177 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r3&#32;=&#32;651619640.7e0;
178 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r4&#32;=&#32;-11214424.18e0;
179 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r5&#32;=&#32;77392.33017e0;
180 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r6&#32;=&#32;-184.9052456e0;
181 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s1&#32;=&#32;57568490411.e0;
182 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s2&#32;=&#32;1029532985.e0;
183 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s3&#32;=&#32;9494680.718e0;
184 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s4&#32;=&#32;59272.64853e0;
185 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s5&#32;=&#32;267.8532712e0;
186 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s6&#32;=&#32;1.e0;
187 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(x)&#32;&lt;&#32;8)&#32;{
188 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x&#32;*&#32;x;
189 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(r1&#32;+&#32;y&#32;*&#32;(r2&#32;+&#32;y&#32;*&#32;(r3&#32;+&#32;y&#32;*&#32;(r4&#32;+&#32;y&#32;*&#32;(r5&#32;+&#32;y&#32;*&#32;r6)))))&#32;/
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(s1&#32;+&#32;y&#32;*&#32;(s2&#32;+&#32;y&#32;*&#32;(s3&#32;+&#32;y&#32;*&#32;(s4&#32;+&#32;y&#32;*&#32;(s5&#32;+&#32;y&#32;*&#32;s6)))));
191 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
192 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
193 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z&#32;=&#32;8.0&#32;/&#32;ax;
194 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;z&#32;*&#32;z;
195 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;xx&#32;=&#32;ax&#32;-&#32;.785398164;
196 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;std::sqrt(.636619772&#32;/&#32;ax)&#32;*
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::cos(xx)&#32;*&#32;(p1&#32;+&#32;y&#32;*&#32;(p2&#32;+&#32;y&#32;*&#32;(p3&#32;+&#32;y&#32;*&#32;(p4&#32;+&#32;y&#32;*&#32;p5))))&#32;-
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z&#32;*&#32;std::sin(xx)&#32;*&#32;(q1&#32;+&#32;y&#32;*&#32;(q2&#32;+&#32;y&#32;*&#32;(q3&#32;+&#32;y&#32;*&#32;(q4&#32;+&#32;y&#32;*&#32;q5)))));
199 &#32;&#32;}
200 }
201 
202 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::J_1(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
203 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r1&#32;=&#32;72362614232.e0;
204 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r2&#32;=&#32;-7895059235.e0;
205 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r3&#32;=&#32;242396853.1e0;
206 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r4&#32;=&#32;-2972611.439e0;
207 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r5&#32;=&#32;15704.48260e0;
208 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r6&#32;=&#32;-30.16036606e0;
209 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;.04687499995e0;
210 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;-.2002690873e-3;
211 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;.8449199096e-5;
212 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;-.88228987e-6;
213 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;.105787412e-6;
214 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;1.e0;
215 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;.183105e-2;
216 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;-.3516396496e-4;
217 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;.2457520174e-5;
218 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;-.240337019e-6;
219 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s1&#32;=&#32;144725228442.e0;
220 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s2&#32;=&#32;2300535178.e0;
221 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s3&#32;=&#32;18583304.74e0;
222 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s4&#32;=&#32;99447.43394e0;
223 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s5&#32;=&#32;376.9991397e0;
224 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s6&#32;=&#32;1.e0;
225 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(x)&#32;&lt;&#32;8)&#32;{
226 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x&#32;*&#32;x;
227 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;x&#32;*&#32;(r1&#32;+&#32;y&#32;*&#32;(r2&#32;+&#32;y&#32;*&#32;(r3&#32;+&#32;y&#32;*&#32;(r4&#32;+&#32;y&#32;*&#32;(r5&#32;+&#32;y&#32;*&#32;r6)))))&#32;/
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(s1&#32;+&#32;y&#32;*&#32;(s2&#32;+&#32;y&#32;*&#32;(s3&#32;+&#32;y&#32;*&#32;(s4&#32;+&#32;y&#32;*&#32;(s5&#32;+&#32;y&#32;*&#32;s6)))));
229 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
230 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
231 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z&#32;=&#32;8.0&#32;/&#32;ax;
232 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;z&#32;*&#32;z;
233 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;xx&#32;=&#32;ax&#32;-&#32;2.356194491;
234 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;std::sqrt(.636619772&#32;/&#32;ax)&#32;*
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::cos(xx)&#32;*&#32;(p1&#32;+&#32;y&#32;*&#32;(p2&#32;+&#32;y&#32;*&#32;(p3&#32;+&#32;y&#32;*&#32;(p4&#32;+&#32;y&#32;*&#32;p5))))&#32;-
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z&#32;*&#32;std::sin(xx)&#32;*&#32;(q1&#32;+&#32;y&#32;*&#32;(q2&#32;+&#32;y&#32;*&#32;(q3&#32;+&#32;y&#32;*&#32;(q4&#32;+&#32;y&#32;*&#32;q5)))))&#32;*
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::copysign(1.,&#32;x);
238 &#32;&#32;}
239 }
240 
241 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::K_0(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
242 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;-0.57721566e0;
243 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;0.42278420e0;
244 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;0.23069756e0;
245 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;0.3488590e-1;
246 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;0.262698e-2;
247 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;0.10750e-3;
248 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;0.74e-5;
249 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;1.25331414e0;
250 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;-0.7832358e-1;
251 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;0.2189568e-1;
252 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;-0.1062446e-1;
253 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;0.587872e-2;
254 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;-0.251540e-2;
255 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;0.53208e-3;
256 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;2.0)&#32;{
257 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x&#32;*&#32;x&#32;/&#32;4.0;
258 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(-log(x&#32;/&#32;2.0)&#32;*&#32;bessi0(x))&#32;+
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p1&#32;+&#32;y&#32;*&#32;(p2&#32;+&#32;y&#32;*&#32;(p3&#32;+&#32;y&#32;*&#32;(p4&#32;+&#32;y&#32;*&#32;(p5&#32;+&#32;y&#32;*&#32;(p6&#32;+&#32;y&#32;*&#32;p7))))));
260 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
261 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;2.0&#32;/&#32;x;
262 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(exp(-x)&#32;/&#32;sqrt(x))&#32;*
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(q1&#32;+&#32;y&#32;*&#32;(q2&#32;+&#32;y&#32;*&#32;(q3&#32;+&#32;y&#32;*&#32;(q4&#32;+&#32;y&#32;*&#32;(q5&#32;+&#32;y&#32;*&#32;(q6&#32;+&#32;y&#32;*&#32;q7))))));
264 &#32;&#32;}
265 }
266 
267 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::K_1(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
268 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;1.0e0;
269 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;0.15443144e0;
270 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;-0.67278579e0;
271 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;-0.18156897e0;
272 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;-0.1919402e-1;
273 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;-0.110404e-2;
274 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;-0.4686e-4;
275 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;1.25331414e0;
276 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;0.23498619e0;
277 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;-0.3655620e-1;
278 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;0.1504268e-1;
279 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;-0.780353e-2;
280 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;0.325614e-2;
281 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;-0.68245e-3;
282 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;2.0)&#32;{
283 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x&#32;*&#32;x&#32;/&#32;4.0;
284 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(log(x&#32;/&#32;2.0)&#32;*&#32;bessi1(x))&#32;+
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1.0&#32;/&#32;x)&#32;*
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p1&#32;+
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y&#32;*&#32;(p2&#32;+&#32;y&#32;*&#32;(p3&#32;+&#32;y&#32;*&#32;(p4&#32;+&#32;y&#32;*&#32;(p5&#32;+&#32;y&#32;*&#32;(p6&#32;+&#32;y&#32;*&#32;p7))))));
288 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
289 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;2.0&#32;/&#32;x;
290 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(exp(-x)&#32;/&#32;sqrt(x))&#32;*
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(q1&#32;+&#32;y&#32;*&#32;(q2&#32;+&#32;y&#32;*&#32;(q3&#32;+&#32;y&#32;*&#32;(q4&#32;+&#32;y&#32;*&#32;(q5&#32;+&#32;y&#32;*&#32;(q6&#32;+&#32;y&#32;*&#32;q7))))));
292 &#32;&#32;}
293 }
294 
295 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::K_n(<emphasis class="keywordtype">double</emphasis>&#32;x,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n)&#32;{
296 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;tox&#32;=&#32;2.0&#32;/&#32;x;
297 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bkp;
298 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bkm&#32;=&#32;K_0(x);
299 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bk&#32;=&#32;K_1(x);
300 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(n&#32;==&#32;0)&#32;{
301 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_0(x);
302 &#32;&#32;}
303 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(n&#32;==&#32;1)&#32;{
304 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_1(x);
305 &#32;&#32;}
306 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;1;&#32;j&#32;&lt;&#32;n;&#32;j++)&#32;{
307 &#32;&#32;&#32;&#32;bkp&#32;=&#32;bkm&#32;+&#32;j&#32;*&#32;tox&#32;*&#32;bk;
308 &#32;&#32;&#32;&#32;bkm&#32;=&#32;bk;
309 &#32;&#32;&#32;&#32;bk&#32;=&#32;bkp;
310 &#32;&#32;}
311 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;bk;
312 }
313 
314 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::J_n(<emphasis class="keywordtype">double</emphasis>&#32;x,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n)&#32;{
315 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bessj&#32;=&#32;0;
316 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;IACC&#32;=&#32;40;
317 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;BIGN0&#32;=&#32;1.e10;
318 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;BIGNI&#32;=&#32;1.e-10;
319 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(n&#32;==&#32;0)&#32;{
320 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_0(x);
321 &#32;&#32;}
322 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(n&#32;==&#32;1)&#32;{
323 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_1(x);
324 &#32;&#32;}
325 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
326 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ax&#32;==&#32;0)&#32;{
327 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
328 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
329 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ax&#32;&gt;&#32;(<emphasis class="keywordtype">float</emphasis>)n)&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;tox&#32;=&#32;2.0&#32;/&#32;ax;
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjm&#32;=&#32;J_0(ax);
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bj&#32;=&#32;J_1(ax);
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;1;&#32;j&#32;&lt;&#32;n;&#32;j++)&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjp&#32;=&#32;j&#32;*&#32;tox&#32;*&#32;bj&#32;-&#32;bjm;
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bjm&#32;=&#32;bj;
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bj&#32;=&#32;bjp;
337 &#32;&#32;&#32;&#32;&#32;&#32;}
338 &#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;=&#32;bj;
339 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;tox&#32;=&#32;2.0&#32;/&#32;ax;
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;m&#32;=&#32;2&#32;*&#32;((n&#32;+&#32;(int)std::sqrt((<emphasis class="keywordtype">float</emphasis>)IACC&#32;*&#32;n))&#32;/&#32;2);
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bessj&#32;=&#32;0;
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;jsum&#32;=&#32;0;
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sum&#32;=&#32;0.0;
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjp&#32;=&#32;0.0;
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bj&#32;=&#32;1.0;
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;m;&#32;j&#32;&gt;&#32;1;&#32;j--)&#32;{
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjm&#32;=&#32;j&#32;*&#32;tox&#32;*&#32;bj&#32;-&#32;bjp;
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bjp&#32;=&#32;bj;
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bj&#32;=&#32;bjm;
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(bj)&#32;&gt;&#32;BIGN0)&#32;{
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bj&#32;=&#32;bj&#32;*&#32;BIGNI;
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bjp&#32;=&#32;bjp&#32;*&#32;BIGNI;
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;=&#32;bessj&#32;*&#32;BIGNI;
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;sum&#32;*&#32;BIGNI;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(jsum&#32;!=&#32;0)&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;sum&#32;+&#32;bj;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jsum&#32;=&#32;1&#32;-&#32;jsum;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(j&#32;==&#32;n)&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;=&#32;bjp;
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
364 &#32;&#32;&#32;&#32;&#32;&#32;}
365 &#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;2.0&#32;*&#32;sum&#32;-&#32;bj;
366 &#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;/=&#32;sum;
367 &#32;&#32;&#32;&#32;}
368 &#32;&#32;}
369 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;0&#32;&amp;&amp;&#32;n&#32;%&#32;2&#32;==&#32;1)&#32;{
370 &#32;&#32;&#32;&#32;bessj&#32;=&#32;-bessj;
371 &#32;&#32;}
372 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;bessj;
373 }
374 
375 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_rhs(<emphasis class="keywordtype">double</emphasis>&#32;u,&#32;<emphasis class="keywordtype">double</emphasis>&#32;v)&#32;{
376 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;p&#32;=&#32;std::sqrt(v&#32;*&#32;v&#32;-&#32;u&#32;*&#32;u);
377 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p&#32;*&#32;K_0(p)&#32;/&#32;K_1(p);
378 }
379 
380 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_lhs(<emphasis class="keywordtype">double</emphasis>&#32;u)&#32;{&#32;<emphasis class="keywordflow">return</emphasis>&#32;-u&#32;*&#32;J_0(u)&#32;/&#32;J_1(u);&#32;}
381 
382 std::vector&lt;double&gt;&#32;ModeManager::get_us(<emphasis class="keywordtype">double</emphasis>&#32;v)&#32;{
383 &#32;&#32;std::vector&lt;double&gt;&#32;locations;
384 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;last_smaller&#32;=&#32;<emphasis class="keyword">false</emphasis>;
385 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;lhs,&#32;rhs;
386 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u&#32;=&#32;0.1;
387 &#32;&#32;lhs&#32;=&#32;get_lhs(u);
388 &#32;&#32;rhs&#32;=&#32;get_rhs(u,&#32;v);
389 &#32;&#32;last_smaller&#32;=&#32;lhs&#32;&lt;&#32;rhs;
390 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(u&#32;=&#32;0.2;&#32;u&#32;&lt;&#32;v;&#32;u&#32;+=&#32;0.1)&#32;{
391 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_lhs&#32;=&#32;get_lhs(u);
392 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_rhs&#32;=&#32;get_rhs(u,&#32;v);
393 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;new_smaller&#32;=&#32;n_lhs&#32;&lt;&#32;n_rhs;
394 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(new_smaller&#32;!=&#32;last_smaller)&#32;{
395 &#32;&#32;&#32;&#32;&#32;&#32;locations.push_back(u);
396 &#32;&#32;&#32;&#32;}
397 &#32;&#32;&#32;&#32;last_smaller&#32;=&#32;new_smaller;
398 &#32;&#32;&#32;&#32;lhs&#32;=&#32;n_lhs;
399 &#32;&#32;&#32;&#32;rhs&#32;=&#32;n_rhs;
400 &#32;&#32;}
401 
402 &#32;&#32;std::vector&lt;double&gt;&#32;us;
403 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locations.size();&#32;i++)&#32;{
404 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_left&#32;=&#32;locations[i]&#32;-&#32;0.1;
405 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_right&#32;=&#32;locations[i];
406 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_lhs&#32;=&#32;get_lhs(u_left);
407 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_rhs&#32;=&#32;get_rhs(u_left,&#32;v);
408 
409 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;j&#32;=&#32;0;
410 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(j&#32;&lt;&#32;10)&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_lhs&#32;=&#32;get_lhs((u_left&#32;+&#32;u_right)&#32;/&#32;2.0);
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_rhs&#32;=&#32;get_rhs((u_left&#32;+&#32;u_right)&#32;/&#32;2.0,&#32;v);
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((update_lhs&#32;-&#32;update_rhs)&#32;*&#32;(l_lhs&#32;-&#32;l_rhs)&#32;&lt;&#32;0)&#32;{
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_right&#32;=&#32;(u_left&#32;+&#32;u_right)&#32;/&#32;2.0;
415 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_left&#32;=&#32;(u_left&#32;+&#32;u_right)&#32;/&#32;2.0;
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_lhs&#32;=&#32;update_lhs;
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_rhs&#32;=&#32;update_rhs;
419 &#32;&#32;&#32;&#32;&#32;&#32;}
420 &#32;&#32;&#32;&#32;&#32;&#32;j++;
421 &#32;&#32;&#32;&#32;}
422 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(l_lhs&#32;-&#32;l_rhs)&#32;&lt;&#32;1)&#32;{
423 &#32;&#32;&#32;&#32;&#32;&#32;us.push_back((u_left&#32;+&#32;u_right)&#32;/&#32;2.0);
424 &#32;&#32;&#32;&#32;}
425 &#32;&#32;}
426 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;us.size();&#32;i++)&#32;{
427 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;u_&quot;</emphasis>&#32;&lt;&lt;&#32;i&#32;+&#32;1&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;us[i]&#32;&lt;&lt;&#32;std::endl;
428 &#32;&#32;}
429 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;us;
430 }
431 
432 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_u0(<emphasis class="keywordtype">double</emphasis>&#32;v)&#32;{
433 &#32;&#32;std::vector&lt;double&gt;&#32;locations;
434 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;last_smaller&#32;=&#32;<emphasis class="keyword">false</emphasis>;
435 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;lhs,&#32;rhs;
436 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u&#32;=&#32;0.1;
437 &#32;&#32;lhs&#32;=&#32;get_lhs(u);
438 &#32;&#32;rhs&#32;=&#32;get_rhs(u,&#32;v);
439 &#32;&#32;last_smaller&#32;=&#32;lhs&#32;&lt;&#32;rhs;
440 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(u&#32;=&#32;0.2;&#32;u&#32;&lt;&#32;v;&#32;u&#32;+=&#32;0.1)&#32;{
441 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_lhs&#32;=&#32;get_lhs(u);
442 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_rhs&#32;=&#32;get_rhs(u,&#32;v);
443 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;new_smaller&#32;=&#32;n_lhs&#32;&lt;&#32;n_rhs;
444 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(new_smaller&#32;!=&#32;last_smaller)&#32;{
445 &#32;&#32;&#32;&#32;&#32;&#32;locations.push_back(u);
446 &#32;&#32;&#32;&#32;}
447 &#32;&#32;&#32;&#32;last_smaller&#32;=&#32;new_smaller;
448 &#32;&#32;&#32;&#32;lhs&#32;=&#32;n_lhs;
449 &#32;&#32;&#32;&#32;rhs&#32;=&#32;n_rhs;
450 &#32;&#32;}
451 
452 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locations.size();&#32;i++)&#32;{
453 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;sign&#32;change&#32;near&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;locations[i]&#32;&lt;&lt;&#32;std::endl;
454 &#32;&#32;}
455 
456 &#32;&#32;std::vector&lt;double&gt;&#32;us;
457 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locations.size();&#32;i++)&#32;{
458 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_left&#32;=&#32;locations[i]&#32;-&#32;0.1;
459 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_right&#32;=&#32;locations[i];
460 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_lhs&#32;=&#32;get_lhs(u_left);
461 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_rhs&#32;=&#32;get_rhs(u_left,&#32;v);
462 
463 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;j&#32;=&#32;0;
464 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(j&#32;&lt;&#32;10)&#32;{
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_lhs&#32;=&#32;get_lhs((u_left&#32;+&#32;u_right)&#32;/&#32;2.0);
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_rhs&#32;=&#32;get_rhs((u_left&#32;+&#32;u_right)&#32;/&#32;2.0,&#32;v);
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((update_lhs&#32;-&#32;update_rhs)&#32;*&#32;(l_lhs&#32;-&#32;l_rhs)&#32;&lt;&#32;0)&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_right&#32;=&#32;(u_left&#32;+&#32;u_right)&#32;/&#32;2.0;
469 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_left&#32;=&#32;(u_left&#32;+&#32;u_right)&#32;/&#32;2.0;
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_lhs&#32;=&#32;update_lhs;
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_rhs&#32;=&#32;update_rhs;
473 &#32;&#32;&#32;&#32;&#32;&#32;}
474 &#32;&#32;&#32;&#32;&#32;&#32;j++;
475 &#32;&#32;&#32;&#32;}
476 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(l_lhs&#32;-&#32;l_rhs)&#32;&lt;&#32;1)&#32;{
477 &#32;&#32;&#32;&#32;&#32;&#32;us.push_back((u_left&#32;+&#32;u_right)&#32;/&#32;2.0);
478 &#32;&#32;&#32;&#32;}
479 &#32;&#32;}
480 
481 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;us.size();&#32;i++)&#32;{
482 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;intersection&#32;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;us[i]&#32;&lt;&lt;&#32;std::endl;
483 &#32;&#32;}
484 
485 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(us.size()&#32;&gt;&#32;0)&#32;{
486 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;us[0];
487 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
488 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1;
489 &#32;&#32;}
490 }
491 
492 <emphasis class="preprocessor">#endif&#32;</emphasis><emphasis class="comment">/*&#32;CODE_HELPERS_MODEMANAGER_CPP_&#32;*/</emphasis><emphasis class="preprocessor"></emphasis>
    </computeroutput></literallayout>
</section>
