<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mode_manager_8cpp">
    <title>ModeManager.cpp File Reference</title>
    <programlisting>#include &lt;stdio.h&gt;</programlisting>
    <programlisting>#include &lt;math.h&gt;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &quot;ModeManager.h&quot;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/logstream.h&gt;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_mode_manager_8cpp_1af6ac8e18da6e02431cc1b9bbee79d6f6">CODE_HELPERS_MODEMANAGER_CPP_</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Helpers/ModeManager.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*</emphasis>
2 <emphasis class="comment">&#32;*&#32;ModeManager.cpp</emphasis>
3 <emphasis class="comment">&#32;*&#32;\brief&#32;this&#32;class&#32;is&#32;supposed&#32;to&#32;handle&#32;general&#32;modal&#32;computations.&#32;It&#32;can&#32;compute&#32;the&#32;analytic&#32;shape&#32;of&#32;a&#32;mode&#32;for&#32;circular&#32;connectors&#32;as&#32;well&#32;as&#32;loading&#32;data&#32;from&#32;an&#32;input&#32;file&#32;for&#32;rectangular&#32;connectors.</emphasis>
4 <emphasis class="comment">&#32;*&#32;\date&#32;23.03.2017</emphasis>
5 <emphasis class="comment">&#32;*&#32;\author&#32;Pascal&#32;Kraft</emphasis>
6 <emphasis class="comment">&#32;*/</emphasis>
7 
8 <emphasis class="preprocessor">#ifndef&#32;CODE_HELPERS_MODEMANAGER_CPP_</emphasis>
9 <emphasis class="preprocessor">#define&#32;CODE_HELPERS_MODEMANAGER_CPP_</emphasis>
10 
11 <emphasis class="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
15 
16 <emphasis class="preprocessor">#include&#32;&quot;ModeManager.h&quot;</emphasis>
17 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
18 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/logstream.h&gt;</emphasis>
19 
20 ModeManager::ModeManager(){
21 &#32;&#32;&#32;&#32;in_prepared&#32;=&#32;<emphasis class="keyword">false</emphasis>;
22 &#32;&#32;&#32;&#32;out_prepared&#32;=&#32;<emphasis class="keyword">false</emphasis>;
23 }
24 
25 <emphasis class="keywordtype">void</emphasis>&#32;ModeManager::load()&#32;{
26 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;in_circular&#32;=&#32;GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Circle;</emphasis>
27 &#32;&#32;&#32;&#32;in_circular&#32;=&#32;<emphasis class="keyword">true</emphasis>;
28 
29 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;out_circular&#32;=&#32;GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Circle;</emphasis>
30 &#32;&#32;&#32;&#32;out_circular&#32;=&#32;<emphasis class="keyword">true</emphasis>;
31 &#32;&#32;&#32;&#32;v_in&#32;=&#32;&#32;2*&#32;GlobalParams.Phys_V;
32 &#32;&#32;&#32;&#32;v_out&#32;=&#32;2*&#32;GlobalParams.Phys_V;
33 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
34 }
35 
36 <emphasis class="keywordtype">void</emphasis>&#32;ModeManager::prepare_mode_in()&#32;{
37 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(in_circular)&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_in&#32;=&#32;get_us(v_in);
39 &#32;&#32;&#32;&#32;}
40 &#32;&#32;&#32;&#32;in_prepared&#32;=&#32;<emphasis class="keyword">true</emphasis>;
41 }
42 
43 <emphasis class="keywordtype">void</emphasis>&#32;ModeManager::prepare_mode_out()&#32;{
44 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(out_circular)&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_out&#32;=&#32;get_us(v_out);
46 &#32;&#32;&#32;&#32;}
47 &#32;&#32;&#32;&#32;out_prepared&#32;=&#32;<emphasis class="keyword">true</emphasis>;
48 }
49 
50 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_input_component(<emphasis class="keywordtype">int</emphasis>&#32;in_component,&#32;dealii::Point&lt;3,&#32;double&gt;&#32;position,&#32;<emphasis class="keywordtype">int</emphasis>&#32;mode){
51 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(!in_prepared)&#32;{
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prepare_mode_in();
53 &#32;&#32;&#32;&#32;}
54 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(in_circular){
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;std::sqrt(position[0]*position[0]&#32;+&#32;position[1]*position[1]);
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(in_component&#32;==&#32;0)&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(r&#32;&lt;&#32;u_in[mode])&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_n(r,mode)&#32;/&#32;J_n(u_in[mode],mode);
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_n(r,mode)&#32;/&#32;K_n(u_in[mode],mode);
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
65 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
67 &#32;&#32;&#32;&#32;}
68 }
69 
70 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_output_component(<emphasis class="keywordtype">int</emphasis>&#32;in_component,&#32;dealii::Point&lt;3,&#32;double&gt;&#32;position,&#32;<emphasis class="keywordtype">int</emphasis>&#32;mode){
71 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(!out_prepared)&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prepare_mode_out();
73 &#32;&#32;&#32;&#32;}
74 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(out_circular){
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;std::sqrt(position[0]*position[0]&#32;+&#32;position[1]*position[1]);
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(in_component&#32;==&#32;0)&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(r&#32;&lt;&#32;u_out[mode])&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_n(r,mode)&#32;/&#32;J_n(u_out[mode],mode);
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_n(r,mode)&#32;/&#32;K_n(u_out[mode],mode);
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
85 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
87 &#32;&#32;&#32;&#32;}
88 }
89 
90 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::bessi0&#32;(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
91 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;1.0e0;
92 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;3.5156229e0;
93 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;3.0899424e0;
94 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;1.2067492e0;
95 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;&#32;0.2659732e0;
96 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;0.360768e-1;
97 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;0.45813e-2;
98 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;0.39894228e0;
99 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;0.1328592e-1;
100 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;0.225319e-2;
101 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;-0.157565e-2;
102 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;0.916281e-2;
103 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;-0.2057706e-1;
104 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;0.2635537e-1;
105 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q8&#32;=&#32;-0.1647633e-1;
106 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q9&#32;=&#32;0.392377e-2;
107 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(abs(x)&#32;&lt;&#32;3.75)&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;(x&#32;/&#32;3.75)*(x&#32;/&#32;3.75);
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p1+y*(p2+y*(p3+y*(p4+y*(p5+y*(p6+y*p7)))));
110 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;3.75/ax;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(std::exp(ax)/std::sqrt(ax))*(q1+y*(q2+y*(q3+y*(q4+y*(q5+y*(q6+y*(q7+y*(q8+y*q9))))))));
114 &#32;&#32;&#32;&#32;}
115 }
116 
117 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::bessi1&#32;(<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
118 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;0.5e0&#32;;
119 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;0.87890594e0;
120 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;0.51498869e0;
121 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;&#32;0.15084934e0;
122 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;0.2658733e-1;
123 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;0.301532e-2;
124 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;0.32411e-3;
125 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;0.39894228e0;
126 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;-0.3988024e-1;
127 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;&#32;-0.362018e-2;
128 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;0.163801e-2;
129 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;-0.1031555e-1;
130 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;0.2282967e-1;
131 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;-0.2895312e-1;
132 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q8&#32;=&#32;0.1787654e-1;
133 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q9&#32;=&#32;-0.420059e-2;
134 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(std::abs(x)&#32;&lt;&#32;3.75)&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;(x/3.75)*(x/3.75);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;x*(p1+y*(p2+y*(p3+y*(p4+y*(p5+y*(p6+y*p7))))));
137 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;3.75/ax;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ret&#32;=&#32;(std::exp(ax)/std::sqrt(ax))*(q1+y*(q2+y*(q3+y*(q4+y*(q5+y*(q6+y*(q7+y*(q8+y*q9))))))));
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(x&lt;0)&#32;ret&#32;*=&#32;-1.0;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
143 &#32;&#32;&#32;&#32;}
144 }
145 
146 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::J_0(&#32;<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
147 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;&#32;1.e0;
148 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;-.1098628627E-2;
149 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;&#32;.2734510407e-4;
150 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;-.2073370639e-5;
151 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;&#32;.2093887211e-6;
152 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;-.1562499995e-1;
153 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;&#32;.1430488765e-3;
154 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;-.6911147651e-5;
155 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;&#32;.7621095161e-6;
156 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;-.934945152e-7;
157 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r1&#32;=&#32;&#32;57568490574.e0;
158 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r2&#32;=&#32;-13362590354.e0;
159 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r3&#32;=&#32;&#32;651619640.7e0;
160 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r4&#32;=&#32;-11214424.18e0;
161 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r5&#32;=&#32;&#32;77392.33017e0;
162 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r6&#32;=&#32;-184.9052456e0;
163 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s1&#32;=&#32;&#32;57568490411.e0;
164 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s2&#32;=&#32;&#32;1029532985.e0;
165 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s3&#32;=&#32;&#32;9494680.718e0;
166 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s4&#32;=&#32;&#32;59272.64853e0;
167 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s5&#32;=&#32;&#32;267.8532712e0;
168 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s6&#32;=&#32;&#32;1.e0;
169 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(std::abs(x)&#32;&lt;&#32;8)&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x*x;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(r1+y*(r2+y*(r3+y*(r4+y*(r5+y*r6)))))&#32;/(s1+y*(s2+y*(s3+y*(s4+y*(s5+y*s6)))));
172 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z&#32;=&#32;8.0&#32;/&#32;ax;
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;z*z;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;xx&#32;=&#32;ax&#32;-.785398164;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;std::sqrt(.636619772/ax)*(std::cos(xx)*(p1+y*(p2+y*(p3+y*(p4+y&#32;*p5))))-z*std::sin(xx)*(q1+y*(q2+y*(q3+y*(q4+y*q5)))));
178 &#32;&#32;&#32;&#32;}
179 }
180 
181 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::J_1(&#32;<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
182 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r1&#32;=&#32;&#32;72362614232.e0;
183 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r2&#32;=&#32;-7895059235.e0&#32;;
184 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r3&#32;=&#32;&#32;242396853.1e0&#32;;
185 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r4&#32;=&#32;-2972611.439e0;
186 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r5&#32;=&#32;&#32;15704.48260e0;
187 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;r6&#32;=&#32;-30.16036606e0;
188 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;&#32;.04687499995e0;
189 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;-.2002690873e-3;
190 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;&#32;.8449199096e-5;
191 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;-.88228987e-6;
192 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;&#32;.105787412e-6&#32;;
193 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;&#32;1.e0;
194 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;&#32;.183105e-2;
195 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;-.3516396496e-4;
196 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;&#32;.2457520174e-5;
197 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;-.240337019e-6;
198 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s1&#32;=&#32;&#32;144725228442.e0&#32;;
199 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s2&#32;=&#32;&#32;2300535178.e0;
200 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s3&#32;=&#32;&#32;18583304.74e0;
201 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s4&#32;=&#32;&#32;99447.43394e0;
202 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s5&#32;=&#32;&#32;376.9991397e0;
203 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;s6&#32;=&#32;&#32;1.e0;
204 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(std::abs(x)&#32;&lt;&#32;8&#32;)&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x*x;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;x*(r1+y*(r2+y*(r3+y*(r4+y*(r5+y*r6)))))&#32;/(s1+y*(s2+y*(s3+y*(s4+y*(s5+y*s6)))));
207 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z&#32;=&#32;8.0/ax;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;z*z;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;xx&#32;=&#32;ax&#32;-2.356194491;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;std::sqrt(.636619772/ax)*(std::cos(xx)*(p1+y*(p2+y*(p3+y*(p4+y*p5))))-z*std::sin(xx)*(q1+y*(q2+y*(q3+y*(q4+y*q5)))))*std::copysign(1.,x);
213 &#32;&#32;&#32;&#32;}
214 }
215 
216 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::K_0(&#32;<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
217 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;-0.57721566e0&#32;;
218 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;&#32;0.42278420e0&#32;;
219 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;&#32;0.23069756e0;
220 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;&#32;0.3488590e-1;
221 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;&#32;0.262698e-2;
222 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;&#32;0.10750e-3;
223 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;&#32;0.74e-5&#32;;
224 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;&#32;1.25331414e0&#32;;
225 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;-0.7832358e-1;
226 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;&#32;0.2189568e-1;
227 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;-0.1062446e-1;
228 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;&#32;0.587872e-2;
229 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;-0.251540e-2;
230 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;&#32;0.53208e-3&#32;;
231 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;x&#32;&lt;&#32;2.0)&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x*x/4.0;
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(-log(x/2.0)*bessi0(x))+(p1+y*(p2+y*(p3+y*(p4+y*(p5+y*(p6+y*p7))))));
234 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;2.0/x;
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(exp(-x)/sqrt(x))*(q1+y*(q2+y*(q3+y*(q4+y*(q5+y*(q6+y*q7))))));
237 &#32;&#32;&#32;&#32;}
238 }
239 
240 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::K_1(&#32;<emphasis class="keywordtype">double</emphasis>&#32;x)&#32;{
241 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1&#32;=&#32;&#32;1.0e0&#32;;
242 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p2&#32;=&#32;&#32;0.15443144e0;
243 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p3&#32;=&#32;-0.67278579e0;
244 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p4&#32;=&#32;-0.18156897e0;
245 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p5&#32;=&#32;-0.1919402e-1;
246 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p6&#32;=&#32;-0.110404e-2;
247 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;p7&#32;=&#32;-0.4686e-4;
248 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q1&#32;=&#32;&#32;1.25331414e0&#32;;
249 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q2&#32;=&#32;&#32;0.23498619e0;
250 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q3&#32;=&#32;-0.3655620e-1;
251 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q4&#32;=&#32;&#32;0.1504268e-1;
252 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q5&#32;=&#32;-0.780353e-2;
253 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q6&#32;=&#32;&#32;0.325614e-2;
254 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keyword">static</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;q7&#32;=&#32;-0.68245e-3;
255 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(x&#32;&lt;&#32;2.0)&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;x*x/4.0;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(log(x/2.0)*bessi1(x))+(1.0/x)*(p1+y*(p2+y*(p3+y*(p4+y*(p5+y*(p6+y*p7))))));
258 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y&#32;=&#32;2.0&#32;/&#32;x;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(exp(-x)/sqrt(x))*(q1+y*(q2+y*(q3+y*(q4+y*(q5+y*(q6+y*q7))))));
261 &#32;&#32;&#32;&#32;}
262 }
263 
264 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::K_n(&#32;<emphasis class="keywordtype">double</emphasis>&#32;x,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n)&#32;{
265 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;tox&#32;=&#32;2.0/x;
266 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bkp;
267 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bkm&#32;=&#32;K_0(x);
268 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bk&#32;=&#32;K_1(x);
269 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;n&#32;==&#32;0&#32;)&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_0(x);
271 &#32;&#32;&#32;&#32;}
272 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;n&#32;==&#32;1&#32;)&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;K_1(x);
274 &#32;&#32;&#32;&#32;}
275 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;j=1;&#32;j&lt;n;&#32;j++)&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;bkp&#32;=&#32;bkm&#32;+j*tox*bk;
277 &#32;&#32;&#32;&#32;&#32;&#32;bkm&#32;=&#32;bk;
278 &#32;&#32;&#32;&#32;&#32;&#32;bk&#32;=&#32;bkp;
279 &#32;&#32;&#32;&#32;}
280 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;bk;
281 }
282 
283 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::J_n(&#32;<emphasis class="keywordtype">double</emphasis>&#32;x,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n)&#32;{
284 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bessj&#32;=&#32;0;
285 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;IACC&#32;=&#32;40;
286 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;BIGN0&#32;=&#32;1.e10;
287 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;BIGNI&#32;=&#32;1.e-10;
288 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;n&#32;==&#32;0&#32;){
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_0(x);
290 &#32;&#32;&#32;&#32;}
291 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;n&#32;==&#32;1&#32;){
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;J_1(x);
293 &#32;&#32;&#32;&#32;}
294 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;ax&#32;=&#32;std::abs(x);
295 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ax&#32;==&#32;0)&#32;{
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
297 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(ax&#32;&gt;&#32;(<emphasis class="keywordtype">float</emphasis>)&#32;n)&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;tox&#32;=&#32;2.0/ax;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjm&#32;=&#32;J_0(ax);
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bj&#32;=&#32;J_1(ax);
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;j=1;&#32;j&#32;&lt;&#32;n;&#32;j++)&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjp&#32;=&#32;j*tox*bj&#32;-&#32;bjm;
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bjm&#32;=&#32;bj;
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bj&#32;=&#32;bjp;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;=&#32;bj;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;tox&#32;=&#32;2.0/ax;
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;m&#32;=&#32;2*((n+&#32;(int)std::sqrt((<emphasis class="keywordtype">float</emphasis>)IACC*n))/2);
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bessj&#32;=&#32;0;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;jsum&#32;=&#32;0;
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sum&#32;=&#32;0.0;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjp&#32;=&#32;0.0;
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bj&#32;=&#32;1.0;
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;j=m;&#32;j&gt;1;&#32;j--)&#32;{
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;bjm=j*tox*bj&#32;-&#32;bjp;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bjp&#32;=&#32;bj;
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bj&#32;=&#32;bjm;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(std::abs(bj)&#32;&gt;&#32;BIGN0)&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bj&#32;=&#32;bj*BIGNI;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bjp&#32;=&#32;bjp*BIGNI;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj=bessj*BIGNI;
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;sum*BIGNI;
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(jsum&#32;!=&#32;0){
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;sum+bj;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jsum&#32;=&#32;1-jsum;
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(j&#32;==&#32;n)&#32;{
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;=&#32;bjp;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sum&#32;=&#32;2.0*sum&#32;-&#32;bj;
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;/=&#32;sum;
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
337 &#32;&#32;&#32;&#32;}
338 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(x&#32;&lt;&#32;0&#32;&amp;&amp;&#32;n%2&#32;==&#32;1&#32;)&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bessj&#32;=&#32;-bessj;
340 &#32;&#32;&#32;&#32;}
341 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;bessj;
342 }
343 
344 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_rhs(<emphasis class="keywordtype">double</emphasis>&#32;u,&#32;<emphasis class="keywordtype">double</emphasis>&#32;v){
345 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;p&#32;&#32;=&#32;std::sqrt(v*v&#32;-&#32;u*u);
346 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p&#32;*&#32;K_0(p)/K_1(p);
347 }
348 
349 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_lhs(<emphasis class="keywordtype">double</emphasis>&#32;u)&#32;{
350 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-u&#32;*&#32;J_0(u)&#32;/&#32;J_1(u);
351 }
352 
353 std::vector&lt;double&gt;&#32;ModeManager::get_us(<emphasis class="keywordtype">double</emphasis>&#32;v)&#32;{
354 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;locations;
355 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;last_smaller&#32;=&#32;<emphasis class="keyword">false</emphasis>;
356 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;lhs,&#32;rhs;
357 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u&#32;=&#32;0.1;
358 &#32;&#32;&#32;&#32;lhs&#32;=&#32;get_lhs(u);
359 &#32;&#32;&#32;&#32;rhs&#32;=&#32;get_rhs(u,v);
360 &#32;&#32;&#32;&#32;last_smaller&#32;=&#32;lhs&#32;&lt;&#32;rhs;
361 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(u&#32;=&#32;0.2;&#32;u&#32;&lt;&#32;v;&#32;u&#32;+=&#32;0.1)&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_lhs&#32;=&#32;get_lhs(u);
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_rhs&#32;=&#32;get_rhs(u,v);
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;new_smaller&#32;=&#32;n_lhs&#32;&lt;&#32;n_rhs;
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(new_smaller&#32;!=&#32;last_smaller)&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locations.push_back(u);
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last_smaller&#32;=&#32;new_smaller;
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs&#32;=&#32;n_lhs;
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs&#32;=&#32;n_rhs;
371 &#32;&#32;&#32;&#32;}
372 
373 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;us;
374 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locations.size();&#32;i++)&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_left&#32;=&#32;locations[i]-0.1;
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_right&#32;=&#32;locations[i];
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_lhs&#32;=&#32;get_lhs(u_left);
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_rhs&#32;=&#32;get_rhs(u_left,v);
379 
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;j&#32;=&#32;0;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(j&lt;10)&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_lhs&#32;=&#32;get_lhs((u_left+u_right)/2.0);
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_rhs&#32;=&#32;get_rhs((u_left+u_right)/2.0,v);
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>((update_lhs&#32;-&#32;update_rhs)&#32;*&#32;(l_lhs-l_rhs)&#32;&lt;&#32;0&#32;)&#32;{
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_right&#32;=&#32;(u_left+u_right)/2.0;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_left&#32;=&#32;(u_left+u_right)/2.0;
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_lhs&#32;=&#32;update_lhs;
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_rhs&#32;=&#32;update_rhs;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(std::abs(l_lhs-l_rhs)&#32;&lt;&#32;1)&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;us.push_back((u_left+u_right)/2.0);
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
396 
397 &#32;&#32;&#32;&#32;}
398 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=0;&#32;i&#32;&lt;&#32;us.size();&#32;i++){
399 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;u_&quot;</emphasis>&#32;&lt;&lt;&#32;i+1&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;us[i]&#32;&lt;&lt;std::endl;
400 &#32;&#32;&#32;&#32;}
401 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;us;
402 }
403 
404 <emphasis class="keywordtype">double</emphasis>&#32;ModeManager::get_u0(<emphasis class="keywordtype">double</emphasis>&#32;v)&#32;{
405 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;locations;
406 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;last_smaller&#32;=&#32;<emphasis class="keyword">false</emphasis>;
407 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;lhs,&#32;rhs;
408 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u&#32;=&#32;0.1;
409 &#32;&#32;&#32;&#32;lhs&#32;=&#32;get_lhs(u);
410 &#32;&#32;&#32;&#32;rhs&#32;=&#32;get_rhs(u,v);
411 &#32;&#32;&#32;&#32;last_smaller&#32;=&#32;lhs&#32;&lt;&#32;rhs;
412 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(u&#32;=&#32;0.2;&#32;u&#32;&lt;&#32;v;&#32;u&#32;+=&#32;0.1)&#32;{
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_lhs&#32;=&#32;get_lhs(u);
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n_rhs&#32;=&#32;get_rhs(u,v);
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;new_smaller&#32;=&#32;n_lhs&#32;&lt;&#32;n_rhs;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(new_smaller&#32;!=&#32;last_smaller)&#32;{
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locations.push_back(u);
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;last_smaller&#32;=&#32;new_smaller;
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs&#32;=&#32;n_lhs;
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs&#32;=&#32;n_rhs;
422 &#32;&#32;&#32;&#32;}
423 
424 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locations.size();&#32;i++)&#32;{
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;sign&#32;change&#32;near&#32;&quot;</emphasis>&lt;&lt;&#32;locations[i]&#32;&lt;&lt;&#32;std::endl;
426 &#32;&#32;&#32;&#32;}
427 
428 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;us;
429 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locations.size();&#32;i++)&#32;{
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_left&#32;=&#32;locations[i]-0.1;
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;u_right&#32;=&#32;locations[i];
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_lhs&#32;=&#32;get_lhs(u_left);
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_rhs&#32;=&#32;get_rhs(u_left,v);
434 
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;j&#32;=&#32;0;
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(j&lt;10)&#32;{
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_lhs&#32;=&#32;get_lhs((u_left+u_right)/2.0);
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;update_rhs&#32;=&#32;get_rhs((u_left+u_right)/2.0,v);
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>((update_lhs&#32;-&#32;update_rhs)&#32;*&#32;(l_lhs-l_rhs)&#32;&lt;&#32;0&#32;)&#32;{
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_right&#32;=&#32;(u_left+u_right)/2.0;
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_left&#32;=&#32;(u_left+u_right)/2.0;
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_lhs&#32;=&#32;update_lhs;
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_rhs&#32;=&#32;update_rhs;
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j++;
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(std::abs(l_lhs-l_rhs)&#32;&lt;&#32;1)&#32;{
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;us.push_back((u_left+u_right)/2.0);
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
451 
452 &#32;&#32;&#32;&#32;}
453 
454 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;us.size();&#32;i++)&#32;{
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;intersection&#32;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;us[i]&#32;&lt;&lt;&#32;std::endl;
456 &#32;&#32;&#32;&#32;}
457 
458 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(us.size()&#32;&gt;0)&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;us[0];
460 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1;
462 &#32;&#32;&#32;&#32;}
463 }
464 
465 <emphasis class="preprocessor">#endif&#32;</emphasis><emphasis class="comment">/*&#32;CODE_HELPERS_MODEMANAGER_CPP_&#32;*/</emphasis><emphasis class="preprocessor"></emphasis>
466 
467 
468 
    </computeroutput></literallayout>
</section>
