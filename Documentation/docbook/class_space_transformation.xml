<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_space_transformation">
<title>SpaceTransformation class Reference</title>
<para>
    <programlisting>#include <link linkend="_space_transformation_8h">&lt;SpaceTransformation.h&gt;</link></programlisting>
</para>
        <section>
            <title>Public Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool homogenized</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const unsigned int dofs_per_layer</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const unsigned int boundary_dofs_in</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const unsigned int boundary_dofs_out</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double epsilon_K<para><emphasis>The material-property \form#41 has a different value inside and
outside of the waveguides core.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double epsilon_M<para><emphasis>The material-property \form#41 has a different value inside and
outside of the waveguides core.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const int sectors<para><emphasis>Since the computational domain is split into subdomains (called sectors),
it is important to keep track of the amount of subdomains.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double deltaY<para><emphasis>This value is initialized with the value Delta from the input-file.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Vector&lt; double &gt; InitialDofs<para><emphasis>This vector of values saves the initial configuration.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double InitialQuality<para><emphasis>This vector of values saves the initial configuration.</emphasis></para></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const int rank</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_space_transformation_1a665606be97853611b30043b3dd5c6d97">SpaceTransformation</link> (
int , int )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Point&lt; 3 &gt; <link linkend="class_space_transformation_1a0bede70e1b43da995f31c513f40c1c69">math_to_phys</link> (
Point&lt; 3 &gt; coord)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Point&lt; 3 &gt; <link linkend="class_space_transformation_1aa8dde9b29141cde1aa0e7b916c4c805a">phys_to_math</link> (
Point&lt; 3 &gt; coord)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_space_transformation_1a89befaf1596d088603b33ad72c2a080f">is_identity</link> (
Point&lt; 3 &gt; coord)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, std::complex&lt; double &gt; &gt; <link linkend="class_space_transformation_1a7bc6ea68baecd9029e4c6d6d812dfc28">get_Tensor</link> (
Point&lt; 3 &gt; &amp; coordinate)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, std::complex&lt; double &gt; &gt; <link linkend="class_space_transformation_1a1a491090e9913fe0fc3ae1c3b0bff48a">get_Preconditioner_Tensor</link> (
Point&lt; 3 &gt; &amp; coordinate, int block)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, double &gt; <link linkend="class_space_transformation_1ac533381400b2f89e5d8a2012514a2f92">get_Space_Transformation_Tensor</link> (
Point&lt; 3 &gt; &amp; coordinate)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, double &gt; <link linkend="class_space_transformation_1a42424f15250388934d3bc7f774a25db4">get_Space_Transformation_Tensor_Homogenized</link> (
Point&lt; 3 &gt; &amp; coordinate)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, std::complex&lt; double &gt; &gt; <link linkend="class_space_transformation_1a88ed87026dec9cbc7d296ef6cd1d0b2a">Apply_PML_To_Tensor</link> (
Point&lt; 3 &gt; &amp; coordinate, Tensor&lt; 2, 3, double &gt; Tensor_input)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, std::complex&lt; double &gt; &gt; <link linkend="class_space_transformation_1ada637316b495b703eb5202c65a587bb7">Apply_PML_To_Tensor_For_Preconditioner</link> (
Point&lt; 3 &gt; &amp; coordinate, Tensor&lt; 2, 3, double &gt; Tensor_input, int block)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Tensor&lt; 2, 3, std::complex&lt; double &gt; &gt; <link linkend="class_space_transformation_1abff7c68f82131fefadb3d5bcef0e2958">get_Tensor_for_step</link> (
Point&lt; 3 &gt; &amp; coordinate, unsigned int dof, double step_width)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_space_transformation_1ab3ec2ac4eeb67d6a1cb3b02b0024d78b">PML_in_X</link> (
Point&lt; 3 &gt; &amp; position)<para><emphasis>This function is used to determine, if a system-coordinate belongs to a
PML-region for the PML that limits the computational domain along the
x-axis.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_space_transformation_1a4128f6833e1b14992b6e6712fdf63d6c">PML_in_Y</link> (
Point&lt; 3 &gt; &amp; position)<para><emphasis>This function is used to determine, if a system-coordinate belongs to a
PML-region for the PML that limits the computational domain along the
y-axis.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_space_transformation_1aec6d6a8c0392bceb95ea9a66c04d78c9">PML_in_Z</link> (
Point&lt; 3 &gt; &amp; position)<para><emphasis>This function is used to determine, if a system-coordinate belongs to a
PML-region for the PML that limits the computational domain along the
z-axis.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1af345da810526549468581af1060d1c5f">Preconditioner_PML_Z_Distance</link> (
Point&lt; 3 &gt; &amp; p, unsigned int block)<para><emphasis>This function fulfills the same purpose as those with similar names but it
is supposed to be used together with Preconditioner_PML_in_Z instead of the
versions without &quot;Preconditioner&quot;.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a6dc9fa5cac54e8dfea7b4e88f76ee5d8">PML_X_Distance</link> (
Point&lt; 3 &gt; &amp; position)<para><emphasis>This function calculates for a given point, its distance to a PML-boundary
limiting the computational domain.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1ad3e51c31b7aeb1837063bf0d946d4754">PML_Y_Distance</link> (
Point&lt; 3 &gt; &amp; position)<para><emphasis>This function calculates for a given point, its distance to a PML-boundary
limiting the computational domain.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a4d73c8cbea006a2309857645eb98cfae">PML_Z_Distance</link> (
Point&lt; 3 &gt; &amp; position)<para><emphasis>This function calculates for a given point, its distance to a PML-boundary
limiting the computational domain.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_space_transformation_1a471e592764d717c88f8f8e083b848255">estimate_and_initialize</link> (
)<para><emphasis>At the beginning (before the first solution of a system) only the boundary
conditions for the shape of the waveguide are known.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1ae8f47777626abc9fdd229c52f7f30c5e">get_Q1</link> (
double z)<para><emphasis>This member calculates the value of Q1 for a provided \form#42-coordinate.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1ac938a474eb72c14b7e934563458bce1f">get_Q2</link> (
double z)<para><emphasis>This member calculates the value of Q2 for a provided \form#42-coordinate.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a85db668db183d2b09157ef8351a198e1">get_Q3</link> (
double z)<para><emphasis>This member calculates the value of Q3 for a provided \form#42-coordinate.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a7d3a0e5a6084d3ed2c11772147eb1297">get_dof</link> (
int dof)<para><emphasis>This is a getter for the values of degrees of freedom.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_space_transformation_1ae459d3c6f53143ec86773b87088cffcf">set_dof</link> (
int dof, double value)<para><emphasis>This function sets the value of the dof provided to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual std::pair&lt; double, double &gt; <link linkend="class_space_transformation_1aa01a150cdb393a71ad5971ccf7fd7315">dof_support</link> (
unsigned int index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_space_transformation_1a31aea732c063256c40a327d78ccffcea">point_in_dof_support</link> (
Point&lt; 3 &gt; location, unsigned int dof_index)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1ace8f3af9e8d918297e1ffd67cd4046b9">get_free_dof</link> (
int dof)<para><emphasis>This is a getter for the values of degrees of freedom.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_space_transformation_1a18738ddf530fe1e109fd6f01b3021105">set_free_dof</link> (
int dof, double value)<para><emphasis>This function sets the value of the dof provided to the given value.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::pair&lt; int, double &gt; <link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link> (
double in_z)<para><emphasis>Using this method unifies the usage of coordinates.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_space_transformation_1a4719286bbc0bba23dcfa96badfb53ef1">Sector_Length</link> (
)<para><emphasis>Returns the length of one sector.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a15a36cfba06f1242c243d3f92c79b3d8">get_r</link> (
double in_z)<para><emphasis>Returns the radius for a system-coordinate;.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a164857fcea7bbad31325ee26705f8e0b">get_m</link> (
double in_z)<para><emphasis>Returns the shift for a system-coordinate;.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_space_transformation_1a6f2c4e565e1e394155969f500abc188d">get_v</link> (
double in_z)<para><emphasis>Returns the tilt for a system-coordinate;.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="class_space_transformation_1a5c01731c41adb0a9e7881f890a838a0c">Z_to_Layer</link> (
double )<para><emphasis>This Method writes a comprehensive description of the current structure to
the console.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual Vector&lt; double &gt; <link linkend="class_space_transformation_1ab003b1737784c1750121dd8c03b98f52">Dofs</link> (
)<para><emphasis>Other objects can use this function to retrieve an array of the current
values of the degrees of freedom of the functional we are optimizing.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual unsigned int <link linkend="class_space_transformation_1a49bffd597593d0911edbafff13214195">NFreeDofs</link> (
)<para><emphasis>This function returns the number of unrestrained degrees of freedom of the
current optimization run.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual unsigned int <link linkend="class_space_transformation_1a463f0141c194724575bdcdb23168fdec">NDofs</link> (
)<para><emphasis>This function returns the total number of DOFs including restrained ones.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_space_transformation_1a487c356afef667763e244f3a93df4c8a">IsDofFree</link> (
int )<para><emphasis>Since Dofs() also returns restrained degrees of freedom, this function can
be applied to determine if a degree of freedom is indeed free or
restrained.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_space_transformation_1a89e0b73d7b7303342fdcb4372e26b0a9">Print</link> (
)<para><emphasis>Console output of the current Waveguide Structure.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual std::complex&lt; double &gt; <link linkend="class_space_transformation_1a9d2f74d35f0d2cf01d9c143f9710522f">evaluate_for_z</link> (
double , <link linkend="class_waveguide">Waveguide</link> * )<para><emphasis>Since the Wavegudie itself may be circular or rectangular now, the
evaluation routines should be moved to a point in the code where this
information is included in the code.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::complex&lt; double &gt; <link linkend="class_space_transformation_1ac0a761eb5345c80956d829e51b201a43">evaluate_for_z_with_sum</link> (
double , double , <link linkend="class_waveguide">Waveguide</link> * )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::complex&lt; double &gt; <link linkend="class_space_transformation_1a57cc57dddaa91f515d94eab181492bc6">gauss_product_2D_sphere</link> (
double z, int n, double R, double Xc, double Yc, <link linkend="class_waveguide">Waveguide</link> * in_w)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>The <link linkend="class_space_transformation">SpaceTransformation</link> class encapsulates the coordinate transformation used in the simulation. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Two important decisions have to be made in the computation: Which shape should be used for the waveguide? This can either be rectangular or tubular. Should the coordinate-transformation always be equal to identity in any domain where PML is applied? (yes or no). However, the space transformation is the only information required to compute the Tensor <equation><title>form_45</title>$g$</equation> which is a 3x3 matrix whilch (multiplied by the material value of the untransfomred coordinate either inside or outside the waveguide) gives us the value of <equation><title>form_46</title>$\epsilon$</equation> and <equation><title>form_47</title>$\mu$</equation>. From this class we derive several different classes which then specify the interface specified in this class. <formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
<formalpara><title>Date: </title>

<para>17.12.2015 </para>
</formalpara>
</para>
                <para>Definition at line 29 of file SpaceTransformation.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>SpaceTransformation.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
            <simplesect>
                <title>const double SpaceTransformation::epsilon_K</title>                
<para>This variable stores its value inside the core. </para>

                <para>Definition at line 143 of file SpaceTransformation.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>SpaceTransformation.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>const double SpaceTransformation::epsilon_M</title>                
<para>This variable stores its value outside the core. </para>

                <para>Definition at line 149 of file SpaceTransformation.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>SpaceTransformation.h</para></listitem></itemizedlist></para>
            </simplesect>
            <simplesect>
                <title>const int SpaceTransformation::sectors</title>                
<para>This member stores the number of Sectors the computational domain has been split into. </para>

                <para>Definition at line 155 of file SpaceTransformation.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>SpaceTransformation.h</para></listitem></itemizedlist></para>
            </simplesect>
        </section>
            <section xml:id="class_space_transformation_1a665606be97853611b30043b3dd5c6d97">
                <title>SpaceTransformation::SpaceTransformation (int, int)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a0bede70e1b43da995f31c513f40c1c69">
                <title>virtual Point&lt;3&gt; SpaceTransformation::math_to_phys (Point&lt; 3 &gt; coord) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1aa8dde9b29141cde1aa0e7b916c4c805a">
                <title>virtual Point&lt;3&gt; SpaceTransformation::phys_to_math (Point&lt; 3 &gt; coord) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a89befaf1596d088603b33ad72c2a080f">
                <title>bool SpaceTransformation::is_identity (Point&lt; 3 &gt; coord) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a7bc6ea68baecd9029e4c6d6d812dfc28">
                <title>virtual Tensor&lt;2, 3, std::complex&lt;double&gt; &gt; SpaceTransformation::get_Tensor (Point&lt; 3 &gt; &amp;coordinate) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a1a491090e9913fe0fc3ae1c3b0bff48a">
                <title>virtual Tensor&lt;2, 3, std::complex&lt;double&gt; &gt; SpaceTransformation::get_Preconditioner_Tensor (Point&lt; 3 &gt; &amp;coordinate, int block) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1ac533381400b2f89e5d8a2012514a2f92">
                <title>virtual Tensor&lt;2, 3, double&gt; SpaceTransformation::get_Space_Transformation_Tensor (Point&lt; 3 &gt; &amp;coordinate) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a42424f15250388934d3bc7f774a25db4">
                <title>virtual Tensor&lt;2, 3, double&gt; SpaceTransformation::get_Space_Transformation_Tensor_Homogenized (Point&lt; 3 &gt; &amp;coordinate) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a88ed87026dec9cbc7d296ef6cd1d0b2a">
                <title>virtual Tensor&lt;2, 3, std::complex&lt;double&gt; &gt; SpaceTransformation::Apply_PML_To_Tensor (Point&lt; 3 &gt; &amp;coordinate, Tensor&lt; 2, 3, double &gt; Tensor_input) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1ada637316b495b703eb5202c65a587bb7">
                <title>virtual Tensor&lt;2, 3, std::complex&lt;double&gt; &gt; SpaceTransformation::Apply_PML_To_Tensor_For_Preconditioner (Point&lt; 3 &gt; &amp;coordinate, Tensor&lt; 2, 3, double &gt; Tensor_input, int block) const =0</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1abff7c68f82131fefadb3d5bcef0e2958">
                <title>Tensor&lt; 2, 3, std::complex&lt; double &gt; &gt; SpaceTransformation::get_Tensor_for_step (Point&lt; 3 &gt; &amp;coordinate, unsigned int dof, double step_width)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1ab3ec2ac4eeb67d6a1cb3b02b0024d78b">
                <title>virtual bool SpaceTransformation::PML_in_X (Point&lt; 3 &gt; &amp;position) const =0</title> <emphasis>This function is used to determine, if a system-coordinate belongs to a
PML-region for the PML that limits the computational domain along the
x-axis.</emphasis>
                
<para>Since there are 3 blocks of PML-type material, there are 3 functions. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>position</entry>
                                <entry>
<para>Stores the position in which to test for presence of a PML-Material. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1a4128f6833e1b14992b6e6712fdf63d6c">
                <title>virtual bool SpaceTransformation::PML_in_Y (Point&lt; 3 &gt; &amp;position) const =0</title> <emphasis>This function is used to determine, if a system-coordinate belongs to a
PML-region for the PML that limits the computational domain along the
y-axis.</emphasis>
                
<para>Since there are 3 blocks of PML-type material, there are 3 functions. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>position</entry>
                                <entry>
<para>Stores the position in which to test for presence of a PML-Material. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1aec6d6a8c0392bceb95ea9a66c04d78c9">
                <title>virtual bool SpaceTransformation::PML_in_Z (Point&lt; 3 &gt; &amp;position) const =0</title> <emphasis>This function is used to determine, if a system-coordinate belongs to a
PML-region for the PML that limits the computational domain along the
z-axis.</emphasis>
                
<para>Since there are 3 blocks of PML-type material, there are 3 functions. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>position</entry>
                                <entry>
<para>Stores the position in which to test for presence of a PML-Material. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1af345da810526549468581af1060d1c5f">
                <title>virtual double SpaceTransformation::Preconditioner_PML_Z_Distance (Point&lt; 3 &gt; &amp;p, unsigned int block) const =0</title> <emphasis>This function fulfills the same purpose as those with similar names but it
is supposed to be used together with Preconditioner_PML_in_Z instead of the
versions without &quot;Preconditioner&quot;.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a6dc9fa5cac54e8dfea7b4e88f76ee5d8">
                <title>virtual double SpaceTransformation::PML_X_Distance (Point&lt; 3 &gt; &amp;position) const =0</title> <emphasis>This function calculates for a given point, its distance to a PML-boundary
limiting the computational domain.</emphasis>
                
<para>This function is used merely to make code more readable. There is a function for every one of the dimensions since the normal vectors of PML-regions in this implementation are the coordinate-axis. This value is set to zero outside the PML and positive inside both PML-domains (only one for the z-direction). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>position</entry>
                                <entry>
<para>Stores the position from which to calculate the distance to the PML-surface. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1ad3e51c31b7aeb1837063bf0d946d4754">
                <title>virtual double SpaceTransformation::PML_Y_Distance (Point&lt; 3 &gt; &amp;position) const =0</title> <emphasis>This function calculates for a given point, its distance to a PML-boundary
limiting the computational domain.</emphasis>
                
<para>This function is used merely to make code more readable. There is a function for every one of the dimensions since the normal vectors of PML-regions in this implementation are the coordinate-axis. This value is set to zero outside the PML and positive inside both PML-domains (only one for the z-direction). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>position</entry>
                                <entry>
<para>Stores the position from which to calculate the distance to the PML-surface. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1a4d73c8cbea006a2309857645eb98cfae">
                <title>virtual double SpaceTransformation::PML_Z_Distance (Point&lt; 3 &gt; &amp;position) const =0</title> <emphasis>This function calculates for a given point, its distance to a PML-boundary
limiting the computational domain.</emphasis>
                
<para>This function is used merely to make code more readable. There is a function for every one of the dimensions since the normal vectors of PML-regions in this implementation are the coordinate-axis. This value is set to zero outside the PML and positive inside both PML-domains (only one for the z-direction). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>position</entry>
                                <entry>
<para>Stores the position from which to calculate the distance to the PML-surface. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1a471e592764d717c88f8f8e083b848255">
                <title>virtual void SpaceTransformation::estimate_and_initialize ()=0</title> <emphasis>At the beginning (before the first solution of a system) only the boundary
conditions for the shape of the waveguide are known.</emphasis>
                
<para>Therefore the values for the degrees of freedom need to be estimated. This function sets all variables to appropiate values and estimates an appropriate shape based on averages and a polynomial interpolation of the boundary conditions on the shape. </para>

            </section>
            <section xml:id="class_space_transformation_1ae8f47777626abc9fdd229c52f7f30c5e">
                <title>virtual double SpaceTransformation::get_Q1 (double z) const =0</title> <emphasis>This member calculates the value of Q1 for a provided \form#42-coordinate.</emphasis>
                
<para>This value is used in the transformation of the solution-vector in transformed coordinates (solution of the system-matrix) to real coordinates (physical field). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>z</entry>
                                <entry>
<para>The value of Q1 is independent of <equation><title>form_43</title>$x$</equation> and <equation><title>form_44</title>$y$</equation>. Therefore only a <equation><title>form_42</title>$z$</equation>-coordinate is provided in a call to the function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1ac938a474eb72c14b7e934563458bce1f">
                <title>virtual double SpaceTransformation::get_Q2 (double z) const =0</title> <emphasis>This member calculates the value of Q2 for a provided \form#42-coordinate.</emphasis>
                
<para>This value is used in the transformation of the solution-vector in transformed coordinates (solution of the system-matrix) to real coordinates (physical field). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>z</entry>
                                <entry>
<para>The value of Q2 is independent of <equation><title>form_43</title>$x$</equation> and <equation><title>form_44</title>$y$</equation>. Therefore only a <equation><title>form_42</title>$z$</equation>-coordinate is provided in a call to the function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1a85db668db183d2b09157ef8351a198e1">
                <title>virtual double SpaceTransformation::get_Q3 (double z) const =0</title> <emphasis>This member calculates the value of Q3 for a provided \form#42-coordinate.</emphasis>
                
<para>This value is used in the transformation of the solution-vector in transformed coordinates (solution of the system-matrix) to real coordinates (physical field). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>z</entry>
                                <entry>
<para>The value of Q3 is independent of <equation><title>form_43</title>$x$</equation> and <equation><title>form_44</title>$y$</equation>. Therefore only a <equation><title>form_42</title>$z$</equation>-coordinate is provided in a call to the function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1a7d3a0e5a6084d3ed2c11772147eb1297">
                <title>virtual double SpaceTransformation::get_dof (int dof) const =0</title> <emphasis>This is a getter for the values of degrees of freedom.</emphasis>
                
<para>A getter-setter interface was introduced since the values are estimated automatically during the optimization and non-physical systems should be excluded from the domain of possible cases. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dof</entry>
                                <entry>
<para>The index of the degree of freedom to be retrieved from the structure of the modelled waveguide. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>This function returns the value of the requested degree of freedom. Should this dof not exist, 0 will be returned. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_space_transformation_1ae459d3c6f53143ec86773b87088cffcf">
                <title>virtual void SpaceTransformation::set_dof (int dof, double value)=0</title> <emphasis>This function sets the value of the dof provided to the given value.</emphasis>
                
<para>It is important to consider, that some dofs are non-writable (i.e. the values of the degrees of freedom on the boundary, like the radius of the input-connector cannot be changed). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dof</entry>
                                <entry>
<para>The index of the parameter to be changed. </para>
</entry>
                            </row>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>The value, the dof should be set to. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1aa01a150cdb393a71ad5971ccf7fd7315">
                <title>std::pair&lt; double, double &gt; SpaceTransformation::dof_support (unsigned int index) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a31aea732c063256c40a327d78ccffcea">
                <title>bool SpaceTransformation::point_in_dof_support (Point&lt; 3 &gt; location, unsigned int dof_index) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1ace8f3af9e8d918297e1ffd67cd4046b9">
                <title>virtual double SpaceTransformation::get_free_dof (int dof) const =0</title> <emphasis>This is a getter for the values of degrees of freedom.</emphasis>
                
<para>A getter-setter interface was introduced since the values are estimated automatically during the optimization and non-physical systems should be excluded from the domain of possible cases. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dof</entry>
                                <entry>
<para>The index of the degree of freedom to be retrieved from the structure of the modelled waveguide. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>This function returns the value of the requested degree of freedom. Should this dof not exist, 0 will be returnd. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_space_transformation_1a18738ddf530fe1e109fd6f01b3021105">
                <title>virtual void SpaceTransformation::set_free_dof (int dof, double value)=0</title> <emphasis>This function sets the value of the dof provided to the given value.</emphasis>
                
<para>It is important to consider, that some dofs are non-writable (i.e. the values of the degrees of freedom on the boundary, like the radius of the input-connector cannot be changed). 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dof</entry>
                                <entry>
<para>The index of the parameter to be changed. </para>
</entry>
                            </row>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>The value, the dof should be set to. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">
                <title>std::pair&lt; int, double &gt; SpaceTransformation::Z_to_Sector_and_local_z (double in_z) const</title> <emphasis>Using this method unifies the usage of coordinates.</emphasis>
                
<para>This function takes a global <equation><title>form_42</title>$z$</equation> coordinate (in the computational domain) and returns both a Sector-Index and an internal <equation><title>form_42</title>$z$</equation> coordinate indicating which sector this coordinate belongs to and how far along in the sector it is located. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>double</entry>
                                <entry>
<para>in_z global system <equation><title>form_42</title>$z$</equation> coordinate for the transformation. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_space_transformation_1a4719286bbc0bba23dcfa96badfb53ef1">
                <title>double SpaceTransformation::Sector_Length () const</title> <emphasis>Returns the length of one sector.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a15a36cfba06f1242c243d3f92c79b3d8">
                <title>virtual double SpaceTransformation::get_r (double in_z) const =0</title> <emphasis>Returns the radius for a system-coordinate;.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a164857fcea7bbad31325ee26705f8e0b">
                <title>virtual double SpaceTransformation::get_m (double in_z) const =0</title> <emphasis>Returns the shift for a system-coordinate;.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a6f2c4e565e1e394155969f500abc188d">
                <title>virtual double SpaceTransformation::get_v (double in_z) const =0</title> <emphasis>Returns the tilt for a system-coordinate;.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a5c01731c41adb0a9e7881f890a838a0c">
                <title>int SpaceTransformation::Z_to_Layer (double) const</title> <emphasis>This Method writes a comprehensive description of the current structure to
the console.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1ab003b1737784c1750121dd8c03b98f52">
                <title>virtual Vector&lt;double&gt; SpaceTransformation::Dofs () const =0</title> <emphasis>Other objects can use this function to retrieve an array of the current
values of the degrees of freedom of the functional we are optimizing.</emphasis>
                
<para>This also includes restrained degrees of freedom and other functions can be used to determine this property. This has to be done because in different cases the number of restrained degrees of freedom can vary and we want no logic about this in other functions. </para>

            </section>
            <section xml:id="class_space_transformation_1a49bffd597593d0911edbafff13214195">
                <title>virtual unsigned int SpaceTransformation::NFreeDofs () const =0</title> <emphasis>This function returns the number of unrestrained degrees of freedom of the
current optimization run.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a463f0141c194724575bdcdb23168fdec">
                <title>virtual unsigned int SpaceTransformation::NDofs () const =0</title> <emphasis>This function returns the total number of DOFs including restrained ones.</emphasis>
                
<para>This is the lenght of the array returned by <link linkend="class_space_transformation_1ab003b1737784c1750121dd8c03b98f52">Dofs()</link>. </para>

            </section>
            <section xml:id="class_space_transformation_1a487c356afef667763e244f3a93df4c8a">
                <title>virtual bool SpaceTransformation::IsDofFree (int) const =0</title> <emphasis>Since Dofs() also returns restrained degrees of freedom, this function can
be applied to determine if a degree of freedom is indeed free or
restrained.</emphasis>
                
<para>&quot;restrained&quot; means that for example the DOF represents the radius at one of the connectors (input or output) and therefore we forbid the optimization scheme to vary this value. </para>

            </section>
            <section xml:id="class_space_transformation_1a89e0b73d7b7303342fdcb4372e26b0a9">
                <title>virtual void SpaceTransformation::Print () const =0</title> <emphasis>Console output of the current Waveguide Structure.</emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a9d2f74d35f0d2cf01d9c143f9710522f">
                <title>virtual std::complex&lt;double&gt; SpaceTransformation::evaluate_for_z (double, Waveguide *)=0</title> <emphasis>Since the Wavegudie itself may be circular or rectangular now, the
evaluation routines should be moved to a point in the code where this
information is included in the code.</emphasis>
                
<para>Since I dont want to create derived classes from waveguide (which I should do eventually) I will for now include this functionality into the space transformation which is shape-sensitive. The waveguide only offers the evaluation at a point. The quadrature-rule has to be imposed by the space transformation. </para>

            </section>
            <section xml:id="class_space_transformation_1ac0a761eb5345c80956d829e51b201a43">
                <title>std::complex&lt; double &gt; SpaceTransformation::evaluate_for_z_with_sum (double, double, Waveguide *)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_space_transformation_1a57cc57dddaa91f515d94eab181492bc6">
                <title>std::complex&lt; double &gt; SpaceTransformation::gauss_product_2D_sphere (double z, int n, double R, double Xc, double Yc, Waveguide *in_w)</title> <emphasis></emphasis>
                
            </section>
</section>
