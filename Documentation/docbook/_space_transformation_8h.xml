<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_space_transformation_8h">
    <title>SpaceTransformation.h File Reference</title>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &lt;math.h&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_space_transformation">SpaceTransformation</link></para>
<para><emphasis>The SpaceTransformation class encapsulates the coordinate
transformation used in the simulation.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/SpaceTransformation.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;SPACETRANSFORMATION_H_</emphasis>
2 <emphasis class="preprocessor">#define&#32;SPACETRANSFORMATION_H_</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
9 
10 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
11 
12 <emphasis class="keyword">class&#32;</emphasis><link linkend="class_waveguide">Waveguide</link>;<emphasis class="comment"></emphasis>
13 <emphasis class="comment">/**</emphasis>
14 <emphasis class="comment">&#32;*&#32;\class&#32;SpaceTransformation</emphasis>
15 <emphasis class="comment">&#32;*&#32;\brief&#32;The&#32;SpaceTransformation&#32;class&#32;encapsulates&#32;the&#32;coordinate</emphasis>
16 <emphasis class="comment">&#32;*&#32;transformation&#32;used&#32;in&#32;the&#32;simulation.</emphasis>
17 <emphasis class="comment">&#32;*</emphasis>
18 <emphasis class="comment">&#32;*&#32;Two&#32;important&#32;decisions&#32;have&#32;to&#32;be&#32;made&#32;in&#32;the&#32;computation:&#32;Which&#32;shape</emphasis>
19 <emphasis class="comment">&#32;*&#32;should&#32;be&#32;used&#32;for&#32;the&#32;waveguide?&#32;This&#32;can&#32;either&#32;be&#32;rectangular&#32;or&#32;tubular.</emphasis>
20 <emphasis class="comment">&#32;*&#32;Should&#32;the&#32;coordinate-transformation&#32;always&#32;be&#32;equal&#32;to&#32;identity&#32;in&#32;any</emphasis>
21 <emphasis class="comment">&#32;*&#32;domain&#32;where&#32;PML&#32;is&#32;applied?&#32;(yes&#32;or&#32;no).&#32;However,&#32;the&#32;space&#32;transformation</emphasis>
22 <emphasis class="comment">&#32;*&#32;is&#32;the&#32;only&#32;information&#32;required&#32;to&#32;compute&#32;the&#32;Tensor&#32;\f$g\f$&#32;which&#32;is&#32;a&#32;3x3</emphasis>
23 <emphasis class="comment">&#32;*&#32;matrix&#32;whilch&#32;(multiplied&#32;by&#32;the&#32;material&#32;value&#32;of&#32;the&#32;untransfomred</emphasis>
24 <emphasis class="comment">&#32;*&#32;coordinate&#32;either&#32;inside&#32;or&#32;outside&#32;the&#32;waveguide)&#32;gives&#32;us&#32;the&#32;value&#32;of</emphasis>
25 <emphasis class="comment">&#32;*&#32;\f$\epsilon\f$&#32;and&#32;\f$\mu\f$.&#32;From&#32;this&#32;class&#32;we&#32;derive&#32;several&#32;different</emphasis>
26 <emphasis class="comment">&#32;*&#32;classes&#32;which&#32;then&#32;specify&#32;the&#32;interface&#32;specified&#32;in&#32;this&#32;class.&#32;\author</emphasis>
27 <emphasis class="comment">&#32;*&#32;Pascal&#32;Kraft&#32;\date&#32;17.12.2015</emphasis>
28 <emphasis class="comment">&#32;*/</emphasis>
<link linkend="class_space_transformation">29 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_space_transformation">SpaceTransformation</link>&#32;{
30 &#32;<emphasis class="keyword">public</emphasis>:
31 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;homogenized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
32 
33 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;dofs_per_layer;
34 
35 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;boundary_dofs_in;
36 
37 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;boundary_dofs_out;
38 
39 &#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>(<emphasis class="keywordtype">int</emphasis>,&#32;<emphasis class="keywordtype">int</emphasis>);
40 
41 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Point&lt;3&gt;&#32;math_to_phys(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
42 
43 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Point&lt;3&gt;&#32;phys_to_math(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
44 
45 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;is_identity(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
46 
47 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Tensor(
48 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
49 
50 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Preconditioner_Tensor(
51 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
52 
53 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;get_Space_Transformation_Tensor(
54 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
55 
56 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;get_Space_Transformation_Tensor_Homogenized(
57 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
58 
59 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor(
60 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;Tensor_input)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
61 
62 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
63 &#32;&#32;&#32;&#32;&#32;&#32;Apply_PML_To_Tensor_For_Preconditioner(Point&lt;3&gt;&#32;&amp;coordinate,
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;Tensor_input,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
66 
67 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Tensor_for_step(
68 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;step_width);
69 <emphasis class="comment"></emphasis>
70 <emphasis class="comment">&#32;&#32;/**</emphasis>
71 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a</emphasis>
72 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the</emphasis>
73 <emphasis class="comment">&#32;&#32;&#32;*&#32;x-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3</emphasis>
74 <emphasis class="comment">&#32;&#32;&#32;*&#32;functions.&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for</emphasis>
75 <emphasis class="comment">&#32;&#32;&#32;*&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
76 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
77 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;PML_in_X(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;<emphasis class="comment"></emphasis>
78 <emphasis class="comment">&#32;&#32;/**</emphasis>
79 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a</emphasis>
80 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the</emphasis>
81 <emphasis class="comment">&#32;&#32;&#32;*&#32;y-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3</emphasis>
82 <emphasis class="comment">&#32;&#32;&#32;*&#32;functions.&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for</emphasis>
83 <emphasis class="comment">&#32;&#32;&#32;*&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
84 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
85 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;PML_in_Y(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;<emphasis class="comment"></emphasis>
86 <emphasis class="comment">&#32;&#32;/**</emphasis>
87 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a</emphasis>
88 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the</emphasis>
89 <emphasis class="comment">&#32;&#32;&#32;*&#32;z-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3</emphasis>
90 <emphasis class="comment">&#32;&#32;&#32;*&#32;functions.&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for</emphasis>
91 <emphasis class="comment">&#32;&#32;&#32;*&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
92 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
93 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;PML_in_Z(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
94 <emphasis class="comment"></emphasis>
95 <emphasis class="comment">&#32;&#32;/**</emphasis>
96 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;fulfills&#32;the&#32;same&#32;purpose&#32;as&#32;those&#32;with&#32;similar&#32;names&#32;but&#32;it</emphasis>
97 <emphasis class="comment">&#32;&#32;&#32;*&#32;is&#32;supposed&#32;to&#32;be&#32;used&#32;together&#32;with&#32;Preconditioner_PML_in_Z&#32;instead&#32;of&#32;the</emphasis>
98 <emphasis class="comment">&#32;&#32;&#32;*&#32;versions&#32;without&#32;&quot;Preconditioner&quot;.</emphasis>
99 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
100 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;Preconditioner_PML_Z_Distance(Point&lt;3&gt;&#32;&amp;p,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
102 <emphasis class="comment"></emphasis>
103 <emphasis class="comment">&#32;&#32;/**</emphasis>
104 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary</emphasis>
105 <emphasis class="comment">&#32;&#32;&#32;*&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make</emphasis>
106 <emphasis class="comment">&#32;&#32;&#32;*&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions</emphasis>
107 <emphasis class="comment">&#32;&#32;&#32;*&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the</emphasis>
108 <emphasis class="comment">&#32;&#32;&#32;*&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive</emphasis>
109 <emphasis class="comment">&#32;&#32;&#32;*&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).&#32;\param&#32;position</emphasis>
110 <emphasis class="comment">&#32;&#32;&#32;*&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the</emphasis>
111 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-surface.</emphasis>
112 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
113 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;PML_X_Distance(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;<emphasis class="comment"></emphasis>
114 <emphasis class="comment">&#32;&#32;/**</emphasis>
115 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary</emphasis>
116 <emphasis class="comment">&#32;&#32;&#32;*&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make</emphasis>
117 <emphasis class="comment">&#32;&#32;&#32;*&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions</emphasis>
118 <emphasis class="comment">&#32;&#32;&#32;*&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the</emphasis>
119 <emphasis class="comment">&#32;&#32;&#32;*&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive</emphasis>
120 <emphasis class="comment">&#32;&#32;&#32;*&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).&#32;\param&#32;position</emphasis>
121 <emphasis class="comment">&#32;&#32;&#32;*&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the</emphasis>
122 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-surface.</emphasis>
123 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
124 
125 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;PML_Y_Distance(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;<emphasis class="comment"></emphasis>
126 <emphasis class="comment">&#32;&#32;/**</emphasis>
127 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary</emphasis>
128 <emphasis class="comment">&#32;&#32;&#32;*&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make</emphasis>
129 <emphasis class="comment">&#32;&#32;&#32;*&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions</emphasis>
130 <emphasis class="comment">&#32;&#32;&#32;*&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the</emphasis>
131 <emphasis class="comment">&#32;&#32;&#32;*&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive</emphasis>
132 <emphasis class="comment">&#32;&#32;&#32;*&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).&#32;\param&#32;position</emphasis>
133 <emphasis class="comment">&#32;&#32;&#32;*&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the</emphasis>
134 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-surface.</emphasis>
135 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
136 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;PML_Z_Distance(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
137 <emphasis class="comment"></emphasis>
138 <emphasis class="comment">&#32;&#32;/**</emphasis>
139 <emphasis class="comment">&#32;&#32;&#32;*&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and</emphasis>
140 <emphasis class="comment">&#32;&#32;&#32;*&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;inside&#32;the</emphasis>
141 <emphasis class="comment">&#32;&#32;&#32;*&#32;core.</emphasis>
142 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_space_transformation_1acfc3ce47223489b9261ee69d4fec6661">143 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_space_transformation_1acfc3ce47223489b9261ee69d4fec6661">epsilon_K</link>;<emphasis class="comment"></emphasis>
144 <emphasis class="comment">&#32;&#32;/**</emphasis>
145 <emphasis class="comment">&#32;&#32;&#32;*&#32;&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and</emphasis>
146 <emphasis class="comment">&#32;&#32;&#32;*&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;outside&#32;the</emphasis>
147 <emphasis class="comment">&#32;&#32;&#32;*&#32;core.</emphasis>
148 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_space_transformation_1a3cb9e63fe3d5c4436236bd6fee69d060">149 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_space_transformation_1a3cb9e63fe3d5c4436236bd6fee69d060">epsilon_M</link>;<emphasis class="comment"></emphasis>
150 <emphasis class="comment">&#32;&#32;/**</emphasis>
151 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;the&#32;computational&#32;domain&#32;is&#32;split&#32;into&#32;subdomains&#32;(called&#32;sectors),</emphasis>
152 <emphasis class="comment">&#32;&#32;&#32;*&#32;it&#32;is&#32;important&#32;to&#32;keep&#32;track&#32;of&#32;the&#32;amount&#32;of&#32;subdomains.&#32;This&#32;member</emphasis>
153 <emphasis class="comment">&#32;&#32;&#32;*&#32;stores&#32;the&#32;number&#32;of&#32;Sectors&#32;the&#32;computational&#32;domain&#32;has&#32;been&#32;split&#32;into.</emphasis>
154 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_space_transformation_1ad0b9c36e4f79b481638b5f7ef4914f50">155 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_space_transformation_1ad0b9c36e4f79b481638b5f7ef4914f50">sectors</link>;
156 <emphasis class="comment"></emphasis>
157 <emphasis class="comment">&#32;&#32;/**</emphasis>
158 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;initialized&#32;with&#32;the&#32;value&#32;Delta&#32;from&#32;the&#32;input-file.</emphasis>
159 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_space_transformation_1a82a89fd12df1c0e1954c4a03115d2e42">160 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_space_transformation_1a82a89fd12df1c0e1954c4a03115d2e42">deltaY</link>;
161 <emphasis class="comment"></emphasis>
162 <emphasis class="comment">&#32;&#32;/**</emphasis>
163 <emphasis class="comment">&#32;&#32;&#32;*&#32;At&#32;the&#32;beginning&#32;(before&#32;the&#32;first&#32;solution&#32;of&#32;a&#32;system)&#32;only&#32;the&#32;boundary</emphasis>
164 <emphasis class="comment">&#32;&#32;&#32;*&#32;conditions&#32;for&#32;the&#32;shape&#32;of&#32;the&#32;waveguide&#32;are&#32;known.&#32;Therefore&#32;the&#32;values</emphasis>
165 <emphasis class="comment">&#32;&#32;&#32;*&#32;for&#32;the&#32;degrees&#32;of&#32;freedom&#32;need&#32;to&#32;be&#32;estimated.&#32;This&#32;function&#32;sets&#32;all</emphasis>
166 <emphasis class="comment">&#32;&#32;&#32;*&#32;variables&#32;to&#32;appropiate&#32;values&#32;and&#32;estimates&#32;an&#32;appropriate&#32;shape&#32;based&#32;on</emphasis>
167 <emphasis class="comment">&#32;&#32;&#32;*&#32;averages&#32;and&#32;a&#32;polynomial&#32;interpolation&#32;of&#32;the&#32;boundary&#32;conditions&#32;on&#32;the</emphasis>
168 <emphasis class="comment">&#32;&#32;&#32;*&#32;shape.</emphasis>
169 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
170 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;estimate_and_initialize()&#32;=&#32;0;
171 <emphasis class="comment"></emphasis>
172 <emphasis class="comment">&#32;&#32;/**</emphasis>
173 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q1&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.</emphasis>
174 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in</emphasis>
175 <emphasis class="comment">&#32;&#32;&#32;*&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates</emphasis>
176 <emphasis class="comment">&#32;&#32;&#32;*&#32;(physical&#32;field).&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q1&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and</emphasis>
177 <emphasis class="comment">&#32;&#32;&#32;*&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the</emphasis>
178 <emphasis class="comment">&#32;&#32;&#32;*&#32;function.</emphasis>
179 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
180 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_Q1(<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
181 <emphasis class="comment"></emphasis>
182 <emphasis class="comment">&#32;&#32;/**</emphasis>
183 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q2&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.</emphasis>
184 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in</emphasis>
185 <emphasis class="comment">&#32;&#32;&#32;*&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates</emphasis>
186 <emphasis class="comment">&#32;&#32;&#32;*&#32;(physical&#32;field).&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q2&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and</emphasis>
187 <emphasis class="comment">&#32;&#32;&#32;*&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the</emphasis>
188 <emphasis class="comment">&#32;&#32;&#32;*&#32;function.</emphasis>
189 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
190 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_Q2(<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
191 <emphasis class="comment"></emphasis>
192 <emphasis class="comment">&#32;&#32;/**</emphasis>
193 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q3&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.</emphasis>
194 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in</emphasis>
195 <emphasis class="comment">&#32;&#32;&#32;*&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates</emphasis>
196 <emphasis class="comment">&#32;&#32;&#32;*&#32;(physical&#32;field).&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q3&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and</emphasis>
197 <emphasis class="comment">&#32;&#32;&#32;*&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the</emphasis>
198 <emphasis class="comment">&#32;&#32;&#32;*&#32;function.</emphasis>
199 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
200 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_Q3(<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
201 <emphasis class="comment"></emphasis>
202 <emphasis class="comment">&#32;&#32;/**</emphasis>
203 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter</emphasis>
204 <emphasis class="comment">&#32;&#32;&#32;*&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically</emphasis>
205 <emphasis class="comment">&#32;&#32;&#32;*&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from</emphasis>
206 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;domain&#32;of&#32;possible&#32;cases.&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom</emphasis>
207 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.&#32;\return&#32;This</emphasis>
208 <emphasis class="comment">&#32;&#32;&#32;*&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this</emphasis>
209 <emphasis class="comment">&#32;&#32;&#32;*&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returned.</emphasis>
210 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
211 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
212 <emphasis class="comment"></emphasis>
213 <emphasis class="comment">&#32;&#32;/**</emphasis>
214 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is</emphasis>
215 <emphasis class="comment">&#32;&#32;&#32;*&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of</emphasis>
216 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the</emphasis>
217 <emphasis class="comment">&#32;&#32;&#32;*&#32;input-connector&#32;cannot&#32;be&#32;changed).&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter</emphasis>
218 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;changed.&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
219 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
220 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;set_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value)&#32;=&#32;0;
221 
222 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;std::pair&lt;double,&#32;double&gt;&#32;dof_support(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index)&#32;<emphasis class="keyword">const</emphasis>;
223 
224 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;point_in_dof_support(Point&lt;3&gt;&#32;location,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof_index)&#32;<emphasis class="keyword">const</emphasis>;
225 <emphasis class="comment"></emphasis>
226 <emphasis class="comment">&#32;&#32;/**</emphasis>
227 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter</emphasis>
228 <emphasis class="comment">&#32;&#32;&#32;*&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically</emphasis>
229 <emphasis class="comment">&#32;&#32;&#32;*&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from</emphasis>
230 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;domain&#32;of&#32;possible&#32;cases.&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom</emphasis>
231 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.&#32;\return&#32;This</emphasis>
232 <emphasis class="comment">&#32;&#32;&#32;*&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this</emphasis>
233 <emphasis class="comment">&#32;&#32;&#32;*&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
234 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
235 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_free_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
236 <emphasis class="comment"></emphasis>
237 <emphasis class="comment">&#32;&#32;/**</emphasis>
238 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is</emphasis>
239 <emphasis class="comment">&#32;&#32;&#32;*&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of</emphasis>
240 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the</emphasis>
241 <emphasis class="comment">&#32;&#32;&#32;*&#32;input-connector&#32;cannot&#32;be&#32;changed).&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter</emphasis>
242 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;changed.&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
243 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
244 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;set_free_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value)&#32;=&#32;0;
245 <emphasis class="comment"></emphasis>
246 <emphasis class="comment">&#32;&#32;/**</emphasis>
247 <emphasis class="comment">&#32;&#32;&#32;*&#32;Using&#32;this&#32;method&#32;unifies&#32;the&#32;usage&#32;of&#32;coordinates.&#32;This&#32;function&#32;takes&#32;a</emphasis>
248 <emphasis class="comment">&#32;&#32;&#32;*&#32;global&#32;\f$z\f$&#32;coordinate&#32;(in&#32;the&#32;computational&#32;domain)&#32;and&#32;returns&#32;both&#32;a</emphasis>
249 <emphasis class="comment">&#32;&#32;&#32;*&#32;Sector-Index&#32;and&#32;an&#32;internal&#32;\f$z\f$&#32;coordinate&#32;indicating&#32;which&#32;sector</emphasis>
250 <emphasis class="comment">&#32;&#32;&#32;*&#32;this&#32;coordinate&#32;belongs&#32;to&#32;and&#32;how&#32;far&#32;along&#32;in&#32;the&#32;sector&#32;it&#32;is&#32;located.</emphasis>
251 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;double&#32;in_z&#32;global&#32;system&#32;\f$z\f$&#32;coordinate&#32;for&#32;the&#32;transformation.</emphasis>
252 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
253 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;Z_to_Sector_and_local_z(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
254 <emphasis class="comment"></emphasis>
255 <emphasis class="comment">&#32;&#32;/**</emphasis>
256 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;sector</emphasis>
257 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
258 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Sector_Length()&#32;<emphasis class="keyword">const</emphasis>;
259 <emphasis class="comment"></emphasis>
260 <emphasis class="comment">&#32;&#32;/**</emphasis>
261 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;radius&#32;for&#32;a&#32;system-coordinate;</emphasis>
262 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
263 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_r(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
264 <emphasis class="comment"></emphasis>
265 <emphasis class="comment">&#32;&#32;/**</emphasis>
266 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;shift&#32;for&#32;a&#32;system-coordinate;</emphasis>
267 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
268 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_m(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
269 <emphasis class="comment"></emphasis>
270 <emphasis class="comment">&#32;&#32;/**</emphasis>
271 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;tilt&#32;for&#32;a&#32;system-coordinate;</emphasis>
272 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
273 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_v(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
274 <emphasis class="comment"></emphasis>
275 <emphasis class="comment">&#32;&#32;/**</emphasis>
276 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;Method&#32;writes&#32;a&#32;comprehensive&#32;description&#32;of&#32;the&#32;current&#32;structure&#32;to</emphasis>
277 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;console.</emphasis>
278 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
279 &#32;&#32;<emphasis class="comment">//&#32;virtual&#32;void&#32;WriteConfigurationToConsole()=0;</emphasis>
280 
281 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;Z_to_Layer(<emphasis class="keywordtype">double</emphasis>)&#32;<emphasis class="keyword">const</emphasis>;
282 <emphasis class="comment"></emphasis>
283 <emphasis class="comment">&#32;&#32;/**</emphasis>
284 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;vector&#32;of&#32;values&#32;saves&#32;the&#32;initial&#32;configuration</emphasis>
285 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_space_transformation_1a8a478063942a7505170cf95406bac789">286 </link>&#32;&#32;Vector&lt;double&gt;&#32;<link linkend="class_space_transformation_1a8a478063942a7505170cf95406bac789">InitialDofs</link>;
287 <emphasis class="comment"></emphasis>
288 <emphasis class="comment">&#32;&#32;/**</emphasis>
289 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;vector&#32;of&#32;values&#32;saves&#32;the&#32;initial&#32;configuration</emphasis>
290 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_space_transformation_1a881cfdd7ec955dd57a2b463ed4707662">291 </link>&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_space_transformation_1a881cfdd7ec955dd57a2b463ed4707662">InitialQuality</link>;
292 <emphasis class="comment"></emphasis>
293 <emphasis class="comment">&#32;&#32;/**</emphasis>
294 <emphasis class="comment">&#32;&#32;&#32;*&#32;Other&#32;objects&#32;can&#32;use&#32;this&#32;function&#32;to&#32;retrieve&#32;an&#32;array&#32;of&#32;the&#32;current</emphasis>
295 <emphasis class="comment">&#32;&#32;&#32;*&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;of&#32;the&#32;functional&#32;we&#32;are&#32;optimizing.&#32;This</emphasis>
296 <emphasis class="comment">&#32;&#32;&#32;*&#32;also&#32;includes&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;and&#32;other&#32;functions&#32;can&#32;be&#32;used</emphasis>
297 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;determine&#32;this&#32;property.&#32;This&#32;has&#32;to&#32;be&#32;done&#32;because&#32;in&#32;different&#32;cases</emphasis>
298 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;number&#32;of&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;can&#32;vary&#32;and&#32;we&#32;want&#32;no&#32;logic</emphasis>
299 <emphasis class="comment">&#32;&#32;&#32;*&#32;about&#32;this&#32;in&#32;other&#32;functions.</emphasis>
300 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
301 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;Vector&lt;double&gt;&#32;Dofs()&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
302 <emphasis class="comment"></emphasis>
303 <emphasis class="comment">&#32;&#32;/**</emphasis>
304 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;number&#32;of&#32;unrestrained&#32;degrees&#32;of&#32;freedom&#32;of&#32;the</emphasis>
305 <emphasis class="comment">&#32;&#32;&#32;*&#32;current&#32;optimization&#32;run.</emphasis>
306 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
307 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NFreeDofs()&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
308 <emphasis class="comment"></emphasis>
309 <emphasis class="comment">&#32;&#32;/**</emphasis>
310 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;total&#32;number&#32;of&#32;DOFs&#32;including&#32;restrained&#32;ones.</emphasis>
311 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;the&#32;lenght&#32;of&#32;the&#32;array&#32;returned&#32;by&#32;Dofs().</emphasis>
312 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
313 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NDofs()&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
314 <emphasis class="comment"></emphasis>
315 <emphasis class="comment">&#32;&#32;/**</emphasis>
316 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;Dofs()&#32;also&#32;returns&#32;restrained&#32;degrees&#32;of&#32;freedom,&#32;this&#32;function&#32;can</emphasis>
317 <emphasis class="comment">&#32;&#32;&#32;*&#32;be&#32;applied&#32;to&#32;determine&#32;if&#32;a&#32;degree&#32;of&#32;freedom&#32;is&#32;indeed&#32;free&#32;or</emphasis>
318 <emphasis class="comment">&#32;&#32;&#32;*&#32;restrained.&#32;&quot;restrained&quot;&#32;means&#32;that&#32;for&#32;example&#32;the&#32;DOF&#32;represents&#32;the</emphasis>
319 <emphasis class="comment">&#32;&#32;&#32;*&#32;radius&#32;at&#32;one&#32;of&#32;the&#32;connectors&#32;(input&#32;or&#32;output)&#32;and&#32;therefore&#32;we&#32;forbid</emphasis>
320 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;optimization&#32;scheme&#32;to&#32;vary&#32;this&#32;value.</emphasis>
321 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
322 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;IsDofFree(<emphasis class="keywordtype">int</emphasis>)&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
323 <emphasis class="comment"></emphasis>
324 <emphasis class="comment">&#32;&#32;/**</emphasis>
325 <emphasis class="comment">&#32;&#32;&#32;*&#32;Console&#32;output&#32;of&#32;the&#32;current&#32;Waveguide&#32;Structure.</emphasis>
326 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
327 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;<emphasis class="keywordtype">void</emphasis>&#32;Print()&#32;<emphasis class="keyword">const</emphasis>&#32;=&#32;0;
328 <emphasis class="comment"></emphasis>
329 <emphasis class="comment">&#32;&#32;/**</emphasis>
330 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;the&#32;Wavegudie&#32;itself&#32;may&#32;be&#32;circular&#32;or&#32;rectangular&#32;now,&#32;the</emphasis>
331 <emphasis class="comment">&#32;&#32;&#32;*&#32;evaluation&#32;routines&#32;should&#32;be&#32;moved&#32;to&#32;a&#32;point&#32;in&#32;the&#32;code&#32;where&#32;this</emphasis>
332 <emphasis class="comment">&#32;&#32;&#32;*&#32;information&#32;is&#32;included&#32;in&#32;the&#32;code.&#32;Since&#32;I&#32;dont&#32;want&#32;to&#32;create&#32;derived</emphasis>
333 <emphasis class="comment">&#32;&#32;&#32;*&#32;classes&#32;from&#32;waveguide&#32;(which&#32;I&#32;should&#32;do&#32;eventually)&#32;I&#32;will&#32;for&#32;now</emphasis>
334 <emphasis class="comment">&#32;&#32;&#32;*&#32;include&#32;this&#32;functionality&#32;into&#32;the&#32;space&#32;transformation&#32;which&#32;is</emphasis>
335 <emphasis class="comment">&#32;&#32;&#32;*&#32;shape-sensitive.&#32;The&#32;waveguide&#32;only&#32;offers&#32;the&#32;evaluation&#32;at&#32;a&#32;point.&#32;The</emphasis>
336 <emphasis class="comment">&#32;&#32;&#32;*&#32;quadrature-rule&#32;has&#32;to&#32;be&#32;imposed&#32;by&#32;the&#32;space&#32;transformation.</emphasis>
337 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
338 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;std::complex&lt;double&gt;&#32;evaluate_for_z(<emphasis class="keywordtype">double</emphasis>,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*)&#32;=&#32;0;
339 
340 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z_with_sum(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
341 
342 &#32;&#32;std::complex&lt;double&gt;&#32;gauss_product_2D_sphere(<emphasis class="keywordtype">double</emphasis>&#32;z,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n,&#32;<emphasis class="keywordtype">double</emphasis>&#32;R,
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Xc,&#32;<emphasis class="keywordtype">double</emphasis>&#32;Yc,
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*in_w);
345 
346 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;rank;
347 };
348 
349 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
