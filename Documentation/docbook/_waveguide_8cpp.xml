<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_waveguide_8cpp">
    <title>Waveguide.cpp File Reference</title>
    <programlisting>#include &quot;Waveguide.h&quot;</programlisting>
    <programlisting>#include &lt;sys/time.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/timer.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/numerics/vector_tools.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/std_cxx11/bind.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/sparsity_tools.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/shared_tria.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_precondition.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/tria.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/tria_boundary_lib.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/block_sparsity_pattern.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/dynamic_sparsity_pattern.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_block_sparse_matrix.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/solver.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/numerics/data_out_dof_data.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/block_matrix_array.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/solver_bicgstab.h&gt;</programlisting>
    <programlisting>#include &lt;algorithm&gt;</programlisting>
    <programlisting>#include &lt;string&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &lt;utility&gt;</programlisting>
    <programlisting>#include &quot;SolutionWeight.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/SpaceTransformation.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/HomogenousTransformationCircular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/HomogenousTransformationRectangular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/InhomogenousTransformationCircular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/InhomogenousTransformationRectangular.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/ExactSolution.h&quot;</programlisting>
    <programlisting>#include &quot;PreconditionerSweeping.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_waveguide_8cpp_1a1167a41478148503119307d88cacdfcc">WaveguideCppFlag</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="_waveguide_8cpp_1ab4ae7205573977222eadd0795db193e2">steps</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="struct_parameters">Parameters</link> <link linkend="_waveguide_8cpp_1a76239e059c1f8545b24809e138decdb7">GlobalParams</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_mode_manager">ModeManager</link> <link linkend="_waveguide_8cpp_1a2540c1b01e5c3d0d044ed313cefb0e36">ModeMan</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::ConvergenceTable <link linkend="_waveguide_8cpp_1a85bc643b803a3dea5bb9135ff360cef4">Convergence_Table</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::TableHandler <link linkend="_waveguide_8cpp_1ac9986726c30e30de323acd6975664b9f">Optimization_Steps</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double * <link linkend="_waveguide_8cpp_1a50c05eebe0d325f44416da346c81c775">steps_widths</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Core/Waveguide.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">//&#32;Copyright&#32;2018&#32;Pascal&#32;Kraft</emphasis>
2 <emphasis class="preprocessor">#ifndef&#32;WaveguideCppFlag</emphasis>
3 <emphasis class="preprocessor">#define&#32;WaveguideCppFlag</emphasis>
4 
5 <emphasis class="preprocessor">#include&#32;&quot;Waveguide.h&quot;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;sys/time.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/timer.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;deal.II/numerics/vector_tools.h&gt;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/std_cxx11/bind.h&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/sparsity_tools.h&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/shared_tria.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_precondition.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/tria.h&gt;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/tria_boundary_lib.h&gt;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/block_sparsity_pattern.h&gt;</emphasis>
16 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/dynamic_sparsity_pattern.h&gt;</emphasis>
17 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_block_sparse_matrix.h&gt;</emphasis>
18 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/solver.h&gt;</emphasis>
19 <emphasis class="preprocessor">#include&#32;&lt;deal.II/numerics/data_out_dof_data.h&gt;</emphasis>
20 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/block_matrix_array.h&gt;</emphasis>
21 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/solver_bicgstab.h&gt;</emphasis>
22 <emphasis class="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
23 <emphasis class="preprocessor">#include&#32;&lt;string&gt;</emphasis>
24 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
25 <emphasis class="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
26 <emphasis class="preprocessor">#include&#32;&quot;SolutionWeight.h&quot;</emphasis>
27 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
28 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/SpaceTransformation.h&quot;</emphasis>
29 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/HomogenousTransformationCircular.h&quot;</emphasis>
30 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/HomogenousTransformationRectangular.h&quot;</emphasis>
31 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/InhomogenousTransformationCircular.h&quot;</emphasis>
32 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/InhomogenousTransformationRectangular.h&quot;</emphasis>
33 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/ExactSolution.h&quot;</emphasis>
34 <emphasis class="preprocessor">#include&#32;&quot;PreconditionerSweeping.h&quot;</emphasis>
35 
36 <emphasis class="keywordtype">int</emphasis>&#32;steps&#32;=&#32;0;
37 <link linkend="struct_parameters">Parameters</link>&#32;GlobalParams;
38 <link linkend="class_mode_manager">ModeManager</link>&#32;ModeMan;
39 dealii::ConvergenceTable&#32;Convergence_Table;
40 dealii::TableHandler&#32;Optimization_Steps;
41 <emphasis class="keywordtype">double</emphasis>&#32;*&#32;steps_widths;
42 
<link linkend="class_waveguide_1aacf2484e402aa1afc05b1b278ea8ce73">43 </link><link linkend="class_waveguide_1aacf2484e402aa1afc05b1b278ea8ce73">Waveguide::Waveguide</link>(MPI_Comm&#32;in_mpi_comm,&#32;<link linkend="class_mesh_generator">MeshGenerator</link>&#32;*&#32;in_mg,
44 &#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*&#32;in_st):
45 &#32;&#32;fe(FE_Nedelec&lt;3&gt;(GlobalParams.So_ElementOrder),&#32;2),
46 &#32;&#32;&#32;&#32;triangulation(
47 &#32;&#32;&#32;&#32;in_mpi_comm,
48 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::MeshSmoothing(
49 &#32;&#32;&#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::none),
50 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::Settings::no_automatic_repartitioning),
51 &#32;&#32;&#32;&#32;even(Utilities::MPI::this_mpi_process(in_mpi_comm)%2&#32;==&#32;0),
52 &#32;&#32;&#32;&#32;rank(Utilities::MPI::this_mpi_process(in_mpi_comm)),
53 &#32;&#32;&#32;&#32;real(0),
54 &#32;&#32;&#32;&#32;imag(3),
55 &#32;&#32;&#32;&#32;solver_control(
56 &#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.So_TotalSteps,
57 &#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.So_Precision,
58 &#32;&#32;&#32;&#32;&#32;&#32;true,
59 &#32;&#32;&#32;&#32;&#32;&#32;true),
60 &#32;&#32;&#32;&#32;dof_handler(triangulation),
61 &#32;&#32;&#32;&#32;run_number(0),
62 &#32;&#32;&#32;&#32;condition_file_counter(0),
63 &#32;&#32;&#32;&#32;eigenvalue_file_counter(0),
64 &#32;&#32;&#32;&#32;Layers(GlobalParams.NumberProcesses),
65 &#32;&#32;&#32;&#32;Dofs_Below_Subdomain(Layers),
66 &#32;&#32;&#32;&#32;Block_Sizes(Layers),
67 &#32;&#32;&#32;&#32;is_stored(false),
68 &#32;&#32;&#32;&#32;Sectors(GlobalParams.M_W_Sectors),
69 &#32;&#32;&#32;&#32;minimum_local_z(2.0&#32;*&#32;GlobalParams.M_R_ZLength),
70 &#32;&#32;&#32;&#32;maximum_local_z(-&#32;2.0&#32;*&#32;GlobalParams.M_R_ZLength),
71 &#32;&#32;&#32;&#32;pout(<link linkend="namespacestd">std</link>::cout,&#32;rank&#32;==&#32;0),
72 &#32;&#32;&#32;&#32;timer(in_mpi_comm,
73 &#32;&#32;&#32;&#32;&#32;&#32;pout,
74 &#32;&#32;&#32;&#32;&#32;&#32;TimerOutput::OutputFrequency::summary,
75 &#32;&#32;&#32;&#32;&#32;&#32;TimerOutput::wall_times),
76 &#32;&#32;&#32;&#32;es(GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Rectangle){
77 &#32;&#32;mg&#32;=&#32;in_mg;
78 &#32;&#32;st&#32;=&#32;in_st;
79 &#32;&#32;mpi_comm&#32;=&#32;in_mpi_comm;
80 &#32;&#32;solution&#32;=&#32;NULL;
81 &#32;&#32;is_stored&#32;=&#32;<emphasis class="keyword">false</emphasis>;
82 &#32;&#32;solver_control.log_frequency(10);
83 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;number&#32;=&#32;Layers&#32;-1;
84 &#32;&#32;qualities&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[number];
85 &#32;&#32;execute_recomputation&#32;=&#32;<emphasis class="keyword">false</emphasis>;
86 &#32;&#32;mkdir((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+<emphasis class="stringliteral">&quot;primal&quot;</emphasis>).c_str(),&#32;ACCESSPERMS);
87 &#32;&#32;mkdir((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+<emphasis class="stringliteral">&quot;dual&quot;</emphasis>).c_str(),&#32;ACCESSPERMS);
88 
89 }
90 
91 Waveguide::~Waveguide()&#32;{
92 }
93 
<link linkend="class_waveguide_1a79986c7554f0cd73cb13a3494caf6eab">94 </link>std::complex&lt;double&gt;&#32;<link linkend="class_waveguide_1a79986c7554f0cd73cb13a3494caf6eab">Waveguide::evaluate_for_Position</link>(
95 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;x,
96 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;y,
97 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;{
98 &#32;&#32;dealii::Point&lt;3,&#32;double&gt;&#32;position(x,&#32;y,&#32;z);
99 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
100 &#32;&#32;Vector&lt;double&gt;&#32;mode(6);
101 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
102 &#32;&#32;&#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_with_relevant,&#32;position,&#32;result);
103 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
104 &#32;&#32;&#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_solution,&#32;position,&#32;result);
105 &#32;&#32;}
106 &#32;&#32;position[2]&#32;=&#32;GlobalParams.Minimum_Z;
107 &#32;&#32;this-&gt;es.<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(position,&#32;mode);
108 
109 &#32;&#32;std::complex&lt;double&gt;&#32;c1(result(0),&#32;result(3));
110 &#32;&#32;std::complex&lt;double&gt;&#32;c2(result(1),&#32;result(4));
111 &#32;&#32;std::complex&lt;double&gt;&#32;c3(result(2),&#32;result(5));
112 &#32;&#32;std::complex&lt;double&gt;&#32;m1(mode(0),&#32;mode(3));
113 &#32;&#32;std::complex&lt;double&gt;&#32;m2(mode(1),&#32;mode(4));
114 &#32;&#32;std::complex&lt;double&gt;&#32;m3(mode(2),&#32;mode(5));
115 
116 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;m1&#32;*&#32;c1&#32;+&#32;m2*c2&#32;+&#32;m3*c3;
117 }
118 
<link linkend="class_waveguide_1aecce672b929c81b8966198043bff646a">119 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_waveguide_1aecce672b929c81b8966198043bff646a">Waveguide::estimate_solution</link>()&#32;{
120 &#32;&#32;MPI_Barrier(mpi_comm);
121 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;estimate_solution&quot;</emphasis>);
122 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Starting&#32;solution&#32;estimation...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
123 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
124 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Lambda:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;GlobalParams.M_W_Lambda&#32;&lt;&lt;&#32;std::endl;
125 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;min_dof&#32;=&#32;locally_owned_dofs.nth_index_in_set(0);
126 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;max_dof&#32;=&#32;locally_owned_dofs.nth_index_in_set(
127 &#32;&#32;&#32;&#32;locally_owned_dofs.n_elements()-1);
128 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),
129 &#32;&#32;endc&#32;=&#32;dof_handler.end();
130 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
131 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_dof_indices(fe.dofs_per_line);
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_dof_indices);
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;double&gt;&#32;ptemp&#32;=((cell-&gt;face(i))-&gt;line(j))-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(ptemp[2]&#32;-&#32;GlobalParams.Minimum_Z)&#32;&gt;&#32;0.0001)&#32;{
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;p(ptemp[0],&#32;ptemp[1],&#32;ptemp[2]);
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;double&gt;&#32;dtemp&#32;=((cell-&gt;face(i))-&gt;line(j))-&gt;vertex(0)&#32;-((cell-&gt;face(i))-&gt;line(j))-&gt;vertex(1);
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dtemp&#32;=&#32;dtemp&#32;/&#32;dtemp.norm();
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;direction(dtemp[0],&#32;dtemp[1],&#32;dtemp[2]);
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&lt;double&gt;&#32;val(6);
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;es.<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(p,&#32;val);
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;a&#32;=&#32;direction(0)&#32;*&#32;val(0)&#32;+&#32;direction(1)*&#32;val(1)&#32;+&#32;direction(2)*val(2);
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;b&#32;=&#32;direction(0)&#32;*&#32;val(3)&#32;+&#32;direction(1)*&#32;val(4)&#32;+&#32;direction(2)*val(5);
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(local_dof_indices[0]&#32;&gt;=&#32;min_dof&#32;&amp;&amp;&#32;local_dof_indices[0]&#32;&lt;&#32;max_dof)&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EstimatedSolution[local_dof_indices[0]]&#32;=&#32;a;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(local_dof_indices[1]&#32;&gt;=&#32;min_dof&#32;&amp;&amp;&#32;local_dof_indices[1]&#32;&lt;&#32;max_dof)&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EstimatedSolution[local_dof_indices[1]]&#32;=&#32;b;
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;&#32;&#32;}
155 &#32;&#32;&#32;&#32;}
156 &#32;&#32;}
157 &#32;&#32;MPI_Barrier(mpi_comm);
158 &#32;&#32;EstimatedSolution.compress(VectorOperation::insert);
159 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
160 &#32;&#32;deallog.pop();
161 }
162 
163 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::Conjugate_Tensor(
164 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;input)&#32;{
165 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
166 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
167 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j=0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;ret[i][j].real(input[i][j].real());
169 &#32;&#32;&#32;&#32;&#32;&#32;ret[i][j].imag(-input[i][j].imag());
170 &#32;&#32;&#32;&#32;}
171 &#32;&#32;}
172 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
173 }
174 
175 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::Conjugate_Vector(Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;input)&#32;{
176 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
177 
178 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
179 &#32;&#32;&#32;&#32;ret[i].real(input[i].real());
180 &#32;&#32;&#32;&#32;ret[i].imag(-input[i].imag());
181 &#32;&#32;}
182 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
183 }
184 
185 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::make_grid()&#32;{
186 &#32;&#32;mg-&gt;<link linkend="class_mesh_generator_1aa3a673744db2c5ad3e6fae65af4afb6b">prepare_triangulation</link>(&amp;&#32;triangulation);
187 &#32;&#32;dof_handler.distribute_dofs(fe);
188 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::active_cell_iterator
189 &#32;&#32;&#32;&#32;cell&#32;=&#32;triangulation.begin_active(),
190 &#32;&#32;&#32;&#32;endc&#32;=&#32;triangulation.end();
191 &#32;&#32;minimum_local_z&#32;=&#32;2.0&#32;*&#32;GlobalParams.M_R_ZLength;
192 &#32;&#32;maximum_local_z&#32;=&#32;-&#32;2.0&#32;*&#32;GlobalParams.M_R_ZLength;
193 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell!=&#32;endc;&#32;++cell)&#32;{
194 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;temp&#32;=(cell-&gt;face(i)-&gt;center())[2];
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(temp&#32;&lt;&#32;minimum_local_z)&#32;minimum_local_z&#32;=&#32;temp;
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(temp&#32;&gt;&#32;maximum_local_z)&#32;maximum_local_z&#32;=&#32;temp;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
200 &#32;&#32;&#32;&#32;}
201 &#32;&#32;}
202 
203 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Process&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;GlobalParams.MPI_Rank&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;as&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&#32;The&#32;local&#32;range&#32;is&#32;[&quot;</emphasis>&lt;&lt;&#32;minimum_local_z&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,&quot;</emphasis>&#32;&lt;&lt;&#32;maximum_local_z&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;]&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
204 }
205 
206 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::Compute_Dof_Numbers()&#32;{
207 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;dof_indices(fe.dofs_per_face);
208 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;DofsPerSubdomain(Layers);
209 &#32;&#32;std::vector&lt;int&gt;&#32;InternalBoundaryDofs(Layers);
210 
211 &#32;&#32;DofsPerSubdomain&#32;=&#32;dof_handler.n_locally_owned_dofs_per_processor();
212 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
213 &#32;&#32;&#32;&#32;Block_Sizes[i]&#32;=&#32;DofsPerSubdomain[i];
214 &#32;&#32;}
215 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Layers:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Layers&#32;&lt;&lt;std::endl;
216 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
217 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;Block_Sizes[i]&lt;&lt;&#32;std::endl;
218 &#32;&#32;}
219 
220 
221 &#32;&#32;Dofs_Below_Subdomain[0]&#32;=&#32;0;
222 
223 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&#32;&lt;&#32;Layers;&#32;i++)&#32;{
224 &#32;&#32;&#32;&#32;Dofs_Below_Subdomain[i]&#32;=&#32;Dofs_Below_Subdomain[i-1]&#32;+&#32;Block_Sizes[i-1];
225 &#32;&#32;}
226 
227 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
228 &#32;&#32;&#32;&#32;IndexSet&#32;temp(dof_handler.n_dofs());
229 &#32;&#32;&#32;&#32;temp.clear();
230 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Adding&#32;Block&#32;&quot;</emphasis>&lt;&lt;&#32;i&#32;+1&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]+&#32;Block_Sizes[i]&#32;-1&#32;&lt;&lt;&#32;std::endl;
231 &#32;&#32;&#32;&#32;temp.add_range(Dofs_Below_Subdomain[i],&#32;Dofs_Below_Subdomain[i]+Block_Sizes[i]);
232 &#32;&#32;&#32;&#32;<emphasis class="keyword">set</emphasis>.push_back(temp);
233 &#32;&#32;}
234 }
235 
236 IndexSet&#32;Waveguide::combine_indexes(IndexSet&#32;lower,&#32;IndexSet&#32;upper)<emphasis class="keyword">&#32;const&#32;</emphasis>{
237 &#32;&#32;IndexSet&#32;ret(lower.size()&#32;+&#32;upper.size());
238 &#32;&#32;ret.add_indices(lower);
239 &#32;&#32;ret.add_indices(upper,&#32;lower.size());
240 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
241 }
242 
243 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::switch_to_primal(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*&#32;primal_st)&#32;{
244 &#32;&#32;st&#32;=&#32;primal_st;
245 &#32;&#32;solution&#32;=&#32;&amp;&#32;primal_solution;
246 &#32;&#32;primal&#32;=&#32;<emphasis class="keyword">true</emphasis>;
247 &#32;&#32;path_prefix&#32;=&#32;<emphasis class="stringliteral">&quot;primal&quot;</emphasis>;
248 }
249 
250 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::switch_to_dual(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*&#32;dual_st)&#32;{
251 &#32;&#32;st&#32;=&#32;dual_st;
252 &#32;&#32;solution&#32;=&#32;&amp;&#32;dual_solution;
253 &#32;&#32;primal&#32;=&#32;<emphasis class="keyword">false</emphasis>;
254 &#32;&#32;path_prefix&#32;=&#32;<emphasis class="stringliteral">&quot;dual&quot;</emphasis>;
255 }
256 
257 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::setup_system()&#32;{
258 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;setup_system&quot;</emphasis>);
259 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Assembling&#32;IndexSets&quot;</emphasis>&#32;&lt;&lt;std::endl;
260 &#32;&#32;locally_owned_dofs&#32;=&#32;dof_handler.locally_owned_dofs();
261 &#32;&#32;DoFTools::extract_locally_active_dofs(dof_handler,&#32;locally_active_dofs);
262 &#32;&#32;DoFTools::extract_locally_relevant_dofs(dof_handler,&#32;locally_relevant_dofs);
263 &#32;&#32;std::vector&lt;unsigned&#32;int&gt;&#32;n_neighboring&#32;=&#32;dof_handler.n_locally_owned_dofs_per_processor();
264 &#32;&#32;extended_relevant_dofs&#32;=&#32;locally_relevant_dofs;
265 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&gt;&#32;0)&#32;{
266 &#32;&#32;&#32;&#32;extended_relevant_dofs.add_range(locally_owned_dofs.nth_index_in_set(0)&#32;-&#32;n_neighboring[rank-1],&#32;locally_owned_dofs.nth_index_in_set(0));
267 &#32;&#32;}
268 
269 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Computing&#32;block&#32;counts&quot;</emphasis>&#32;&lt;&lt;std::endl;
270 &#32;&#32;<emphasis class="comment">//&#32;Here&#32;we&#32;start&#32;computing&#32;the&#32;distribution&#32;of&#32;entries(indices&#32;thereof)&#32;to&#32;the&#32;specific&#32;blocks&#32;of&#32;the&#32;3&#32;matrices(system&#32;matrix&#32;and&#32;the&#32;2&#32;preconditioner&#32;matrices.)</emphasis>
271 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;prec_even_block_count&#32;=&#32;Utilities::MPI::n_mpi_processes(mpi_comm)&#32;/2;
272 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Utilities::MPI::n_mpi_processes(mpi_comm)%2&#32;==&#32;1)&#32;{
273 &#32;&#32;&#32;&#32;prec_even_block_count++;
274 &#32;&#32;}
275 
276 &#32;&#32;i_sys_owned.resize(Layers);
277 
278 &#32;&#32;i_sys_readable.resize(Layers);
279 
280 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
281 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;size&#32;=&#32;Block_Sizes[i];
282 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;local&#32;=(i&#32;==&#32;rank);
283 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;readable&#32;=(i&#32;==&#32;rank)&#32;||(i&#32;==&#32;rank+1);
284 &#32;&#32;&#32;&#32;IndexSet&#32;temp(size);
285 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(local)&#32;{
286 &#32;&#32;&#32;&#32;&#32;&#32;temp.add_range(0,&#32;size);
287 &#32;&#32;&#32;&#32;}
288 &#32;&#32;&#32;&#32;IndexSet&#32;temp2(size);
289 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(readable)&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;temp2.add_range(0,&#32;size);
291 &#32;&#32;&#32;&#32;}
292 
293 &#32;&#32;&#32;&#32;i_sys_owned[i]&#32;=&#32;temp;
294 &#32;&#32;&#32;&#32;i_sys_readable[i]&#32;=&#32;temp2;
295 &#32;&#32;}
296 
297 &#32;&#32;i_prec_even_owned_row.resize(Layers);
298 &#32;&#32;i_prec_even_owned_col.resize(Layers);
299 &#32;&#32;i_prec_even_writable.resize(Layers);
300 &#32;&#32;i_prec_odd_owned_row.resize(Layers);
301 &#32;&#32;i_prec_odd_owned_col.resize(Layers);
302 &#32;&#32;i_prec_odd_writable.resize(Layers);
303 
304 
305 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
306 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;size&#32;=&#32;Block_Sizes[i];
307 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;even_row_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
308 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">false</emphasis>;
309 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;even_col_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
310 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;+1)&#32;{
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_col_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
315 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;-1)&#32;{
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
319 &#32;&#32;&#32;&#32;&#32;&#32;}
320 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;-1)&#32;{
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
323 &#32;&#32;&#32;&#32;&#32;&#32;}
324 &#32;&#32;&#32;&#32;}
325 &#32;&#32;&#32;&#32;IndexSet&#32;ero(size);
326 &#32;&#32;&#32;&#32;IndexSet&#32;erw(size);
327 &#32;&#32;&#32;&#32;IndexSet&#32;eco(size);
328 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even_row_owned)&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;ero.add_range(0,&#32;size);
330 &#32;&#32;&#32;&#32;}
331 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even_row_writable)&#32;{
332 &#32;&#32;&#32;&#32;&#32;&#32;erw.add_range(0,&#32;size);
333 &#32;&#32;&#32;&#32;}
334 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even_col_owned)&#32;{
335 &#32;&#32;&#32;&#32;&#32;&#32;eco.add_range(0,&#32;size);
336 &#32;&#32;&#32;&#32;}
337 
338 &#32;&#32;&#32;&#32;i_prec_even_owned_row[i]&#32;=&#32;ero;
339 &#32;&#32;&#32;&#32;i_prec_even_owned_col[i]&#32;=&#32;eco;
340 &#32;&#32;&#32;&#32;i_prec_even_writable[i]&#32;=&#32;erw;
341 &#32;&#32;}
342 
343 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
344 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;size&#32;=&#32;Block_Sizes[i];
345 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;odd_row_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
346 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">false</emphasis>;
347 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;odd_col_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
348 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!even)&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;+1)&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_col_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
353 &#32;&#32;&#32;&#32;&#32;&#32;}
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;-1)&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
356 &#32;&#32;&#32;&#32;&#32;&#32;}
357 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;-1)&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
360 &#32;&#32;&#32;&#32;&#32;&#32;}
361 &#32;&#32;&#32;&#32;}
362 &#32;&#32;&#32;&#32;IndexSet&#32;oro(size);
363 &#32;&#32;&#32;&#32;IndexSet&#32;orw(size);
364 &#32;&#32;&#32;&#32;IndexSet&#32;oco(size);
365 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(odd_row_owned)&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;oro.add_range(0,&#32;size);
367 &#32;&#32;&#32;&#32;}
368 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(odd_row_writable)&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;orw.add_range(0,&#32;size);
370 &#32;&#32;&#32;&#32;}
371 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(odd_col_owned)&#32;{
372 &#32;&#32;&#32;&#32;&#32;&#32;oco.add_range(0,&#32;size);
373 &#32;&#32;&#32;&#32;}
374 
375 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;==&#32;0)&#32;{
376 &#32;&#32;&#32;&#32;&#32;&#32;oro.add_range(0,&#32;size);
377 &#32;&#32;&#32;&#32;&#32;&#32;orw.add_range(0,&#32;size);
378 &#32;&#32;&#32;&#32;&#32;&#32;oco.add_range(0,&#32;size);
379 &#32;&#32;&#32;&#32;}
380 
381 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;Layers-1&#32;&amp;&amp;&#32;i&#32;==&#32;Layers-1)&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;oro.add_range(0,&#32;size);
383 &#32;&#32;&#32;&#32;&#32;&#32;orw.add_range(0,&#32;size);
384 &#32;&#32;&#32;&#32;&#32;&#32;oco.add_range(0,&#32;size);
385 &#32;&#32;&#32;&#32;}
386 
387 &#32;&#32;&#32;&#32;i_prec_odd_owned_row[i]&#32;=&#32;oro;
388 &#32;&#32;&#32;&#32;i_prec_odd_owned_col[i]&#32;=&#32;oco;
389 &#32;&#32;&#32;&#32;i_prec_odd_writable[i]&#32;=&#32;orw;
390 &#32;&#32;}
391 
392 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;even_blocks&#32;=&#32;GlobalParams.NumberProcesses&#32;/2;
393 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;odd_blocks&#32;=&#32;GlobalParams.NumberProcesses&#32;/&#32;2;
394 
395 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;1)&#32;{
396 &#32;&#32;&#32;&#32;even_blocks++;
397 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
398 &#32;&#32;&#32;&#32;odd_blocks++;
399 &#32;&#32;}
400 
401 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;temp0&#32;=&#32;i_prec_odd_owned_row;
402 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;temp1&#32;=&#32;i_prec_odd_owned_col;
403 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;temp2&#32;=&#32;i_prec_odd_writable;
404 &#32;&#32;i_prec_odd_owned_row.clear();
405 &#32;&#32;i_prec_odd_owned_col.clear();
406 &#32;&#32;i_prec_odd_writable.clear();
407 &#32;&#32;i_prec_odd_owned_row.push_back(temp0[0]);
408 &#32;&#32;i_prec_odd_owned_col.push_back(temp1[0]);
409 &#32;&#32;i_prec_odd_writable.push_back(temp2[0]);
410 
411 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;2;&#32;i&#32;&lt;&#32;static_cast&lt;int&gt;(Layers);&#32;i+=2)&#32;{
412 &#32;&#32;&#32;&#32;i_prec_odd_owned_row.push_back(combine_indexes(temp0[i-1],&#32;temp0[i]));
413 &#32;&#32;&#32;&#32;i_prec_odd_owned_col.push_back(combine_indexes(temp1[i-1],&#32;temp1[i]));
414 &#32;&#32;&#32;&#32;i_prec_odd_writable.push_back(combine_indexes(temp2[i-1],&#32;temp2[i]));
415 &#32;&#32;}
416 
417 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;0)&#32;{
418 &#32;&#32;&#32;&#32;i_prec_odd_owned_row.push_back(temp0[GlobalParams.NumberProcesses-1]);
419 &#32;&#32;&#32;&#32;i_prec_odd_owned_col.push_back(temp1[GlobalParams.NumberProcesses-1]);
420 &#32;&#32;&#32;&#32;i_prec_odd_writable.push_back(temp2[GlobalParams.NumberProcesses-1]);
421 &#32;&#32;}
422 
423 &#32;&#32;temp0&#32;=&#32;i_prec_even_owned_row;
424 &#32;&#32;temp1&#32;=&#32;i_prec_even_owned_col;
425 &#32;&#32;temp2&#32;=&#32;i_prec_even_writable;
426 
427 &#32;&#32;i_prec_even_owned_row.clear();
428 &#32;&#32;i_prec_even_owned_col.clear();
429 &#32;&#32;i_prec_even_writable.clear();
430 
431 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;static_cast&lt;int&gt;(Layers);&#32;i+=2)&#32;{
432 &#32;&#32;&#32;&#32;i_prec_even_owned_row.push_back(combine_indexes(temp0[i-1],&#32;temp0[i]));
433 &#32;&#32;&#32;&#32;i_prec_even_owned_col.push_back(combine_indexes(temp1[i-1],&#32;temp1[i]));
434 &#32;&#32;&#32;&#32;i_prec_even_writable.push_back(combine_indexes(temp2[i-1],&#32;temp2[i]));
435 &#32;&#32;}
436 
437 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;1)&#32;{
438 &#32;&#32;&#32;&#32;i_prec_even_owned_row.push_back(temp0[GlobalParams.NumberProcesses-1]);
439 &#32;&#32;&#32;&#32;i_prec_even_owned_col.push_back(temp1[GlobalParams.NumberProcesses-1]);
440 &#32;&#32;&#32;&#32;i_prec_even_writable.push_back(temp2[GlobalParams.NumberProcesses-1]);
441 &#32;&#32;}
442 
443 &#32;&#32;Prepare_Boundary_Constraints();
444 
445 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Boundaryconditions&#32;prepared.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
446 
447 &#32;&#32;std::ostringstream&#32;set_string;
448 
449 &#32;&#32;locally_owned_dofs.write(set_string);
450 
451 &#32;&#32;std::string&#32;local_set&#32;=&#32;set_string.str();
452 
453 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*&#32;test&#32;=&#32;local_set.c_str();
454 
455 &#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;*&#32;text_local_set&#32;=&#32;<emphasis class="keyword">const_cast&lt;</emphasis><emphasis class="keywordtype">char</emphasis>*<emphasis class="keyword">&gt;</emphasis>(test);
456 
457 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;text_local_length&#32;=&#32;strlen(text_local_set);
458 
459 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;mpi_size&#32;=&#32;Layers;
460 
461 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;*&#32;all_lens&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>[mpi_size];
462 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;*&#32;displs&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>[mpi_size];
463 
464 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Communicating&#32;the&#32;Index&#32;Sets&#32;via&#32;MPI&quot;</emphasis>&#32;&lt;&lt;std::endl;
465 
466 &#32;&#32;MPI_Allgather(&amp;&#32;text_local_length,&#32;1,&#32;MPI_INT,&#32;all_lens,&#32;1,&#32;MPI_INT,&#32;mpi_comm);
467 
468 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;totlen&#32;=&#32;all_lens[mpi_size-1];
469 &#32;&#32;displs[0]&#32;=&#32;0;
470 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;mpi_size-1;&#32;i++)&#32;{
471 &#32;&#32;&#32;&#32;displs[i+1]&#32;=&#32;displs[i]&#32;+&#32;all_lens[i];
472 &#32;&#32;&#32;&#32;totlen&#32;+=&#32;all_lens[i];
473 &#32;&#32;}
474 &#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;*&#32;all_names&#32;=&#32;<emphasis class="keyword">reinterpret_cast&lt;</emphasis><emphasis class="keywordtype">char</emphasis>*<emphasis class="keyword">&gt;</emphasis>(malloc(totlen));
475 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!all_names)&#32;MPI_Abort(&#32;mpi_comm,&#32;1);
476 
477 &#32;&#32;MPI_Allgatherv(text_local_set,&#32;text_local_length,&#32;MPI_CHAR,&#32;all_names,&#32;all_lens,&#32;displs,&#32;MPI_CHAR,&#32;mpi_comm);
478 
479 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Updating&#32;local&#32;structures&#32;with&#32;information&#32;from&#32;the&#32;other&#32;processes&quot;</emphasis>&#32;&lt;&lt;std::endl;
480 
481 &#32;&#32;locally_relevant_dofs_all_processors.resize(Layers);
482 
483 
484 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
485 &#32;&#32;&#32;&#32;std::istringstream&#32;ss;
486 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;*temp&#32;=&#32;&amp;all_names[displs[i]];
487 &#32;&#32;&#32;&#32;ss.rdbuf()-&gt;pubsetbuf(temp,&#32;strlen(temp));
488 &#32;&#32;&#32;&#32;locally_relevant_dofs_all_processors[i].clear();
489 &#32;&#32;&#32;&#32;locally_relevant_dofs_all_processors[i].set_size(dof_handler.n_dofs());
490 &#32;&#32;&#32;&#32;locally_relevant_dofs_all_processors[i].read(ss);
491 &#32;&#32;}
492 
493 &#32;&#32;UpperDofs&#32;=&#32;locally_owned_dofs;
494 
495 &#32;&#32;LowerDofs&#32;=&#32;locally_owned_dofs;
496 
497 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
498 &#32;&#32;&#32;&#32;LowerDofs.add_indices(locally_relevant_dofs_all_processors[rank-1],&#32;0);
499 &#32;&#32;}
500 
501 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;Layers&#32;-1)&#32;{
502 &#32;&#32;&#32;&#32;UpperDofs.add_indices(locally_relevant_dofs_all_processors[rank+1],&#32;0);
503 &#32;&#32;}
504 
505 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&#32;computing&#32;Index&#32;Sets.&#32;Calling&#32;for&#32;reinit&#32;now.&quot;</emphasis>&#32;&lt;&lt;std::endl;
506 
507 &#32;&#32;reinit_all();
508 
509 &#32;&#32;deallog&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
510 &#32;&#32;deallog.pop();
511 }
512 
513 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::Prepare_Boundary_Constraints()&#32;{
514 &#32;&#32;cm.clear();
515 &#32;&#32;cm.reinit(locally_relevant_dofs);
516 
517 &#32;&#32;cm_prec_even.clear();
518 &#32;&#32;cm_prec_odd.clear();
519 &#32;&#32;cm_prec_even.reinit(locally_relevant_dofs);
520 &#32;&#32;cm_prec_odd.reinit(locally_relevant_dofs);
521 
522 &#32;&#32;DoFTools::make_hanging_node_constraints(dof_handler,&#32;cm);
523 &#32;&#32;DoFTools::make_hanging_node_constraints(dof_handler,&#32;cm_prec_even);
524 &#32;&#32;DoFTools::make_hanging_node_constraints(dof_handler,&#32;cm_prec_odd);
525 
526 &#32;&#32;MakeBoundaryConditions();
527 &#32;&#32;MakePreconditionerBoundaryConditions();
528 
529 &#32;&#32;cm.close();
530 &#32;&#32;cm_prec_even.close();
531 &#32;&#32;cm_prec_odd.close();
532 }
533 
534 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::calculate_cell_weights()&#32;{
535 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Computing&#32;cell&#32;weights&quot;</emphasis>);
536 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Iterating&#32;cells&#32;and&#32;computing&#32;local&#32;norm&#32;of&#32;material&#32;tensor.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
537 &#32;&#32;cell&#32;=&#32;triangulation.begin_active();
538 &#32;&#32;endc&#32;=&#32;triangulation.end();
539 
540 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
541 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;tens,&#32;epsilon_pre2,&#32;epsilon_pre1;
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;pos&#32;=&#32;cell-&gt;center();
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Tensor(pos);
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Preconditioner_Tensor(pos,&#32;rank);
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Tensor(pos);
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Preconditioner_Tensor(pos,&#32;rank);
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tens&#32;=&#32;st-&gt;get_Tensor(pos);
553 
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_weights(cell-&gt;active_cell_index())&#32;=&#32;tens.norm();
555 
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_weights_prec_1(cell-&gt;active_cell_index())&#32;=&#32;epsilon_pre1.norm();
557 
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_weights_prec_2(cell-&gt;active_cell_index())&#32;=&#32;epsilon_pre2.norm();
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
560 &#32;&#32;}
561 
562 &#32;&#32;DataOut&lt;3&gt;&#32;data_out_cells;
563 &#32;&#32;data_out_cells.attach_dof_handler(dof_handler);
564 &#32;&#32;data_out_cells.add_data_vector(cell_weights,&#32;<emphasis class="stringliteral">&quot;Material_Tensor_Norm&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_cell_data);
565 &#32;&#32;data_out_cells.add_data_vector(cell_weights_prec_1,&#32;<emphasis class="stringliteral">&quot;Material_Tensor_Prec_Low&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_cell_data);
566 &#32;&#32;data_out_cells.add_data_vector(cell_weights_prec_2,&#32;<emphasis class="stringliteral">&quot;Material_Tensor_Prec_Up&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_cell_data);
567 &#32;&#32;data_out_cells.build_patches();
568 
569 &#32;&#32;std::string&#32;path&#32;=&#32;solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+<emphasis class="stringliteral">&quot;/cell-weights&quot;</emphasis>&#32;+&#32;std::to_string(run_number)&#32;+<emphasis class="stringliteral">&quot;-&quot;</emphasis>&#32;+&#32;std::to_string(rank)&#32;+<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>;
570 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Writing&#32;vtu&#32;file:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;path&#32;&lt;&lt;&#32;std::endl;
571 &#32;&#32;std::ofstream&#32;outputvtu2(path);
572 &#32;&#32;data_out_cells.write_vtu(outputvtu2);
573 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
574 &#32;&#32;deallog.pop();
575 }
576 
577 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_all()&#32;{
578 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;reinit_all&quot;</emphasis>);
579 
580 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;right-hand&#32;side&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
581 &#32;&#32;reinit_rhs();
582 
583 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.O_O_V_T_TransformationWeightsAll)&#32;{
584 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;cell&#32;weights&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
585 &#32;&#32;&#32;&#32;reinit_cell_weights();
586 &#32;&#32;}
587 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.O_O_V_T_TransformationWeightsFirst&#32;&amp;&amp;&#32;run_number&#32;==&#32;0)&#32;{
588 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;cell&#32;weights&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
589 &#32;&#32;&#32;&#32;&#32;&#32;reinit_cell_weights();
590 &#32;&#32;&#32;&#32;}
591 
592 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;solutiuon&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
593 &#32;&#32;reinit_solution();
594 
595 &#32;&#32;deallog&#32;&lt;&lt;<emphasis class="stringliteral">&quot;reinitializing&#32;preconditioner&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
596 &#32;&#32;reinit_preconditioner();
597 
598 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;system&#32;matrix&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
599 &#32;&#32;reinit_systemmatrix();
600 
601 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;std::endl;
602 &#32;&#32;deallog.pop();
603 }
604 
605 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_for_rerun()&#32;{
606 &#32;&#32;reinit_rhs();
607 &#32;&#32;reinit_preconditioner_fast();
608 &#32;&#32;reinit_systemmatrix();
609 }
610 
611 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_systemmatrix()&#32;{
612 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;reinit_systemmatrix&quot;</emphasis>);
613 
614 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Generating&#32;BSP&quot;</emphasis>&#32;&lt;&lt;std::endl;
615 
616 &#32;&#32;TrilinosWrappers::BlockSparsityPattern&#32;sp(i_sys_owned,&#32;MPI_COMM_WORLD);
617 
618 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Collecting&#32;sizes&#32;...&quot;</emphasis>&#32;&lt;&lt;std::endl;
619 
620 &#32;&#32;sp.collect_sizes();
621 
622 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Making&#32;BSP&#32;...&quot;</emphasis>&#32;&lt;&lt;std::endl;
623 &#32;&#32;DoFTools::make_sparsity_pattern(dof_handler,&#32;sp,&#32;cm,&#32;<emphasis class="keyword">false</emphasis>,&#32;rank);
624 &#32;&#32;sp.compress();
625 
626 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Initializing&#32;system_matrix&#32;...&quot;</emphasis>&#32;&lt;&lt;std::endl;
627 &#32;&#32;system_matrix.reinit(sp);
628 &#32;&#32;deallog.pop();
629 }
630 
631 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_rhs()&#32;{
632 &#32;&#32;system_rhs.reinit(i_sys_owned,&#32;MPI_COMM_WORLD);
633 
634 &#32;&#32;preconditioner_rhs.reinit(dof_handler.n_dofs());
635 }
636 
637 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_solution()&#32;{
638 &#32;&#32;solution-&gt;reinit(i_sys_owned,&#32;i_sys_readable,&#32;mpi_comm,&#32;<emphasis class="keyword">true</emphasis>);
639 &#32;&#32;EstimatedSolution.reinit(i_sys_owned,&#32;mpi_comm);
640 &#32;&#32;ErrorOfSolution.reinit(i_sys_owned,&#32;mpi_comm);
641 }
642 
643 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_cell_weights()&#32;{
644 &#32;&#32;cell_weights.reinit(triangulation.n_active_cells());
645 &#32;&#32;cell_weights_prec_1.reinit(triangulation.n_active_cells());
646 &#32;&#32;cell_weights_prec_2.reinit(triangulation.n_active_cells());
647 &#32;&#32;calculate_cell_weights();
648 }
649 
650 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_storage()&#32;{
651 &#32;&#32;storage.reinit(i_sys_owned,&#32;&#32;mpi_comm);
652 }
653 
654 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_preconditioner()&#32;{
655 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;reinit_preconditioner&quot;</emphasis>);
656 
657 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Generating&#32;BSP&quot;</emphasis>);
658 
659 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Started&quot;</emphasis>&#32;&lt;&lt;std::endl;
660 
661 &#32;&#32;TrilinosWrappers::BlockSparsityPattern&#32;epsp(i_prec_even_owned_row,&#32;i_prec_even_owned_col,&#32;i_prec_even_writable,&#32;mpi_comm);
662 
663 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Even&#32;worked.&#32;Continuing&#32;Odd.&quot;</emphasis>&#32;&lt;&lt;std::endl;
664 
665 &#32;&#32;TrilinosWrappers::BlockSparsityPattern&#32;opsp(i_prec_odd_owned_row,&#32;i_prec_odd_owned_col,&#32;i_prec_odd_writable,&#32;mpi_comm);
666 
667 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Odd&#32;worked.&#32;Done&quot;</emphasis>&#32;&lt;&lt;std::endl;
668 
669 &#32;&#32;deallog.pop();
670 
671 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Collecting&#32;sizes&#32;...&quot;</emphasis>&#32;&lt;&lt;std::endl;
672 &#32;&#32;epsp.collect_sizes();
673 &#32;&#32;opsp.collect_sizes();
674 
675 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Making&#32;BSP&quot;</emphasis>);
676 
677 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Even&#32;Preconditioner&#32;Matrices&#32;...&quot;</emphasis>&#32;&lt;&lt;std::endl;
678 &#32;&#32;DoFTools::make_sparsity_pattern(dof_handler,&#32;epsp,&#32;cm_prec_even,&#32;<emphasis class="keyword">false</emphasis>,&#32;rank);
679 &#32;&#32;epsp.compress();
680 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Odd&#32;Preconditioner&#32;Matrices&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
681 &#32;&#32;DoFTools::make_sparsity_pattern(dof_handler,&#32;opsp,&#32;cm_prec_odd,&#32;<emphasis class="keyword">false</emphasis>,&#32;rank);
682 &#32;&#32;opsp.compress();
683 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;std::endl;
684 
685 &#32;&#32;deallog.pop();
686 
687 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Initializing&#32;matrices&quot;</emphasis>);
688 &#32;&#32;deallog&#32;&lt;&lt;<emphasis class="stringliteral">&quot;Even&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
689 &#32;&#32;prec_matrix_even.reinit(epsp);
690 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Odd&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
691 &#32;&#32;prec_matrix_odd.reinit(opsp);
692 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;std::endl;
693 &#32;&#32;deallog.pop();
694 &#32;&#32;deallog.pop();
695 }
696 
697 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_preconditioner_fast()&#32;{&#32;}
698 
699 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::assemble_system()&#32;{
700 &#32;&#32;reinit_rhs();
701 
702 &#32;&#32;QGauss&lt;3&gt;&#32;&#32;quadrature_formula(2);
703 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;real(0);
704 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;imag(3);
705 &#32;&#32;FEValues&lt;3&gt;&#32;fe_values(fe,&#32;quadrature_formula,&#32;update_values|update_gradients|update_JxW_values|update_quadrature_points);
706 &#32;&#32;std::vector&lt;Point&lt;3&gt;&#32;&gt;&#32;quadrature_points;
707 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;&#32;&#32;dofs_per_cell&#32;&#32;=&#32;fe.dofs_per_cell;
708 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;&#32;&#32;n_q_points&#32;&#32;&#32;&#32;=&#32;quadrature_formula.size();
709 
710 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Starting&#32;Assemblation&#32;process&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
711 
712 &#32;&#32;FullMatrix&lt;double&gt;&#32;&#32;cell_matrix_real(dofs_per_cell,&#32;dofs_per_cell);
713 &#32;&#32;FullMatrix&lt;double&gt;&#32;&#32;cell_matrix_prec_odd(dofs_per_cell,&#32;dofs_per_cell);
714 &#32;&#32;FullMatrix&lt;double&gt;&#32;&#32;cell_matrix_prec_even(dofs_per_cell,&#32;dofs_per_cell);
715 
716 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;e_temp&#32;=&#32;1.0;
717 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!GlobalParams.C_AllOne)&#32;{
718 &#32;&#32;&#32;&#32;e_temp&#32;*=&#32;GlobalParams.C_Epsilon;
719 &#32;&#32;}
720 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;mu_temp&#32;=&#32;1.0;
721 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!GlobalParams.C_AllOne)&#32;{
722 &#32;&#32;&#32;&#32;mu_temp&#32;*=&#32;GlobalParams.C_Mu;
723 &#32;&#32;}
724 
725 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;eps_in&#32;=&#32;GlobalParams.M_W_epsilonin&#32;*&#32;e_temp;
726 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;eps_out&#32;=&#32;GlobalParams.M_W_epsilonout&#32;*&#32;e_temp;
727 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;mu_zero&#32;=&#32;mu_temp;
728 
729 &#32;&#32;Vector&lt;double&gt;&#32;cell_rhs(dofs_per_cell);
730 &#32;&#32;cell_rhs&#32;=&#32;0;
731 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;transformation,&#32;epsilon,&#32;epsilon_pre1,&#32;epsilon_pre2,&#32;mu,&#32;mu_prec1,&#32;mu_prec2;
732 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_dof_indices(dofs_per_cell);
733 
734 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
735 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),
736 &#32;&#32;endc&#32;=&#32;dof_handler.end();
737 
738 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
739 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;subdomain_id&#32;=&#32;cell-&gt;subdomain_id();
740 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(subdomain_id&#32;==&#32;rank)&#32;{
741 &#32;&#32;&#32;&#32;&#32;&#32;cell_rhs.reinit(dofs_per_cell,&#32;<emphasis class="keyword">false</emphasis>);
742 &#32;&#32;&#32;&#32;&#32;&#32;fe_values.reinit(cell);
743 &#32;&#32;&#32;&#32;&#32;&#32;quadrature_points&#32;=&#32;fe_values.get_quadrature_points();
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;has_left&#32;=&#32;<emphasis class="keyword">false</emphasis>;
745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;has_right&#32;=&#32;<emphasis class="keyword">false</emphasis>;
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(cell-&gt;face(i)-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>)[2]&#32;&lt;=&#32;-GlobalParams.M_R_ZLength/2.0)&#32;has_left&#32;=&#32;<emphasis class="keyword">true</emphasis>;
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(cell-&gt;face(i)-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>)[2]&#32;&gt;=&#32;-GlobalParams.M_R_ZLength/2.0)&#32;has_right&#32;=&#32;<emphasis class="keyword">true</emphasis>;
749 &#32;&#32;&#32;&#32;&#32;&#32;}
750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;compute_rhs&#32;=&#32;has_left&#32;&amp;&amp;&#32;has_right;
751 &#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_real&#32;=&#32;0;
752 &#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_odd&#32;=&#32;0;
753 &#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_even&#32;=&#32;0;
754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;q_index=0;&#32;q_index&#32;&lt;&#32;n_q_points;&#32;++q_index)&#32;{
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!locals_set)&#32;{
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(quadrature_points[q_index][2]&#32;&lt;&#32;minimum_local_z)&#32;{
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minimum_local_z&#32;=&#32;quadrature_points[q_index][2];
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(quadrature_points[q_index][2]&#32;&gt;&#32;maximum_local_z)&#32;{
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maximum_local_z&#32;=&#32;quadrature_points[q_index][2];
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
764 
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(mg-&gt;<link linkend="class_mesh_generator_1a571dc7c36f29edbdb9ea40e5832ba851">math_coordinate_in_waveguide</link>(quadrature_points[q_index]))&#32;{
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon&#32;=&#32;transformation&#32;*&#32;eps_in;
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon&#32;=&#32;transformation&#32;*&#32;eps_out;
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
770 
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu&#32;=&#32;invert(transformation)&#32;/&#32;mu_zero;
772 
773 
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec1&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec2&#32;=&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec2&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec1&#32;=&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
785 
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec1&#32;=&#32;invert(mu_prec1)&#32;/&#32;mu_zero;
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec2&#32;=&#32;invert(mu_prec2)&#32;/&#32;mu_zero;
788 
789 
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(mg-&gt;<link linkend="class_mesh_generator_1a571dc7c36f29edbdb9ea40e5832ba851">math_coordinate_in_waveguide</link>(quadrature_points[q_index]))&#32;{
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;*=&#32;eps_in;
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;*=&#32;eps_in;
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;*=&#32;eps_out;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;*=&#32;eps_out;
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
797 
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;JxW&#32;=&#32;fe_values.JxW(q_index);
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;dofs_per_cell;&#32;i++)&#32;{
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;I_Curl;
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;I_Val;
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;{
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Curl[k].imag(fe_values[imag].curl(i,&#32;q_index)[k]);
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Curl[k].real(fe_values[real].curl(i,&#32;q_index)[k]);
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Val[k].imag(fe_values[imag].value(i,&#32;q_index)[k]);
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Val[k].real(fe_values[real].value(i,&#32;q_index)[k]);
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
808 
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j=0;&#32;j&#32;&lt;&#32;dofs_per_cell;&#32;j++)&#32;{
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;J_Curl;
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;J_Val;
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;{
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Curl[k].imag(fe_values[imag].curl(j,&#32;q_index)[k]);
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Curl[k].real(fe_values[real].curl(j,&#32;q_index)[k]);
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Val[k].imag(fe_values[imag].value(j,&#32;q_index)[k]);
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Val[k].real(fe_values[real].value(j,&#32;q_index)[k]);
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
818 
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;x&#32;=(mu&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(J_Curl)&#32;*&#32;JxW&#32;-((epsilon&#32;*&#32;I_Val)&#32;*&#32;Conjugate_Vector(J_Val))*JxW*GlobalParams.C_omega*GlobalParams.C_omega;
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_real[i][j]&#32;+=&#32;x.real();
821 
822 
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;pre1&#32;=(mu_prec1&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(J_Curl)&#32;*&#32;JxW&#32;-((epsilon_pre1&#32;*&#32;I_Val)&#32;*&#32;Conjugate_Vector(J_Val))*JxW*GlobalParams.C_omega*GlobalParams.C_omega;
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_even[i][j]&#32;+=&#32;pre1.real();
825 
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;pre2&#32;=(mu_prec2&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(J_Curl)&#32;*&#32;JxW&#32;-((epsilon_pre2&#32;*&#32;I_Val)&#32;*&#32;Conjugate_Vector(J_Val))*JxW*GlobalParams.C_omega*GlobalParams.C_omega;
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_odd[i][j]&#32;+=&#32;pre2.real();
828 
829 
830 
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(&#32;compute_rhs&#32;&amp;&amp;&#32;quadrature_points[q_index][2]&#32;&lt;&#32;-GlobalParams.M_R_ZLength/2.0)&#32;{
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;rhs2&#32;=&#32;(mu&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(es.curl(quadrature_points[q_index]))&#32;*&#32;JxW&#32;-&#32;((epsilon&#32;*&#32;I_Val))&#32;*&#32;Conjugate_Vector(es.val(quadrature_points[q_index]))*JxW*GlobalParams.C_omega*GlobalParams.C_omega;
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_rhs[i]&#32;-=&#32;rhs2.real();
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
837 &#32;&#32;&#32;&#32;&#32;&#32;}
838 
839 &#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;get_dof_indices(local_dof_indices);
840 &#32;&#32;&#32;&#32;&#32;&#32;cm.distribute_local_to_global(cell_matrix_real,&#32;cell_rhs,&#32;local_dof_indices,&#32;system_matrix,&#32;system_rhs,&#32;<emphasis class="keyword">false</emphasis>);
841 &#32;&#32;&#32;&#32;&#32;&#32;cm_prec_odd.distribute_local_to_global(cell_matrix_prec_odd,&#32;cell_rhs,&#32;local_dof_indices,&#32;prec_matrix_odd,&#32;preconditioner_rhs,&#32;<emphasis class="keyword">false</emphasis>);
842 &#32;&#32;&#32;&#32;&#32;&#32;cm_prec_even.distribute_local_to_global(cell_matrix_prec_even,&#32;cell_rhs,&#32;local_dof_indices,&#32;prec_matrix_even,&#32;preconditioner_rhs,&#32;<emphasis class="keyword">false</emphasis>);
843 &#32;&#32;&#32;&#32;}
844 &#32;&#32;}
845 &#32;&#32;locals_set&#32;=&#32;<emphasis class="keyword">true</emphasis>;
846 
847 &#32;&#32;MPI_Barrier(mpi_comm);
848 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!is_stored)&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Assembling&#32;done.&#32;L2-Norm&#32;of&#32;RHS:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;system_rhs.l2_norm()&#32;&lt;&lt;&#32;std::endl;
849 
850 &#32;&#32;system_matrix.compress(VectorOperation::add);
851 &#32;&#32;system_rhs.compress(VectorOperation::add);
852 
853 &#32;&#32;prec_matrix_even.compress(VectorOperation::add);
854 &#32;&#32;prec_matrix_odd.compress(VectorOperation::add);
855 
856 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
857 &#32;&#32;&#32;&#32;cm.distribute(primal_solution);
858 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
859 &#32;&#32;&#32;&#32;cm.distribute(dual_solution);
860 &#32;&#32;}
861 &#32;&#32;cm.distribute(EstimatedSolution);
862 &#32;&#32;cm.distribute(ErrorOfSolution);
863 &#32;&#32;MPI_Barrier(mpi_comm);
864 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Distributing&#32;solution&#32;done.&quot;</emphasis>&#32;&lt;&lt;std::endl;
865 &#32;&#32;<link linkend="class_waveguide_1aecce672b929c81b8966198043bff646a">estimate_solution</link>();
866 }
867 
868 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::MakeBoundaryConditions()&#32;{
869 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
870 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),
871 &#32;&#32;endc&#32;=&#32;dof_handler.end();
872 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;is_rectangular&#32;=(GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Rectangle);
873 &#32;&#32;<emphasis class="comment">//&#32;ExactSolution&#32;es(is_rectangular);</emphasis>
874 &#32;&#32;dealii::ZeroFunction&lt;3,double&gt;&#32;zf(6);
875 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;3,&#32;cm);
876 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;1,&#32;cm);
877 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;2,&#32;cm);
878 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_line_dofs(fe.dofs_per_line);
879 
880 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;face_own_count&#32;=&#32;std::max(static_cast&lt;unsigned&#32;int&gt;(0),fe.dofs_per_face&#32;-&#32;GeometryInfo&lt;3&gt;::lines_per_face*fe.dofs_per_line);
881 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;cell_own_count&#32;=&#32;std::max(static_cast&lt;unsigned&#32;int&gt;(0),fe.dofs_per_cell&#32;-&#32;GeometryInfo&lt;3&gt;::faces_per_cell*fe.dofs_per_face&#32;+&#32;GeometryInfo&lt;3&gt;::lines_per_cell*fe.dofs_per_line);
882 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_face_dofs(fe.dofs_per_face);
883 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Dofs&#32;per&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fe.dofs_per_line&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
884 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Dofs&#32;per&#32;face:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fe.dofs_per_face&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&#32;Own:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;face_own_count&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
885 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Dofs&#32;per&#32;cell:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fe.dofs_per_cell&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&#32;Own:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;cell_own_count&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
886 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;==&#32;0)&#32;{
887 &#32;&#32;&#32;&#32;fixed_dofs.set_size(dof_handler.n_dofs());
888 &#32;&#32;}
889 
890 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;center&#32;=(cell-&gt;face(i))-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[0]&#32;&lt;&#32;0)&#32;center[0]&#32;*=(-1.0);
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[1]&#32;&lt;&#32;0)&#32;center[1]&#32;*=(-1.0);
896 
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[0]&#32;-&#32;GlobalParams.M_R_XLength/2.0)&#32;&lt;&#32;0.0001)&#32;{
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[k]);
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[k],&#32;0.0);
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;GeometryInfo&lt;3&gt;::lines_per_face*fe.dofs_per_line;&#32;j&#32;&lt;&#32;fe.dofs_per_face;&#32;j++)&#32;{
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_face_dofs[j]);
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_face_dofs[j],&#32;0.0);
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
919 
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[1]&#32;-&#32;GlobalParams.M_R_YLength/2.0)&#32;&lt;&#32;0.0001)&#32;{
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[k]);
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[k],&#32;0.0);
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;GeometryInfo&lt;3&gt;::lines_per_face*fe.dofs_per_line;&#32;j&#32;&lt;&#32;fe.dofs_per_face;&#32;j++)&#32;{
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_face_dofs[j]);
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_face_dofs[j],&#32;0.0);
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
942 
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z)&#32;&lt;&#32;0.0001)&#32;{
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((cell-&gt;face(i))-&gt;line(j)-&gt;at_boundary())&#32;{
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(fe.dofs_per_line&#32;&gt;=&#32;2)&#32;{
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[1]);
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[1],&#32;0.0);
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;GeometryInfo&lt;3&gt;::lines_per_face*fe.dofs_per_line;&#32;j&#32;&lt;fe.dofs_per_face;&#32;j++)&#32;{
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
967 
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Maximum_Z)&#32;&lt;&#32;0.0001)&#32;{
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[k]);
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[k],&#32;0.0);
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;GeometryInfo&lt;3&gt;::lines_per_face*fe.dofs_per_line;&#32;j&#32;&lt;fe.dofs_per_face;&#32;j++)&#32;{
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_face_dofs[j]);
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_face_dofs[j],&#32;0.0);
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
992 &#32;&#32;&#32;&#32;}
993 }
994 
995 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::MakePreconditionerBoundaryConditions()&#32;{
996 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
997 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active();
998 &#32;&#32;endc&#32;=&#32;dof_handler.end();
999 
1000 &#32;&#32;dealii::ZeroFunction&lt;3,double&gt;&#32;zf(6);
1001 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;3,&#32;cm_prec_even);
1002 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;3,&#32;cm_prec_odd);
1003 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;1,&#32;cm_prec_even);
1004 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;1,&#32;cm_prec_odd);
1005 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;2,&#32;cm_prec_even);
1006 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;2,&#32;cm_prec_odd);
1007 
1008 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;layer_length&#32;=&#32;GlobalParams.LayerThickness;
1009 &#32;&#32;IndexSet&#32;own(dof_handler.n_dofs());
1010 &#32;&#32;own.add_indices(locally_owned_dofs);
1011 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;==&#32;0)&#32;{
1012 &#32;&#32;&#32;&#32;sweepable.set_size(dof_handler.n_dofs());
1013 &#32;&#32;&#32;&#32;sweepable.add_indices(locally_owned_dofs);
1014 &#32;&#32;}
1015 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
1016 &#32;&#32;&#32;&#32;own.add_indices(LowerDofs);
1017 &#32;&#32;}
1018 
1019 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;face_own_count&#32;=&#32;fe.dofs_per_face&#32;-&#32;GeometryInfo&lt;3&gt;::lines_per_face*fe.dofs_per_line;
1020 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;has_non_edge_dofs&#32;=&#32;(face_own_count&#32;&gt;&#32;0);
1021 
1022 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_face_dofs(fe.dofs_per_face);
1023 
1024 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_dof_indices(fe.dofs_per_line);
1025 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_line_dofs(fe.dofs_per_line);
1026 
1027 &#32;&#32;cm_prec_even.merge(cm,&#32;dealii::ConstraintMatrix::MergeConflictBehavior::right_object_wins,&#32;<emphasis class="keyword">true</emphasis>);
1028 &#32;&#32;cm_prec_odd.merge(cm,&#32;dealii::ConstraintMatrix::MergeConflictBehavior::right_object_wins,&#32;<emphasis class="keyword">true</emphasis>);
1029 
1030 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
1031 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(static_cast&lt;int&gt;((cell-&gt;subdomain_id()&#32;-&#32;rank)))&#32;&lt;&#32;3)&#32;{
1032 
1033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;center&#32;=(cell-&gt;face(i))-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[0]&#32;&lt;&#32;0)&#32;center[0]&#32;*=(-1.0);
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[1]&#32;&lt;&#32;0)&#32;center[1]&#32;*=(-1.0);
1037 
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;Set&#32;x-boundary&#32;values</emphasis>
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[0]&#32;-&#32;GlobalParams.M_R_XLength/2.0)&#32;&lt;&#32;0.0001)&#32;{
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_odd&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_even&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1043 
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;Set&#32;y-boundary&#32;values</emphasis>
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[1]&#32;-&#32;GlobalParams.M_R_YLength/2.0)&#32;&lt;&#32;0.0001)&#32;{
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_odd&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_even&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1049 
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-(rank&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_even&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1056 
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-((rank+2)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_even&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1060 
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-((rank+1)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_odd&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1064 
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-((rank-1)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_odd&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-(rank&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_odd&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1072 
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-((rank+2)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_odd&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1076 
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-((rank+1)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;&#32;cm_prec_even&#32;,&#32;cell,&#32;i,&#32;fe.dofs_per_line,&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,&#32;&amp;&#32;locally_owned_dofs);
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1081 &#32;&#32;&#32;&#32;&#32;&#32;}
1082 &#32;&#32;&#32;&#32;}
1083 &#32;&#32;}
1084 
1085 }
1086 
1087 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::solve()&#32;{
1088 &#32;&#32;SolverControl&#32;lsc&#32;=&#32;SolverControl(GlobalParams.So_TotalSteps,&#32;1.e-5,&#32;<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>);
1089 
1090 &#32;&#32;lsc.log_frequency(1);
1091 
1092 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;!=&#32;0)&#32;{
1093 &#32;&#32;&#32;&#32;result_file.close();
1094 &#32;&#32;}
1095 
1096 &#32;&#32;result_file.open((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;/solution_of_run_&quot;</emphasis>&#32;+&#32;std::to_string(run_number)&#32;&#32;+&#32;<emphasis class="stringliteral">&quot;.dat&quot;</emphasis>).c_str());
1097 
1098 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.So_Solver&#32;==&#32;SolverOptions::GMRES)&#32;{
1099 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;&gt;&#32;0)&#32;{
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;primal_solution[index]&#32;=&#32;primal_with_relevant[index];
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1105 &#32;&#32;&#32;&#32;&#32;&#32;}
1106 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;&gt;&#32;1)&#32;{
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dual_solution[index]&#32;=&#32;dual_with_relevant[index];
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1112 &#32;&#32;&#32;&#32;&#32;&#32;}
1113 &#32;&#32;&#32;&#32;}
1114 
1115 &#32;&#32;&#32;&#32;dealii::SolverGMRES&lt;dealii::TrilinosWrappers::MPI::BlockVector&gt;&#32;solver(lsc&#32;,&#32;dealii::SolverGMRES&lt;dealii::TrilinosWrappers::MPI::BlockVector&gt;::AdditionalData(GlobalParams.So_RestartSteps));
1116 
1117 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;above&#32;=&#32;0;
1118 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;!=&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
1119 &#32;&#32;&#32;&#32;&#32;&#32;above&#32;=&#32;locally_relevant_dofs_all_processors[rank+1].n_elements();
1120 &#32;&#32;&#32;&#32;}
1121 
1122 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;below&#32;=&#32;0;
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;!=&#32;0)&#32;{
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;below&#32;=&#32;locally_relevant_dofs_all_processors[rank-1].n_elements();
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1126 
1127 &#32;&#32;&#32;&#32;<link linkend="class_preconditioner_sweeping">PreconditionerSweeping</link>&#32;sweep(mpi_comm,&#32;locally_owned_dofs.n_elements(),&#32;above,&#32;below,&#32;dof_handler.max_couplings_between_dofs(),&#32;locally_owned_dofs,&#32;&amp;fixed_dofs,&#32;rank);
1128 
1129 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0)&#32;{
1130 &#32;&#32;&#32;&#32;&#32;&#32;sweep.Prepare(*solution);
1131 &#32;&#32;&#32;&#32;}
1132 
1133 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1134 
1135 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
1136 &#32;&#32;&#32;&#32;&#32;&#32;sweep.matrix&#32;=&#32;&amp;&#32;prec_matrix_even.block(rank&#32;/2,&#32;rank/2);
1137 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1138 &#32;&#32;&#32;&#32;&#32;&#32;sweep.matrix&#32;=&#32;&amp;&#32;prec_matrix_odd.block((rank+1)&#32;/2,&#32;(rank+1)/2);
1139 &#32;&#32;&#32;&#32;}
1140 
1141 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;==&#32;GlobalParams.NumberProcesses-1)&#32;{
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;sweep.matrix&#32;=&#32;&amp;&#32;system_matrix.block(rank,&#32;rank);
1143 &#32;&#32;&#32;&#32;}
1144 
1145 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Initializing&#32;the&#32;Preconditioner...&quot;</emphasis>&#32;&lt;&lt;std::endl;
1146 
1147 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Preconditioner&#32;Initialization&quot;</emphasis>);
1148 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;&lt;&#32;GlobalParams.NumberProcesses-1&#32;&amp;&amp;&#32;static_cast&lt;int&gt;(rank)&#32;&gt;0)&#32;{
1149 &#32;&#32;&#32;&#32;&#32;&#32;sweep.init(solver_control,&#32;&amp;&#32;system_matrix.block(rank,&#32;&#32;rank+1),&#32;&amp;&#32;system_matrix.block(rank,&#32;rank-1));
1150 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;==&#32;GlobalParams.NumberProcesses-1)&#32;{
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sweep.init(solver_control,&#32;&amp;&#32;system_matrix.block(rank,&#32;&#32;rank),&#32;&amp;&#32;system_matrix.block(rank,&#32;rank-1));
1153 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sweep.init(solver_control,&#32;&amp;&#32;system_matrix.block(rank,&#32;&#32;rank+1),&#32;&amp;&#32;system_matrix.block(rank,&#32;rank));
1155 &#32;&#32;&#32;&#32;&#32;&#32;}
1156 &#32;&#32;&#32;&#32;}
1157 
1158 &#32;&#32;&#32;&#32;solver.connect(std_cxx11::bind(&amp;Waveguide::residual_tracker,
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">this</emphasis>,
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::_1,
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::_2,
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::_3));
1163 &#32;&#32;&#32;&#32;timer.leave_subsection();
1164 
1165 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Preconditioner&#32;Ready.&#32;Solving...&quot;</emphasis>&#32;&lt;&lt;std::endl;
1166 
1167 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>timeval&#32;tp;
1168 &#32;&#32;&#32;&#32;gettimeofday(&amp;tp,&#32;NULL);
1169 &#32;&#32;&#32;&#32;solver_start_milis&#32;=&#32;tp.tv_sec&#32;*&#32;1000&#32;+&#32;tp.tv_usec&#32;/&#32;1000;
1170 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;GMRES&#32;run&quot;</emphasis>);
1171 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">try</emphasis>&#32;{
1172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solver.solve(system_matrix,&#32;primal_solution,&#32;system_rhs,&#32;sweep);
1174 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solver.solve(system_matrix,&#32;dual_solution,&#32;system_rhs,&#32;sweep);
1176 &#32;&#32;&#32;&#32;&#32;&#32;}
1177 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">catch</emphasis>(<emphasis class="keyword">const</emphasis>&#32;dealii::SolverControl::NoConvergence&#32;&amp;&#32;e)&#32;{
1178 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;NO&#32;CONVERGENCE!&quot;</emphasis>&#32;&lt;&lt;std::endl;
1179 &#32;&#32;&#32;&#32;}
1180 &#32;&#32;&#32;&#32;timer.leave_subsection();
1181 
1182 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(steps&#32;&lt;&#32;40)&#32;{
1183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>timeval&#32;tp;
1184 &#32;&#32;&#32;&#32;&#32;&#32;gettimeofday(&amp;tp,&#32;NULL);
1185 &#32;&#32;&#32;&#32;&#32;&#32;int64_t&#32;ms&#32;=&#32;tp.tv_sec&#32;*&#32;1000&#32;+&#32;tp.tv_usec&#32;/&#32;1000&#32;-&#32;solver_start_milis;
1186 
1187 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_value(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,&#32;steps&#32;+1);
1188 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_value(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,&#32;0.0);
1189 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_value(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Time&quot;</emphasis>,&#32;std::to_string(ms));
1190 &#32;&#32;&#32;&#32;&#32;&#32;steps++;
1191 &#32;&#32;&#32;&#32;}
1192 
1193 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((GlobalParams.O_C_D_ConvergenceFirst&#32;&amp;&amp;&#32;run_number&#32;==&#32;0)&#32;||&#32;GlobalParams.O_C_D_ConvergenceAll)&#32;{
1194 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_column_to_supercolumn(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,&#32;<emphasis class="stringliteral">&quot;Run&#32;&quot;</emphasis>&#32;+&#32;std::to_string(run_number));
1195 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_column_to_supercolumn(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,&#32;<emphasis class="stringliteral">&quot;Run&#32;&quot;</emphasis>&#32;+&#32;std::to_string(run_number));
1196 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_column_to_supercolumn(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Time&quot;</emphasis>,&#32;<emphasis class="stringliteral">&quot;Run&#32;&quot;</emphasis>&#32;+&#32;std::to_string(run_number));
1197 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.evaluate_convergence_rates(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,&#32;ConvergenceTable::RateMode::reduction_rate);
1198 &#32;&#32;&#32;&#32;}
1199 
1200 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1201 
1202 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Norm&#32;of&#32;the&#32;solution:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;solution-&gt;l2_norm()&#32;&lt;&lt;&#32;std::endl;
1203 &#32;&#32;}
1204 
1205 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1206 &#32;&#32;&#32;&#32;cm.distribute(primal_solution);
1207 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1208 &#32;&#32;&#32;&#32;cm.distribute(dual_solution);
1209 &#32;&#32;}
1210 
1211 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.So_Solver&#32;==&#32;SolverOptions::UMFPACK)&#32;{
1212 &#32;&#32;&#32;&#32;SolverControl&#32;sc2(2,&#32;<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
1213 &#32;&#32;&#32;&#32;TrilinosWrappers::SolverDirect&#32;temp_s(sc2,&#32;TrilinosWrappers::SolverDirect::AdditionalData(<emphasis class="keyword">false</emphasis>,&#32;PrecOptionNames[GlobalParams.So_Preconditioner]));
1214 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;temp_s.solve(system_matrix,&#32;solution,&#32;system_rhs);</emphasis>
1215 &#32;&#32;}
1216 
1217 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1218 &#32;&#32;&#32;&#32;primal_with_relevant.reinit(locally_owned_dofs,&#32;locally_relevant_dofs,&#32;mpi_comm);
1219 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i=&#32;0;&#32;i&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1221 &#32;&#32;&#32;&#32;&#32;&#32;primal_with_relevant[index]&#32;=&#32;primal_solution[index];
1222 &#32;&#32;&#32;&#32;}
1223 &#32;&#32;&#32;&#32;primal_with_relevant.update_ghost_values();
1224 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1225 &#32;&#32;&#32;&#32;dual_with_relevant.reinit(locally_owned_dofs,&#32;locally_relevant_dofs,&#32;mpi_comm);
1226 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i=&#32;0;&#32;i&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1228 &#32;&#32;&#32;&#32;&#32;&#32;dual_with_relevant[index]&#32;=&#32;dual_solution[index];
1229 &#32;&#32;&#32;&#32;}
1230 &#32;&#32;&#32;&#32;dual_with_relevant.update_ghost_values();
1231 &#32;&#32;}
1232 
1233 &#32;&#32;GrowingVectorMemory&lt;TrilinosWrappers::MPI::BlockVector&gt;::release_unused_memory();
1234 }
1235 
<link linkend="class_waveguide_1a3c6bc7f419f94b50c85edbd917c550d1">1236 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_waveguide_1a3c6bc7f419f94b50c85edbd917c550d1">Waveguide::store</link>()&#32;{
1237 &#32;&#32;reinit_storage();
1238 &#32;&#32;<emphasis class="comment">//&#32;storage.reinit(dof_handler.n_dofs());</emphasis>
1239 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1240 &#32;&#32;&#32;&#32;storage&#32;=&#32;primal_solution;
1241 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1242 &#32;&#32;&#32;&#32;storage&#32;=&#32;dual_solution;
1243 &#32;&#32;}
1244 &#32;&#32;is_stored&#32;=&#32;<emphasis class="keyword">true</emphasis>;
1245 }
1246 
1247 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::output_results(<emphasis class="keywordtype">bool</emphasis>)&#32;{
1248 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1249 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1250 &#32;&#32;&#32;&#32;ErrorOfSolution[index]&#32;=(*solution)[index]&#32;-&#32;EstimatedSolution[index];
1251 &#32;&#32;}
1252 
1253 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sol_real,&#32;sol_imag;
1254 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i+=2)&#32;{
1255 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1256 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index2&#32;=&#32;locally_owned_dofs.nth_index_in_set(i+1);
1257 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(index&#32;!=&#32;index2&#32;-1)&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;WEIRD&#32;EVENT&#32;IN&#32;OUTPUT&#32;RESULTS&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1258 &#32;&#32;&#32;&#32;sol_real&#32;=(*solution)[index];
1259 &#32;&#32;&#32;&#32;sol_real&#32;=&#32;sol_real*sol_real;
1260 &#32;&#32;&#32;&#32;sol_imag&#32;=(*solution)[index2];
1261 &#32;&#32;&#32;&#32;sol_imag&#32;=&#32;sol_imag*sol_imag;
1262 &#32;&#32;&#32;&#32;ErrorOfSolution[index]&#32;=&#32;std::sqrt(sol_real&#32;+&#32;sol_imag);
1263 &#32;&#32;}
1264 
1265 &#32;&#32;MPI_Barrier(mpi_comm);
1266 
1267 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;i_sys_relevant;
1268 &#32;&#32;i_sys_relevant.resize(GlobalParams.NumberProcesses);
1269 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;below&#32;=&#32;0;
1270 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.NumberProcesses;&#32;i++)&#32;{
1271 &#32;&#32;&#32;&#32;IndexSet&#32;local(Block_Sizes[i]);
1272 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;!=static_cast&lt;int&gt;(rank))&#32;{
1273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;locally_relevant_dofs.n_elements();&#32;j++)&#32;{
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;idx&#32;=&#32;locally_relevant_dofs.nth_index_in_set(j);
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(idx&#32;&gt;=&#32;below&#32;&amp;&amp;&#32;idx&#32;&lt;&#32;below&#32;+&#32;Block_Sizes[i])&#32;{
1276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;local.add_index(idx&#32;-&#32;below);
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1278 &#32;&#32;&#32;&#32;&#32;&#32;}
1279 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1280 &#32;&#32;&#32;&#32;&#32;&#32;local&#32;=&#32;i_sys_owned[i];
1281 &#32;&#32;&#32;&#32;}
1282 &#32;&#32;&#32;&#32;below&#32;+=&#32;Block_Sizes[i];
1283 &#32;&#32;&#32;&#32;i_sys_relevant[i]&#32;=&#32;local;
1284 &#32;&#32;}
1285 
1286 &#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;solution_output(i_sys_owned,&#32;i_sys_relevant,&#32;mpi_comm);
1287 &#32;&#32;solution_output&#32;=&#32;*solution;
1288 
1289 &#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;estimate_output(i_sys_owned,&#32;i_sys_relevant,&#32;mpi_comm);
1290 &#32;&#32;estimate_output&#32;=&#32;EstimatedSolution;
1291 
1292 &#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;error_output(i_sys_owned,&#32;i_sys_relevant,&#32;mpi_comm);
1293 &#32;&#32;error_output&#32;=&#32;ErrorOfSolution;
1294 
1295 &#32;&#32;MPI_Barrier(mpi_comm);
1296 
1297 &#32;&#32;<emphasis class="comment">//&#32;std::cout&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;&quot;:&#32;&quot;&#32;&lt;&lt;locally_owned_dofs.n_elements()&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;locally_owned_dofs.nth_index_in_set(0)&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;locally_owned_dofs.nth_index_in_set(locally_owned_dofs.n_elements()-1)&#32;&lt;&lt;std::endl;</emphasis>
1298 &#32;&#32;<emphasis class="comment">//&#32;evaluate_overall();</emphasis>
1299 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<emphasis class="keyword">true</emphasis>)&#32;{
1300 &#32;&#32;&#32;&#32;DataOut&lt;3&gt;&#32;data_out;
1301 
1302 &#32;&#32;&#32;&#32;data_out.attach_dof_handler(dof_handler);
1303 &#32;&#32;&#32;&#32;data_out.add_data_vector(solution_output,&#32;<emphasis class="stringliteral">&quot;Solution&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_dof_data);
1304 &#32;&#32;&#32;&#32;data_out.add_data_vector(error_output,&#32;<emphasis class="stringliteral">&quot;Error_Of_Estimated_Solution&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_dof_data);
1305 &#32;&#32;&#32;&#32;data_out.add_data_vector(estimate_output,&#32;<emphasis class="stringliteral">&quot;Estimated_Solution&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_dof_data);
1306 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;data_out.add_data_vector(differences,&#32;&quot;L2error&quot;);</emphasis>
1307 
1308 &#32;&#32;&#32;&#32;data_out.build_patches();
1309 
1310 &#32;&#32;&#32;&#32;std::ofstream&#32;outputvtu(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix+&#32;<emphasis class="stringliteral">&quot;/solution-run&quot;</emphasis>&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;-P&quot;</emphasis>&#32;+&#32;std::to_string(rank)&#32;+<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>);
1311 &#32;&#32;&#32;&#32;data_out.write_vtu(outputvtu);
1312 
1313 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<emphasis class="keyword">false</emphasis>)&#32;{
1314 &#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;pattern(solutionpath&#32;&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+<emphasis class="stringliteral">&quot;/pattern.gnu&quot;</emphasis>);
1315 
1316 &#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;patternscript(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix+&#32;<emphasis class="stringliteral">&quot;/displaypattern.gnu&quot;</emphasis>);
1317 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;style&#32;line&#32;1000&#32;lw&#32;1&#32;lc&#32;\&quot;black\&quot;&quot;</emphasis>&#32;&lt;&lt;std::endl;
1318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.M_W_Sectors;&#32;i++)&#32;{
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1000&#32;+&#32;2*i&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;0,-&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,-&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1001&#32;+&#32;2*i&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,0&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,&#32;-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1321 &#32;&#32;&#32;&#32;&#32;&#32;}
1322 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1000&#32;+&#32;2*GlobalParams.M_W_Sectors&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;0,-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1323 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1001&#32;+&#32;2*GlobalParams.M_W_Sectors&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,0&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,&#32;-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1324 
1325 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;plot&#32;\&quot;pattern.gnu\&quot;&#32;with&#32;dots&quot;</emphasis>&#32;&lt;&lt;std::endl;
1326 &#32;&#32;&#32;&#32;&#32;&#32;patternscript.flush();
1327 &#32;&#32;&#32;&#32;}
1328 &#32;&#32;}
1329 &#32;&#32;MPI_Barrier(mpi_comm);
1330 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(GlobalParams.O_O_V_S_SolutionFirst)&#32;{
1331 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;parallel::distributed::Triangulation&lt;3&gt;&#32;temp_for_transformation(MPI_COMM_WORLD,&#32;parallel::distributed::Triangulation&lt;3&gt;::MeshSmoothing(parallel::distributed::Triangulation&lt;3&gt;::none),&#32;parallel::distributed::Triangulation&lt;3&gt;::Settings::no_automatic_repartitioning);</emphasis>
1332 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;temp_for_transformation.copy_triangulation(triangulation);</emphasis>
1333 
1334 &#32;&#32;&#32;&#32;set_the_st(this-&gt;st);
1335 
1336 &#32;&#32;&#32;&#32;GridTools::transform(&amp;Triangulation_Transform_to_physical,&#32;triangulation);
1337 
1338 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1339 
1340 &#32;&#32;&#32;&#32;DataOut&lt;3&gt;&#32;data_out;
1341 
1342 &#32;&#32;&#32;&#32;data_out.attach_dof_handler(dof_handler);
1343 &#32;&#32;&#32;&#32;data_out.add_data_vector(solution_output,&#32;<emphasis class="stringliteral">&quot;Solution&quot;</emphasis>,&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,&#32;3&gt;::DataVectorType::type_dof_data);
1344 
1345 &#32;&#32;&#32;&#32;data_out.build_patches();
1346 
1347 &#32;&#32;&#32;&#32;std::ofstream&#32;outputvtu(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix+&#32;<emphasis class="stringliteral">&quot;/solution-transformed-run&quot;</emphasis>&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;-P&quot;</emphasis>&#32;+&#32;std::to_string(rank)&#32;+<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>);
1348 &#32;&#32;&#32;&#32;data_out.write_vtu(outputvtu);
1349 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1350 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;triangulation.copy_triangulation(temp_for_transformation);</emphasis>
1351 &#32;&#32;}
1352 
1353 }
1354 
1355 Point&lt;3,&#32;double&gt;&#32;Waveguide::transform_coordinate(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;in_p)&#32;{
1356 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;st-&gt;math_to_phys(in_p);
1357 }
1358 
<link linkend="class_waveguide_1a50cf6893286ff8b1b4955f98df0194d2">1359 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_waveguide_1a50cf6893286ff8b1b4955f98df0194d2">Waveguide::run</link>()&#32;{
1360 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Waveguide_&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;_run&quot;</emphasis>);
1361 
1362 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;==&#32;0)&#32;{
1363 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Setting&#32;up&#32;the&#32;mesh...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1364 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Setup&#32;Mesh&quot;</emphasis>);
1365 &#32;&#32;&#32;&#32;make_grid();
1366 &#32;&#32;&#32;&#32;timer.leave_subsection();
1367 
1368 &#32;&#32;&#32;&#32;Compute_Dof_Numbers();
1369 
1370 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Setting&#32;up&#32;FEM...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1371 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Setup&#32;FEM&quot;</emphasis>);
1372 &#32;&#32;&#32;&#32;setup_system();
1373 &#32;&#32;&#32;&#32;timer.leave_subsection();
1374 
1375 
1376 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Reset&quot;</emphasis>);
1377 &#32;&#32;&#32;&#32;timer.leave_subsection();
1378 
1379 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1380 &#32;&#32;&#32;&#32;Prepare_Boundary_Constraints();
1381 
1382 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Reset&quot;</emphasis>);
1383 &#32;&#32;&#32;&#32;reinit_all();
1384 &#32;&#32;&#32;&#32;timer.leave_subsection();
1385 &#32;&#32;}
1386 
1387 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Assembly&quot;</emphasis>);
1388 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Assembling&#32;the&#32;system...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1389 &#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Assemble&quot;</emphasis>);
1390 &#32;&#32;assemble_system();
1391 &#32;&#32;timer.leave_subsection();
1392 &#32;&#32;deallog.pop();
1393 
1394 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Solving&quot;</emphasis>);
1395 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Solving&#32;the&#32;system...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1396 &#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Solve&quot;</emphasis>);
1397 &#32;&#32;solve();
1398 &#32;&#32;timer.leave_subsection();
1399 &#32;&#32;deallog.pop();
1400 
1401 &#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Evaluate&quot;</emphasis>);
1402 &#32;&#32;timer.leave_subsection();
1403 
1404 &#32;&#32;timer.print_summary();
1405 
1406 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Writing&#32;outputs...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1407 &#32;&#32;timer.reset();
1408 
1409 &#32;&#32;output_results(<emphasis class="keyword">false</emphasis>);
1410 
1411 &#32;&#32;deallog.pop();
1412 &#32;&#32;run_number++;
1413 }
1414 
1415 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::print_eigenvalues(<emphasis class="keyword">const</emphasis>&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;&amp;input)&#32;{
1416 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;input.size();&#32;i++)&#32;{
1417 &#32;&#32;&#32;&#32;eigenvalue_file&#32;&lt;&lt;&#32;input.at(i).real()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;input.at(i).imag()&#32;&lt;&lt;&#32;std::endl;
1418 &#32;&#32;}
1419 &#32;&#32;eigenvalue_file&#32;&lt;&lt;&#32;std::endl;
1420 }
1421 
1422 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::print_condition(<emphasis class="keywordtype">double</emphasis>&#32;condition)&#32;{
1423 &#32;&#32;condition_file&#32;&lt;&lt;&#32;condition&#32;&lt;&lt;&#32;std::endl;
1424 }
1425 
1426 std::vector&lt;std::complex&lt;double&gt;&gt;&#32;Waveguide::assemble_adjoint_local_contribution(<emphasis class="keywordtype">double</emphasis>&#32;stepwidth)&#32;{
1427 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Waveguide:adj_local&quot;</emphasis>);
1428 
1429 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Computing&#32;adjoint&#32;based&#32;shape&#32;derivative&#32;contributions...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1430 
1431 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;other_proc&#32;=&#32;GlobalParams.NumberProcesses-&#32;rank&#32;-&#32;1&#32;;
1432 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ndofs&#32;=&#32;st-&gt;<link linkend="class_space_transformation_1a463f0141c194724575bdcdb23168fdec">NDofs</link>();
1433 &#32;&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;ret;
1434 &#32;&#32;ret.resize(ndofs);
1435 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
1436 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;0;
1437 &#32;&#32;}
1438 &#32;&#32;std::vector&lt;bool&gt;&#32;local_supported_dof;
1439 &#32;&#32;local_supported_dof.resize(ndofs);
1440 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;min&#32;=&#32;ndofs;
1441 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;max&#32;=&#32;-1;
1442 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=0;&#32;i&#32;&lt;static_cast&lt;int&gt;(ndofs);&#32;i++)&#32;{
1443 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;<link linkend="class_space_transformation_1a487c356afef667763e244f3a93df4c8a">IsDofFree</link>(i))&#32;{
1444 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;double,&#32;double&gt;&#32;support&#32;=&#32;st-&gt;dof_support(i);
1445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((support.first&#32;&lt;=&#32;minimum_local_z&#32;&amp;&amp;&#32;support.second&#32;&gt;=&#32;maximum_local_z)&#32;||(support.first&#32;&gt;=&#32;minimum_local_z&#32;&amp;&amp;&#32;support.second&#32;&lt;=&#32;maximum_local_z)&#32;||(support.first&#32;&lt;=&#32;maximum_local_z&#32;&amp;&amp;&#32;support.second&#32;&gt;=&#32;minimum_local_z))&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;max)&#32;{
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max&#32;=&#32;i;
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;min)&#32;{
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min&#32;=&#32;i;
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1452 &#32;&#32;&#32;&#32;&#32;&#32;}
1453 &#32;&#32;&#32;&#32;}
1454 &#32;&#32;}
1455 
1456 &#32;&#32;QGauss&lt;3&gt;&#32;&#32;quadrature_formula(1);
1457 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;real(0);
1458 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;imag(3);
1459 &#32;&#32;FEValues&lt;3&gt;&#32;fe_values(fe,&#32;quadrature_formula,&#32;update_values&#32;|&#32;update_gradients&#32;|&#32;update_JxW_values&#32;|&#32;update_quadrature_points);
1460 &#32;&#32;std::vector&lt;Point&lt;3&gt;&#32;&gt;&#32;quadrature_points;
1461 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;&#32;&#32;n_q_points&#32;&#32;&#32;=&#32;quadrature_formula.size();
1462 
1463 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;transformation;
1464 
1465 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;total&#32;=&#32;triangulation.n_active_cells()&#32;*&#32;quadrature_formula.size();
1466 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;counter&#32;=&#32;0;
1467 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;returned_vector&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[6];
1468 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;temp_counter&#32;=&#32;0;&#32;temp_counter&#32;&lt;&#32;2;&#32;temp_counter++)&#32;{
1469 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(((GlobalParams.NumberProcesses%2&#32;==&#32;1)&#32;&amp;&amp;&#32;(static_cast&lt;int&gt;(rank)&#32;==&#32;GlobalParams.NumberProcesses/2&#32;-1)&#32;&amp;&amp;&#32;temp_counter&#32;==&#32;0))&#32;{
1470 &#32;&#32;&#32;&#32;&#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;middle&#32;phase&quot;</emphasis>);
1471 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;This&#32;process&#32;is&#32;now&#32;computing&#32;its&#32;own&#32;contributions&#32;to&#32;the&#32;shape&#32;gradient.&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;std::endl;
1472 
1473 &#32;&#32;&#32;&#32;&#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
1474 &#32;&#32;&#32;&#32;&#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),
1475 &#32;&#32;&#32;&#32;&#32;&#32;endc&#32;=&#32;dof_handler.end();
1476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe_values.reinit(cell);
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points&#32;=&#32;fe_values.get_quadrature_points();
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;q_index=0;&#32;q_index&#32;&lt;&#32;n_q_points;&#32;++q_index)&#32;{
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;own_solution&#32;=&#32;solution_evaluation(quadrature_points[q_index]);
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;other_solution&#32;=&#32;adjoint_solution_evaluation(quadrature_points[q_index]);
1483 
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;JxW&#32;=&#32;fe_values.JxW(q_index);
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;min;&#32;j&#32;&lt;=&#32;max;&#32;j++)&#32;{
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation&#32;=&#32;st-&gt;get_Tensor_for_step(quadrature_points[q_index],&#32;j,&#32;stepwidth);
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;point_in_dof_support(quadrature_points[q_index],&#32;j))&#32;{
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[j]&#32;+=&#32;own_solution&#32;*&#32;transformation&#32;*&#32;other_solution&#32;*&#32;JxW;
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter++;
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((counter-1)/(total/10)&#32;!=(counter)/(total/10))&#32;{
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;static_cast&lt;int&gt;(100&#32;*(counter)/(total))&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;%&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1497 &#32;&#32;&#32;&#32;&#32;&#32;}
1498 
1499 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1500 &#32;&#32;&#32;&#32;&#32;&#32;deallog.pop();
1501 
1502 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&gt;=&#32;temp_counter&#32;*(GlobalParams.NumberProcesses)/2&#32;&amp;&amp;&#32;rank&#32;&lt;(1+temp_counter)*(GlobalParams.NumberProcesses&#32;)/2)&#32;{
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;local&#32;cell&#32;phase&quot;</emphasis>);
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;This&#32;process&#32;is&#32;now&#32;computing&#32;its&#32;own&#32;contributions&#32;to&#32;the&#32;shape&#32;gradient&#32;together&#32;with&#32;&quot;</emphasis>&lt;&lt;&#32;other_proc&#32;&lt;&lt;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&#32;&lt;&lt;&#32;std::endl;
1506 
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endc&#32;=&#32;dof_handler.end();
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe_values.reinit(cell);
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points&#32;=&#32;fe_values.get_quadrature_points();
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;q_index=0;&#32;q_index&#32;&lt;&#32;n_q_points;&#32;++q_index)&#32;{
1515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;own_solution&#32;=&#32;solution_evaluation(quadrature_points[q_index]);
1516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;quadrature_points[q_index][0],&#32;3,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm);
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Recv(&amp;returned_vector[0],&#32;6,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm,&#32;MPI_STATUS_IGNORE);
1518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;other_solution;
1519 
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[0].real(returned_vector[0]);
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[0].imag(-&#32;returned_vector[1]);
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[1].real(returned_vector[2]);
1523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[1].imag(-&#32;returned_vector[3]);
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[2].real(returned_vector[4]);
1525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[2].imag(-&#32;returned_vector[5]);
1526 
1527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;JxW&#32;=&#32;fe_values.JxW(q_index);
1528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;min;&#32;j&#32;&lt;=&#32;max;&#32;j++)&#32;{
1529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation&#32;=&#32;st-&gt;get_Tensor_for_step(quadrature_points[q_index],&#32;j,&#32;stepwidth);
1530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;point_in_dof_support(quadrature_points[q_index],&#32;j))&#32;{
1531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[j]&#32;+=&#32;own_solution&#32;*&#32;transformation&#32;*&#32;other_solution&#32;*&#32;JxW;
1532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter++;
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((counter-1)/(total/10)&#32;!=(counter)/(total/10))&#32;{
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;static_cast&lt;int&gt;(100&#32;*(counter)/(total))&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;%&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1541 
1542 
1543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;*&#32;end_signal&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[3];
1544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_signal[0]&#32;=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0;
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_signal[1]&#32;=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0;
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_signal[2]&#32;=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0;
1547 
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;end_signal[0],&#32;3,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm);
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.pop();
1551 
1552 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;non-local&#32;cell&#32;phase&quot;</emphasis>);
1554 
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;This&#32;process&#32;is&#32;now&#32;adjoint&#32;based&#32;contributions&#32;for&#32;process&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;other_proc&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;normal&#32;=&#32;<emphasis class="keyword">true</emphasis>;
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(normal)&#32;{
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;position_array&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[3];
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Recv(&amp;position_array[0],&#32;3,&#32;MPI_DOUBLE,&#32;other_proc&#32;,&#32;0,&#32;mpi_comm,&#32;MPI_STATUS_IGNORE);
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal&#32;=&#32;<emphasis class="keyword">false</emphasis>;
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position_array[i]&#32;!=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0)&#32;{
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal&#32;=&#32;<emphasis class="keyword">true</emphasis>;
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Received&#32;request&#32;for&#32;(&quot;&#32;&lt;&lt;&#32;position_array[0]&#32;&lt;&lt;&#32;&quot;,&#32;&quot;&lt;&lt;&#32;position_array[1]&#32;&lt;&lt;&#32;&quot;,&#32;&quot;&lt;&lt;position_array[2]&lt;&lt;&quot;)&quot;&lt;&lt;std::endl;</emphasis>
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(normal)&#32;{
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;result&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[6];
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;position;
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position[i]&#32;=&#32;position_array[i];
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjoint_solution_evaluation(position,&#32;result);
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;result[0],&#32;6,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm);
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Sent&#32;a&#32;solution.&quot;&lt;&lt;std::endl;</emphasis>
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.pop();
1580 &#32;&#32;&#32;&#32;&#32;&#32;}
1581 &#32;&#32;&#32;&#32;}
1582 &#32;&#32;&#32;&#32;
1583 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1584 &#32;&#32;}
1585 
1586 
1587 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&#32;Communicating:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1588 
1589 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;input&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[2*ndofs];
1590 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;output&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[2*ndofs];
1591 
1592 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
1593 &#32;&#32;&#32;&#32;input[2*i]&#32;=&#32;ret[i].real();
1594 &#32;&#32;&#32;&#32;input[2*i&#32;+1]&#32;=&#32;ret[i].imag();
1595 &#32;&#32;}
1596 
1597 &#32;&#32;MPI_Allreduce(input,&#32;output,&#32;2&#32;*ndofs,&#32;MPI_DOUBLE,&#32;MPI_SUM,&#32;MPI_COMM_WORLD);
1598 
1599 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
1600 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;-1.0&#32;*&#32;std::complex&lt;double&gt;(output[2*i&#32;+1],&#32;output[2*i])&#32;/&#32;stepwidth;
1601 &#32;&#32;}
1602 
1603 &#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;input;
1604 &#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;output;
1605 
1606 &#32;&#32;deallog.pop();
1607 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1608 }
1609 
1610 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::solution_evaluation(Point&lt;3,&#32;double&gt;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1611 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1612 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1613 
1614 &#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_with_relevant,&#32;position,&#32;result);
1615 
1616 &#32;&#32;ret[0]&#32;=&#32;std::complex&lt;double&gt;(result(0),&#32;result(3));
1617 &#32;&#32;ret[1]&#32;=&#32;std::complex&lt;double&gt;(result(1),&#32;result(4));
1618 &#32;&#32;ret[2]&#32;=&#32;std::complex&lt;double&gt;(result(2),&#32;result(5));
1619 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1620 }
1621 
1622 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::solution_evaluation(Point&lt;3,&#32;double&gt;&#32;position,&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;sol)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1623 &#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Process&#32;&quot;&#32;&lt;&lt;&#32;GlobalParams.MPI_Rank&#32;&lt;&lt;&#32;&quot;&#32;as&#32;&quot;&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;&quot;&#32;evaluating&#32;at(&quot;&#32;&lt;&lt;&#32;position[0]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[1]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[2]&#32;&lt;&lt;&#32;&quot;).&#32;The&#32;local&#32;range&#32;is&#32;[&quot;&lt;&lt;&#32;minimum_local_z&lt;&lt;&quot;,&quot;&lt;&lt;maximum_local_z&lt;&lt;&quot;]&quot;&lt;&lt;&#32;std::endl;</emphasis>
1624 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1625 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1626 &#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_with_relevant,&#32;position,&#32;result);
1627 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
1628 &#32;&#32;&#32;&#32;sol[i]&#32;=&#32;result(i);
1629 &#32;&#32;}
1630 }
1631 
1632 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::adjoint_solution_evaluation(Point&lt;3,&#32;double&gt;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1633 &#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Process&#32;&quot;&#32;&lt;&lt;&#32;GlobalParams.MPI_Rank&#32;&lt;&lt;&#32;&quot;&#32;as&#32;&quot;&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;&quot;&#32;evaluating&#32;at(&quot;&#32;&lt;&lt;&#32;position[0]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[1]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[2]&#32;&lt;&lt;&#32;&quot;).&#32;The&#32;local&#32;range&#32;is&#32;[&quot;&lt;&lt;&#32;minimum_local_z&lt;&lt;&quot;,&quot;&lt;&lt;maximum_local_z&lt;&lt;&quot;]&quot;&lt;&lt;&#32;std::endl;</emphasis>
1634 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1635 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1636 &#32;&#32;position[2]&#32;=&#32;-&#32;position[2];
1637 &#32;&#32;VectorTools::point_value(dof_handler,&#32;dual_with_relevant,&#32;position,&#32;result);
1638 &#32;&#32;ret[0]&#32;=&#32;std::complex&lt;double&gt;(result(0),&#32;result(3));
1639 &#32;&#32;ret[1]&#32;=&#32;std::complex&lt;double&gt;(-&#32;result(1),&#32;-&#32;result(4));
1640 &#32;&#32;ret[2]&#32;=&#32;std::complex&lt;double&gt;(-&#32;result(2),&#32;-&#32;result(5));
1641 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1642 }
1643 
1644 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::adjoint_solution_evaluation(Point&lt;3,&#32;double&gt;&#32;position,&#32;<emphasis class="keywordtype">double</emphasis>&#32;*&#32;sol)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1645 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1646 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1647 &#32;&#32;position[2]&#32;=&#32;-&#32;position[2];
1648 &#32;&#32;VectorTools::point_value(dof_handler,&#32;dual_with_relevant,&#32;position,&#32;result);
1649 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
1650 &#32;&#32;&#32;&#32;sol[i]&#32;=&#32;-result(i);
1651 &#32;&#32;}
1652 &#32;&#32;sol[0]&#32;*=&#32;-1;
1653 &#32;&#32;sol[1]&#32;*=&#32;-1;
1654 }
1655 
1656 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reset_changes()&#32;{
1657 &#32;&#32;reinit_all();
1658 }
1659 
1660 SolverControl::State&#32;Waveguide::residual_tracker(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Iteration,&#32;<emphasis class="keywordtype">double</emphasis>&#32;residual,&#32;dealii::TrilinosWrappers::MPI::BlockVector)&#32;{
1661 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((GlobalParams.O_C_D_ConvergenceFirst&#32;&amp;&amp;&#32;run_number&#32;==&#32;0)&#32;||&#32;GlobalParams.O_C_D_ConvergenceAll)&#32;{
1662 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>timeval&#32;tp;
1663 &#32;&#32;&#32;&#32;gettimeofday(&amp;tp,&#32;NULL);
1664 &#32;&#32;&#32;&#32;int64_t&#32;ms&#32;=&#32;tp.tv_sec&#32;*&#32;1000&#32;+&#32;tp.tv_usec&#32;/&#32;1000&#32;-&#32;solver_start_milis;
1665 
1666 &#32;&#32;&#32;&#32;Convergence_Table.add_value(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,&#32;Iteration);
1667 &#32;&#32;&#32;&#32;Convergence_Table.add_value(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,&#32;residual);
1668 &#32;&#32;&#32;&#32;Convergence_Table.add_value(path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Time&quot;</emphasis>,&#32;std::to_string(ms));
1669 &#32;&#32;}
1670 &#32;&#32;steps&#32;=&#32;Iteration;
1671 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;SolverControl::success;;
1672 }
1673 
1674 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
