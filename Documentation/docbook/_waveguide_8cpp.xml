<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_waveguide_8cpp">
    <title>Waveguide.cpp File Reference</title>
    <programlisting>#include &quot;Waveguide.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/std_cxx11/bind.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/timer.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/shared_tria.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/tria.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/dofs/dof_handler.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/tria_boundary_lib.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/block_matrix_array.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/block_sparsity_pattern.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/dynamic_sparsity_pattern.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/solver.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/solver_bicgstab.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/sparsity_tools.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_block_sparse_matrix.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_precondition.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/numerics/data_out_dof_data.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/numerics/vector_tools.h&gt;</programlisting>
    <programlisting>#include &lt;sys/time.h&gt;</programlisting>
    <programlisting>#include &lt;algorithm&gt;</programlisting>
    <programlisting>#include &lt;string&gt;</programlisting>
    <programlisting>#include &lt;utility&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &quot;../Helpers/ExactSolution.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/HomogenousTransformationCircular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/HomogenousTransformationRectangular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/InhomogenousTransformationCircular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/InhomogenousTransformationRectangular.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/SpaceTransformation.h&quot;</programlisting>
    <programlisting>#include &quot;PreconditionerSweeping.h&quot;</programlisting>
    <programlisting>#include &quot;SolutionWeight.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_waveguide_8cpp_1a1167a41478148503119307d88cacdfcc">WaveguideCppFlag</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="_waveguide_8cpp_1ab4ae7205573977222eadd0795db193e2">steps</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="struct_parameters">Parameters</link> <link linkend="_waveguide_8cpp_1a76239e059c1f8545b24809e138decdb7">GlobalParams</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_mode_manager">ModeManager</link> <link linkend="_waveguide_8cpp_1a2540c1b01e5c3d0d044ed313cefb0e36">ModeMan</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::ConvergenceTable <link linkend="_waveguide_8cpp_1a85bc643b803a3dea5bb9135ff360cef4">Convergence_Table</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::TableHandler <link linkend="_waveguide_8cpp_1ac9986726c30e30de323acd6975664b9f">Optimization_Steps</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double * <link linkend="_waveguide_8cpp_1a50c05eebe0d325f44416da346c81c775">steps_widths</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Core/Waveguide.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">//&#32;Copyright&#32;2018&#32;Pascal&#32;Kraft</emphasis>
2 <emphasis class="preprocessor">#ifndef&#32;WaveguideCppFlag</emphasis>
3 <emphasis class="preprocessor">#define&#32;WaveguideCppFlag</emphasis>
4 
5 <emphasis class="preprocessor">#include&#32;&quot;Waveguide.h&quot;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/std_cxx11/bind.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/timer.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/shared_tria.h&gt;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/tria.h&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&lt;deal.II/dofs/dof_handler.h&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/tria_boundary_lib.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/block_matrix_array.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/block_sparsity_pattern.h&gt;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/dynamic_sparsity_pattern.h&gt;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/solver.h&gt;</emphasis>
16 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/solver_bicgstab.h&gt;</emphasis>
17 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/sparsity_tools.h&gt;</emphasis>
18 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_block_sparse_matrix.h&gt;</emphasis>
19 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_precondition.h&gt;</emphasis>
20 <emphasis class="preprocessor">#include&#32;&lt;deal.II/numerics/data_out_dof_data.h&gt;</emphasis>
21 <emphasis class="preprocessor">#include&#32;&lt;deal.II/numerics/vector_tools.h&gt;</emphasis>
22 <emphasis class="preprocessor">#include&#32;&lt;sys/time.h&gt;</emphasis>
23 <emphasis class="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
24 <emphasis class="preprocessor">#include&#32;&lt;string&gt;</emphasis>
25 <emphasis class="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
26 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
27 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/ExactSolution.h&quot;</emphasis>
28 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
29 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/HomogenousTransformationCircular.h&quot;</emphasis>
30 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/HomogenousTransformationRectangular.h&quot;</emphasis>
31 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/InhomogenousTransformationCircular.h&quot;</emphasis>
32 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/InhomogenousTransformationRectangular.h&quot;</emphasis>
33 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/SpaceTransformation.h&quot;</emphasis>
34 <emphasis class="preprocessor">#include&#32;&quot;PreconditionerSweeping.h&quot;</emphasis>
35 <emphasis class="preprocessor">#include&#32;&quot;SolutionWeight.h&quot;</emphasis>
36 
37 <emphasis class="keywordtype">int</emphasis>&#32;steps&#32;=&#32;0;
38 <link linkend="struct_parameters">Parameters</link>&#32;GlobalParams;
39 <link linkend="class_mode_manager">ModeManager</link>&#32;ModeMan;
40 dealii::ConvergenceTable&#32;Convergence_Table;
41 dealii::TableHandler&#32;Optimization_Steps;
42 <emphasis class="keywordtype">double</emphasis>&#32;*steps_widths;
43 
<link linkend="class_waveguide_1aacf2484e402aa1afc05b1b278ea8ce73">44 </link><link linkend="class_waveguide_1aacf2484e402aa1afc05b1b278ea8ce73">Waveguide::Waveguide</link>(MPI_Comm&#32;in_mpi_comm,&#32;<link linkend="class_mesh_generator">MeshGenerator</link>&#32;*in_mg,
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*in_st)
46 &#32;&#32;&#32;&#32;:&#32;fe(FE_Nedelec&lt;3&gt;(GlobalParams.So_ElementOrder),&#32;2),
47 &#32;&#32;&#32;&#32;&#32;&#32;triangulation(in_mpi_comm,
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::MeshSmoothing(
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::none),
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::Settings::no_automatic_repartitioning),
52 &#32;&#32;&#32;&#32;&#32;&#32;even(Utilities::MPI::this_mpi_process(in_mpi_comm)&#32;%&#32;2&#32;==&#32;0),
53 &#32;&#32;&#32;&#32;&#32;&#32;rank(Utilities::MPI::this_mpi_process(in_mpi_comm)),
54 &#32;&#32;&#32;&#32;&#32;&#32;real(0),
55 &#32;&#32;&#32;&#32;&#32;&#32;imag(3),
56 &#32;&#32;&#32;&#32;&#32;&#32;solver_control(GlobalParams.So_TotalSteps,&#32;GlobalParams.So_Precision,
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;true,&#32;true),
58 &#32;&#32;&#32;&#32;&#32;&#32;dof_handler(triangulation),
59 &#32;&#32;&#32;&#32;&#32;&#32;run_number(0),
60 &#32;&#32;&#32;&#32;&#32;&#32;condition_file_counter(0),
61 &#32;&#32;&#32;&#32;&#32;&#32;eigenvalue_file_counter(0),
62 &#32;&#32;&#32;&#32;&#32;&#32;Layers(GlobalParams.NumberProcesses),
63 &#32;&#32;&#32;&#32;&#32;&#32;Dofs_Below_Subdomain(Layers),
64 &#32;&#32;&#32;&#32;&#32;&#32;Block_Sizes(Layers),
65 &#32;&#32;&#32;&#32;&#32;&#32;is_stored(false),
66 &#32;&#32;&#32;&#32;&#32;&#32;Sectors(GlobalParams.M_W_Sectors),
67 &#32;&#32;&#32;&#32;&#32;&#32;minimum_local_z(2.0&#32;*&#32;GlobalParams.M_R_ZLength),
68 &#32;&#32;&#32;&#32;&#32;&#32;maximum_local_z(-2.0&#32;*&#32;GlobalParams.M_R_ZLength),
69 &#32;&#32;&#32;&#32;&#32;&#32;pout(<link linkend="namespacestd">std</link>::cout,&#32;rank&#32;==&#32;0),
70 &#32;&#32;&#32;&#32;&#32;&#32;timer(in_mpi_comm,&#32;pout,&#32;TimerOutput::OutputFrequency::summary,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimerOutput::wall_times),
72 &#32;&#32;&#32;&#32;&#32;&#32;es(GlobalParams.M_C_Shape&#32;==&#32;ConnectorType::Rectangle)&#32;{
73 &#32;&#32;mg&#32;=&#32;in_mg;
74 &#32;&#32;st&#32;=&#32;in_st;
75 &#32;&#32;mpi_comm&#32;=&#32;in_mpi_comm;
76 &#32;&#32;solution&#32;=&#32;NULL;
77 &#32;&#32;is_stored&#32;=&#32;<emphasis class="keyword">false</emphasis>;
78 &#32;&#32;solver_control.log_frequency(10);
79 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;number&#32;=&#32;Layers&#32;-&#32;1;
80 &#32;&#32;qualities&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[number];
81 &#32;&#32;execute_recomputation&#32;=&#32;<emphasis class="keyword">false</emphasis>;
82 &#32;&#32;mkdir((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;<emphasis class="stringliteral">&quot;primal&quot;</emphasis>).c_str(),&#32;ACCESSPERMS);
83 &#32;&#32;mkdir((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;<emphasis class="stringliteral">&quot;dual&quot;</emphasis>).c_str(),&#32;ACCESSPERMS);
84 }
85 
86 Waveguide::~Waveguide()&#32;{}
87 
<link linkend="class_waveguide_1a79986c7554f0cd73cb13a3494caf6eab">88 </link>std::complex&lt;double&gt;&#32;<link linkend="class_waveguide_1a79986c7554f0cd73cb13a3494caf6eab">Waveguide::evaluate_for_Position</link>(<emphasis class="keywordtype">double</emphasis>&#32;x,&#32;<emphasis class="keywordtype">double</emphasis>&#32;y,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;{
90 &#32;&#32;dealii::Point&lt;3,&#32;double&gt;&#32;position(x,&#32;y,&#32;z);
91 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
92 &#32;&#32;Vector&lt;double&gt;&#32;mode(6);
93 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
94 &#32;&#32;&#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_with_relevant,&#32;position,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result);
96 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
97 &#32;&#32;&#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_solution,&#32;position,&#32;result);
98 &#32;&#32;}
99 &#32;&#32;position[2]&#32;=&#32;GlobalParams.Minimum_Z;
100 &#32;&#32;this-&gt;es.<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(position,&#32;mode);
101 
102 &#32;&#32;std::complex&lt;double&gt;&#32;c1(result(0),&#32;result(3));
103 &#32;&#32;std::complex&lt;double&gt;&#32;c2(result(1),&#32;result(4));
104 &#32;&#32;std::complex&lt;double&gt;&#32;c3(result(2),&#32;result(5));
105 &#32;&#32;std::complex&lt;double&gt;&#32;m1(mode(0),&#32;mode(3));
106 &#32;&#32;std::complex&lt;double&gt;&#32;m2(mode(1),&#32;mode(4));
107 &#32;&#32;std::complex&lt;double&gt;&#32;m3(mode(2),&#32;mode(5));
108 
109 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;m1&#32;*&#32;c1&#32;+&#32;m2&#32;*&#32;c2&#32;+&#32;m3&#32;*&#32;c3;
110 }
111 
<link linkend="class_waveguide_1aecce672b929c81b8966198043bff646a">112 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_waveguide_1aecce672b929c81b8966198043bff646a">Waveguide::estimate_solution</link>()&#32;{
113 &#32;&#32;MPI_Barrier(mpi_comm);
114 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;estimate_solution&quot;</emphasis>);
115 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Starting&#32;solution&#32;estimation...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
116 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
117 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Lambda:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;GlobalParams.M_W_Lambda&#32;&lt;&lt;&#32;std::endl;
118 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;min_dof&#32;=&#32;locally_owned_dofs.nth_index_in_set(0);
119 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;max_dof&#32;=
120 &#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs.nth_index_in_set(locally_owned_dofs.n_elements()&#32;-&#32;1);
121 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),&#32;endc&#32;=&#32;dof_handler.end();
122 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
123 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_dof_indices(
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_line);
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_dof_indices);
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;double&gt;&#32;ptemp&#32;=
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(ptemp[2]&#32;-&#32;GlobalParams.Minimum_Z)&#32;&gt;&#32;0.0001)&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;p(ptemp[0],&#32;ptemp[1],&#32;ptemp[2]);
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;double&gt;&#32;dtemp&#32;=&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;vertex(0)&#32;-
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;vertex(1);
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dtemp&#32;=&#32;dtemp&#32;/&#32;dtemp.norm();
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;direction(dtemp[0],&#32;dtemp[1],&#32;dtemp[2]);
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&lt;double&gt;&#32;val(6);
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;es.<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(p,&#32;val);
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;a&#32;=&#32;direction(0)&#32;*&#32;val(0)&#32;+&#32;direction(1)&#32;*&#32;val(1)&#32;+
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;direction(2)&#32;*&#32;val(2);
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;b&#32;=&#32;direction(0)&#32;*&#32;val(3)&#32;+&#32;direction(1)&#32;*&#32;val(4)&#32;+
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;direction(2)&#32;*&#32;val(5);
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(local_dof_indices[0]&#32;&gt;=&#32;min_dof&#32;&amp;&amp;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;local_dof_indices[0]&#32;&lt;&#32;max_dof)&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EstimatedSolution[local_dof_indices[0]]&#32;=&#32;a;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(local_dof_indices[1]&#32;&gt;=&#32;min_dof&#32;&amp;&amp;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;local_dof_indices[1]&#32;&lt;&#32;max_dof)&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EstimatedSolution[local_dof_indices[1]]&#32;=&#32;b;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
153 &#32;&#32;&#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;}
155 &#32;&#32;}
156 &#32;&#32;MPI_Barrier(mpi_comm);
157 &#32;&#32;EstimatedSolution.compress(VectorOperation::insert);
158 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
159 &#32;&#32;deallog.pop();
160 }
161 
162 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::Conjugate_Tensor(
163 &#32;&#32;&#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;input)&#32;{
164 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
165 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
166 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;ret[i][j].real(input[i][j].real());
168 &#32;&#32;&#32;&#32;&#32;&#32;ret[i][j].imag(-input[i][j].imag());
169 &#32;&#32;&#32;&#32;}
170 &#32;&#32;}
171 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
172 }
173 
174 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::Conjugate_Vector(
175 &#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;input)&#32;{
176 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
177 
178 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
179 &#32;&#32;&#32;&#32;ret[i].real(input[i].real());
180 &#32;&#32;&#32;&#32;ret[i].imag(-input[i].imag());
181 &#32;&#32;}
182 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
183 }
184 
185 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::make_grid()&#32;{
186 &#32;&#32;mg-&gt;<link linkend="class_mesh_generator_1aa3a673744db2c5ad3e6fae65af4afb6b">prepare_triangulation</link>(&amp;triangulation);
187 &#32;&#32;dof_handler.distribute_dofs(fe);
188 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::active_cell_iterator
189 &#32;&#32;&#32;&#32;&#32;&#32;cell&#32;=&#32;triangulation.begin_active(),
190 &#32;&#32;&#32;&#32;&#32;&#32;endc&#32;=&#32;triangulation.end();
191 &#32;&#32;minimum_local_z&#32;=&#32;2.0&#32;*&#32;GlobalParams.M_R_ZLength;
192 &#32;&#32;maximum_local_z&#32;=&#32;-2.0&#32;*&#32;GlobalParams.M_R_ZLength;
193 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
194 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;temp&#32;=&#32;(cell-&gt;face(i)-&gt;center())[2];
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(temp&#32;&lt;&#32;minimum_local_z)&#32;minimum_local_z&#32;=&#32;temp;
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(temp&#32;&gt;&#32;maximum_local_z)&#32;maximum_local_z&#32;=&#32;temp;
199 &#32;&#32;&#32;&#32;&#32;&#32;}
200 &#32;&#32;&#32;&#32;}
201 &#32;&#32;}
202 
203 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Process&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;GlobalParams.MPI_Rank&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;as&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rank
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&#32;The&#32;local&#32;range&#32;is&#32;[&quot;</emphasis>&#32;&lt;&lt;&#32;minimum_local_z&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,&quot;</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;maximum_local_z&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;]&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
206 }
207 
208 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::Compute_Dof_Numbers()&#32;{
209 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;dof_indices(fe.dofs_per_face);
210 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;DofsPerSubdomain(Layers);
211 &#32;&#32;std::vector&lt;int&gt;&#32;InternalBoundaryDofs(Layers);
212 
213 &#32;&#32;DofsPerSubdomain&#32;=&#32;dof_handler.n_locally_owned_dofs_per_processor();
214 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
215 &#32;&#32;&#32;&#32;Block_Sizes[i]&#32;=&#32;DofsPerSubdomain[i];
216 &#32;&#32;}
217 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Layers:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Layers&#32;&lt;&lt;&#32;std::endl;
218 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
219 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;Block_Sizes[i]&#32;&lt;&lt;&#32;std::endl;
220 &#32;&#32;}
221 
222 &#32;&#32;Dofs_Below_Subdomain[0]&#32;=&#32;0;
223 
224 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
225 &#32;&#32;&#32;&#32;Dofs_Below_Subdomain[i]&#32;=&#32;Dofs_Below_Subdomain[i&#32;-&#32;1]&#32;+&#32;Block_Sizes[i&#32;-&#32;1];
226 &#32;&#32;}
227 
228 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
229 &#32;&#32;&#32;&#32;IndexSet&#32;temp(dof_handler.n_dofs());
230 &#32;&#32;&#32;&#32;temp.clear();
231 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Adding&#32;Block&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;i&#32;+&#32;1&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;+&#32;Block_Sizes[i]&#32;-&#32;1
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
234 &#32;&#32;&#32;&#32;temp.add_range(Dofs_Below_Subdomain[i],
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Dofs_Below_Subdomain[i]&#32;+&#32;Block_Sizes[i]);
236 &#32;&#32;&#32;&#32;<emphasis class="keyword">set</emphasis>.push_back(temp);
237 &#32;&#32;}
238 }
239 
240 IndexSet&#32;Waveguide::combine_indexes(IndexSet&#32;lower,&#32;IndexSet&#32;upper)<emphasis class="keyword">&#32;const&#32;</emphasis>{
241 &#32;&#32;IndexSet&#32;ret(lower.size()&#32;+&#32;upper.size());
242 &#32;&#32;ret.add_indices(lower);
243 &#32;&#32;ret.add_indices(upper,&#32;lower.size());
244 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
245 }
246 
247 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::switch_to_primal(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*primal_st)&#32;{
248 &#32;&#32;st&#32;=&#32;primal_st;
249 &#32;&#32;solution&#32;=&#32;&amp;primal_solution;
250 &#32;&#32;primal&#32;=&#32;<emphasis class="keyword">true</emphasis>;
251 &#32;&#32;path_prefix&#32;=&#32;<emphasis class="stringliteral">&quot;primal&quot;</emphasis>;
252 }
253 
254 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::switch_to_dual(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*dual_st)&#32;{
255 &#32;&#32;st&#32;=&#32;dual_st;
256 &#32;&#32;solution&#32;=&#32;&amp;dual_solution;
257 &#32;&#32;primal&#32;=&#32;<emphasis class="keyword">false</emphasis>;
258 &#32;&#32;path_prefix&#32;=&#32;<emphasis class="stringliteral">&quot;dual&quot;</emphasis>;
259 }
260 
261 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::setup_system()&#32;{
262 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;setup_system&quot;</emphasis>);
263 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Assembling&#32;IndexSets&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
264 &#32;&#32;locally_owned_dofs&#32;=&#32;dof_handler.locally_owned_dofs();
265 &#32;&#32;DoFTools::extract_locally_active_dofs(dof_handler,&#32;locally_active_dofs);
266 &#32;&#32;DoFTools::extract_locally_relevant_dofs(dof_handler,&#32;locally_relevant_dofs);
267 &#32;&#32;std::vector&lt;unsigned&#32;int&gt;&#32;n_neighboring&#32;=
268 &#32;&#32;&#32;&#32;&#32;&#32;dof_handler.n_locally_owned_dofs_per_processor();
269 &#32;&#32;extended_relevant_dofs&#32;=&#32;locally_relevant_dofs;
270 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&gt;&#32;0)&#32;{
271 &#32;&#32;&#32;&#32;extended_relevant_dofs.add_range(
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs.nth_index_in_set(0)&#32;-&#32;n_neighboring[rank&#32;-&#32;1],
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs.nth_index_in_set(0));
274 &#32;&#32;}
275 
276 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Computing&#32;block&#32;counts&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
277 &#32;&#32;<emphasis class="comment">//&#32;Here&#32;we&#32;start&#32;computing&#32;the&#32;distribution&#32;of&#32;entries(indices&#32;thereof)&#32;to&#32;the</emphasis>
278 &#32;&#32;<emphasis class="comment">//&#32;specific&#32;blocks&#32;of&#32;the&#32;3&#32;matrices(system&#32;matrix&#32;and&#32;the&#32;2&#32;preconditioner</emphasis>
279 &#32;&#32;<emphasis class="comment">//&#32;matrices.)</emphasis>
280 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;prec_even_block_count&#32;=&#32;Utilities::MPI::n_mpi_processes(mpi_comm)&#32;/&#32;2;
281 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Utilities::MPI::n_mpi_processes(mpi_comm)&#32;%&#32;2&#32;==&#32;1)&#32;{
282 &#32;&#32;&#32;&#32;prec_even_block_count++;
283 &#32;&#32;}
284 
285 &#32;&#32;i_sys_owned.resize(Layers);
286 
287 &#32;&#32;i_sys_readable.resize(Layers);
288 
289 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
290 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;size&#32;=&#32;Block_Sizes[i];
291 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;local&#32;=&#32;(i&#32;==&#32;rank);
292 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;readable&#32;=&#32;(i&#32;==&#32;rank)&#32;||&#32;(i&#32;==&#32;rank&#32;+&#32;1);
293 &#32;&#32;&#32;&#32;IndexSet&#32;temp(size);
294 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(local)&#32;{
295 &#32;&#32;&#32;&#32;&#32;&#32;temp.add_range(0,&#32;size);
296 &#32;&#32;&#32;&#32;}
297 &#32;&#32;&#32;&#32;IndexSet&#32;temp2(size);
298 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(readable)&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;temp2.add_range(0,&#32;size);
300 &#32;&#32;&#32;&#32;}
301 
302 &#32;&#32;&#32;&#32;i_sys_owned[i]&#32;=&#32;temp;
303 &#32;&#32;&#32;&#32;i_sys_readable[i]&#32;=&#32;temp2;
304 &#32;&#32;}
305 
306 &#32;&#32;i_prec_even_owned_row.resize(Layers);
307 &#32;&#32;i_prec_even_owned_col.resize(Layers);
308 &#32;&#32;i_prec_even_writable.resize(Layers);
309 &#32;&#32;i_prec_odd_owned_row.resize(Layers);
310 &#32;&#32;i_prec_odd_owned_col.resize(Layers);
311 &#32;&#32;i_prec_odd_writable.resize(Layers);
312 
313 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
314 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;size&#32;=&#32;Block_Sizes[i];
315 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;even_row_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
316 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">false</emphasis>;
317 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;even_col_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
318 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;+&#32;1)&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_col_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
323 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;-&#32;1)&#32;{
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
327 &#32;&#32;&#32;&#32;&#32;&#32;}
328 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;-&#32;1)&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;even_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
331 &#32;&#32;&#32;&#32;&#32;&#32;}
332 &#32;&#32;&#32;&#32;}
333 &#32;&#32;&#32;&#32;IndexSet&#32;ero(size);
334 &#32;&#32;&#32;&#32;IndexSet&#32;erw(size);
335 &#32;&#32;&#32;&#32;IndexSet&#32;eco(size);
336 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even_row_owned)&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;ero.add_range(0,&#32;size);
338 &#32;&#32;&#32;&#32;}
339 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even_row_writable)&#32;{
340 &#32;&#32;&#32;&#32;&#32;&#32;erw.add_range(0,&#32;size);
341 &#32;&#32;&#32;&#32;}
342 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even_col_owned)&#32;{
343 &#32;&#32;&#32;&#32;&#32;&#32;eco.add_range(0,&#32;size);
344 &#32;&#32;&#32;&#32;}
345 
346 &#32;&#32;&#32;&#32;i_prec_even_owned_row[i]&#32;=&#32;ero;
347 &#32;&#32;&#32;&#32;i_prec_even_owned_col[i]&#32;=&#32;eco;
348 &#32;&#32;&#32;&#32;i_prec_even_writable[i]&#32;=&#32;erw;
349 &#32;&#32;}
350 
351 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
352 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;size&#32;=&#32;Block_Sizes[i];
353 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;odd_row_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
354 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">false</emphasis>;
355 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;odd_col_owned&#32;=&#32;<emphasis class="keyword">false</emphasis>;
356 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!even)&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;+&#32;1)&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_col_owned&#32;=&#32;<emphasis class="keyword">true</emphasis>;
361 &#32;&#32;&#32;&#32;&#32;&#32;}
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;-&#32;1)&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
364 &#32;&#32;&#32;&#32;&#32;&#32;}
365 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;==&#32;rank&#32;||&#32;i&#32;==&#32;rank&#32;-&#32;1)&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;odd_row_writable&#32;=&#32;<emphasis class="keyword">true</emphasis>;
368 &#32;&#32;&#32;&#32;&#32;&#32;}
369 &#32;&#32;&#32;&#32;}
370 &#32;&#32;&#32;&#32;IndexSet&#32;oro(size);
371 &#32;&#32;&#32;&#32;IndexSet&#32;orw(size);
372 &#32;&#32;&#32;&#32;IndexSet&#32;oco(size);
373 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(odd_row_owned)&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;oro.add_range(0,&#32;size);
375 &#32;&#32;&#32;&#32;}
376 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(odd_row_writable)&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;orw.add_range(0,&#32;size);
378 &#32;&#32;&#32;&#32;}
379 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(odd_col_owned)&#32;{
380 &#32;&#32;&#32;&#32;&#32;&#32;oco.add_range(0,&#32;size);
381 &#32;&#32;&#32;&#32;}
382 
383 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0&#32;&amp;&amp;&#32;i&#32;==&#32;0)&#32;{
384 &#32;&#32;&#32;&#32;&#32;&#32;oro.add_range(0,&#32;size);
385 &#32;&#32;&#32;&#32;&#32;&#32;orw.add_range(0,&#32;size);
386 &#32;&#32;&#32;&#32;&#32;&#32;oco.add_range(0,&#32;size);
387 &#32;&#32;&#32;&#32;}
388 
389 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;Layers&#32;-&#32;1&#32;&amp;&amp;&#32;i&#32;==&#32;Layers&#32;-&#32;1)&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;oro.add_range(0,&#32;size);
391 &#32;&#32;&#32;&#32;&#32;&#32;orw.add_range(0,&#32;size);
392 &#32;&#32;&#32;&#32;&#32;&#32;oco.add_range(0,&#32;size);
393 &#32;&#32;&#32;&#32;}
394 
395 &#32;&#32;&#32;&#32;i_prec_odd_owned_row[i]&#32;=&#32;oro;
396 &#32;&#32;&#32;&#32;i_prec_odd_owned_col[i]&#32;=&#32;oco;
397 &#32;&#32;&#32;&#32;i_prec_odd_writable[i]&#32;=&#32;orw;
398 &#32;&#32;}
399 
400 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;even_blocks&#32;=&#32;GlobalParams.NumberProcesses&#32;/&#32;2;
401 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;odd_blocks&#32;=&#32;GlobalParams.NumberProcesses&#32;/&#32;2;
402 
403 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;1)&#32;{
404 &#32;&#32;&#32;&#32;even_blocks++;
405 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
406 &#32;&#32;&#32;&#32;odd_blocks++;
407 &#32;&#32;}
408 
409 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;temp0&#32;=&#32;i_prec_odd_owned_row;
410 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;temp1&#32;=&#32;i_prec_odd_owned_col;
411 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;temp2&#32;=&#32;i_prec_odd_writable;
412 &#32;&#32;i_prec_odd_owned_row.clear();
413 &#32;&#32;i_prec_odd_owned_col.clear();
414 &#32;&#32;i_prec_odd_writable.clear();
415 &#32;&#32;i_prec_odd_owned_row.push_back(temp0[0]);
416 &#32;&#32;i_prec_odd_owned_col.push_back(temp1[0]);
417 &#32;&#32;i_prec_odd_writable.push_back(temp2[0]);
418 
419 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;2;&#32;i&#32;&lt;&#32;static_cast&lt;int&gt;(Layers);&#32;i&#32;+=&#32;2)&#32;{
420 &#32;&#32;&#32;&#32;i_prec_odd_owned_row.push_back(combine_indexes(temp0[i&#32;-&#32;1],&#32;temp0[i]));
421 &#32;&#32;&#32;&#32;i_prec_odd_owned_col.push_back(combine_indexes(temp1[i&#32;-&#32;1],&#32;temp1[i]));
422 &#32;&#32;&#32;&#32;i_prec_odd_writable.push_back(combine_indexes(temp2[i&#32;-&#32;1],&#32;temp2[i]));
423 &#32;&#32;}
424 
425 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;0)&#32;{
426 &#32;&#32;&#32;&#32;i_prec_odd_owned_row.push_back(temp0[GlobalParams.NumberProcesses&#32;-&#32;1]);
427 &#32;&#32;&#32;&#32;i_prec_odd_owned_col.push_back(temp1[GlobalParams.NumberProcesses&#32;-&#32;1]);
428 &#32;&#32;&#32;&#32;i_prec_odd_writable.push_back(temp2[GlobalParams.NumberProcesses&#32;-&#32;1]);
429 &#32;&#32;}
430 
431 &#32;&#32;temp0&#32;=&#32;i_prec_even_owned_row;
432 &#32;&#32;temp1&#32;=&#32;i_prec_even_owned_col;
433 &#32;&#32;temp2&#32;=&#32;i_prec_even_writable;
434 
435 &#32;&#32;i_prec_even_owned_row.clear();
436 &#32;&#32;i_prec_even_owned_col.clear();
437 &#32;&#32;i_prec_even_writable.clear();
438 
439 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;static_cast&lt;int&gt;(Layers);&#32;i&#32;+=&#32;2)&#32;{
440 &#32;&#32;&#32;&#32;i_prec_even_owned_row.push_back(combine_indexes(temp0[i&#32;-&#32;1],&#32;temp0[i]));
441 &#32;&#32;&#32;&#32;i_prec_even_owned_col.push_back(combine_indexes(temp1[i&#32;-&#32;1],&#32;temp1[i]));
442 &#32;&#32;&#32;&#32;i_prec_even_writable.push_back(combine_indexes(temp2[i&#32;-&#32;1],&#32;temp2[i]));
443 &#32;&#32;}
444 
445 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;1)&#32;{
446 &#32;&#32;&#32;&#32;i_prec_even_owned_row.push_back(temp0[GlobalParams.NumberProcesses&#32;-&#32;1]);
447 &#32;&#32;&#32;&#32;i_prec_even_owned_col.push_back(temp1[GlobalParams.NumberProcesses&#32;-&#32;1]);
448 &#32;&#32;&#32;&#32;i_prec_even_writable.push_back(temp2[GlobalParams.NumberProcesses&#32;-&#32;1]);
449 &#32;&#32;}
450 
451 &#32;&#32;Prepare_Boundary_Constraints();
452 
453 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Boundaryconditions&#32;prepared.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
454 
455 &#32;&#32;std::ostringstream&#32;set_string;
456 
457 &#32;&#32;locally_owned_dofs.write(set_string);
458 
459 &#32;&#32;std::string&#32;local_set&#32;=&#32;set_string.str();
460 
461 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*test&#32;=&#32;local_set.c_str();
462 
463 &#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;*text_local_set&#32;=&#32;<emphasis class="keyword">const_cast&lt;</emphasis><emphasis class="keywordtype">char</emphasis>&#32;*<emphasis class="keyword">&gt;</emphasis>(test);
464 
465 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;text_local_length&#32;=&#32;strlen(text_local_set);
466 
467 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;mpi_size&#32;=&#32;Layers;
468 
469 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;*all_lens&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>[mpi_size];
470 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;*displs&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>[mpi_size];
471 
472 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Communicating&#32;the&#32;Index&#32;Sets&#32;via&#32;MPI&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
473 
474 &#32;&#32;MPI_Allgather(&amp;text_local_length,&#32;1,&#32;MPI_INT,&#32;all_lens,&#32;1,&#32;MPI_INT,&#32;mpi_comm);
475 
476 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;totlen&#32;=&#32;all_lens[mpi_size&#32;-&#32;1];
477 &#32;&#32;displs[0]&#32;=&#32;0;
478 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;mpi_size&#32;-&#32;1;&#32;i++)&#32;{
479 &#32;&#32;&#32;&#32;displs[i&#32;+&#32;1]&#32;=&#32;displs[i]&#32;+&#32;all_lens[i];
480 &#32;&#32;&#32;&#32;totlen&#32;+=&#32;all_lens[i];
481 &#32;&#32;}
482 &#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;*all_names&#32;=&#32;<emphasis class="keyword">reinterpret_cast&lt;</emphasis><emphasis class="keywordtype">char</emphasis>&#32;*<emphasis class="keyword">&gt;</emphasis>(malloc(totlen));
483 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!all_names)&#32;MPI_Abort(mpi_comm,&#32;1);
484 
485 &#32;&#32;MPI_Allgatherv(text_local_set,&#32;text_local_length,&#32;MPI_CHAR,&#32;all_names,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all_lens,&#32;displs,&#32;MPI_CHAR,&#32;mpi_comm);
487 
488 &#32;&#32;deallog
489 &#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Updating&#32;local&#32;structures&#32;with&#32;information&#32;from&#32;the&#32;other&#32;processes&quot;</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
491 
492 &#32;&#32;locally_relevant_dofs_all_processors.resize(Layers);
493 
494 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Layers;&#32;i++)&#32;{
495 &#32;&#32;&#32;&#32;std::istringstream&#32;ss;
496 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">char</emphasis>&#32;*temp&#32;=&#32;&amp;all_names[displs[i]];
497 &#32;&#32;&#32;&#32;ss.rdbuf()-&gt;pubsetbuf(temp,&#32;strlen(temp));
498 &#32;&#32;&#32;&#32;locally_relevant_dofs_all_processors[i].clear();
499 &#32;&#32;&#32;&#32;locally_relevant_dofs_all_processors[i].set_size(dof_handler.n_dofs());
500 &#32;&#32;&#32;&#32;locally_relevant_dofs_all_processors[i].read(ss);
501 &#32;&#32;}
502 
503 &#32;&#32;UpperDofs&#32;=&#32;locally_owned_dofs;
504 
505 &#32;&#32;LowerDofs&#32;=&#32;locally_owned_dofs;
506 
507 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
508 &#32;&#32;&#32;&#32;LowerDofs.add_indices(locally_relevant_dofs_all_processors[rank&#32;-&#32;1],&#32;0);
509 &#32;&#32;}
510 
511 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;Layers&#32;-&#32;1)&#32;{
512 &#32;&#32;&#32;&#32;UpperDofs.add_indices(locally_relevant_dofs_all_processors[rank&#32;+&#32;1],&#32;0);
513 &#32;&#32;}
514 
515 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&#32;computing&#32;Index&#32;Sets.&#32;Calling&#32;for&#32;reinit&#32;now.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
516 
517 &#32;&#32;reinit_all();
518 
519 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
520 &#32;&#32;deallog.pop();
521 }
522 
523 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::Prepare_Boundary_Constraints()&#32;{
524 &#32;&#32;cm.clear();
525 &#32;&#32;cm.reinit(locally_relevant_dofs);
526 
527 &#32;&#32;cm_prec_even.clear();
528 &#32;&#32;cm_prec_odd.clear();
529 &#32;&#32;cm_prec_even.reinit(locally_relevant_dofs);
530 &#32;&#32;cm_prec_odd.reinit(locally_relevant_dofs);
531 
532 &#32;&#32;DoFTools::make_hanging_node_constraints(dof_handler,&#32;cm);
533 &#32;&#32;DoFTools::make_hanging_node_constraints(dof_handler,&#32;cm_prec_even);
534 &#32;&#32;DoFTools::make_hanging_node_constraints(dof_handler,&#32;cm_prec_odd);
535 
536 &#32;&#32;MakeBoundaryConditions();
537 &#32;&#32;MakePreconditionerBoundaryConditions();
538 
539 &#32;&#32;cm.close();
540 &#32;&#32;cm_prec_even.close();
541 &#32;&#32;cm_prec_odd.close();
542 }
543 
544 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::calculate_cell_weights()&#32;{
545 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Computing&#32;cell&#32;weights&quot;</emphasis>);
546 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Iterating&#32;cells&#32;and&#32;computing&#32;local&#32;norm&#32;of&#32;material&#32;tensor.&quot;</emphasis>
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
548 &#32;&#32;cell&#32;=&#32;triangulation.begin_active();
549 &#32;&#32;endc&#32;=&#32;triangulation.end();
550 
551 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
552 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;tens,&#32;epsilon_pre2,&#32;epsilon_pre1;
554 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;pos&#32;=&#32;cell-&gt;center();
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Tensor(pos);
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Preconditioner_Tensor(pos,&#32;rank);
558 
559 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Tensor(pos);
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Preconditioner_Tensor(pos,&#32;rank);
562 &#32;&#32;&#32;&#32;&#32;&#32;}
563 &#32;&#32;&#32;&#32;&#32;&#32;tens&#32;=&#32;st-&gt;get_Tensor(pos);
564 
565 &#32;&#32;&#32;&#32;&#32;&#32;cell_weights(cell-&gt;active_cell_index())&#32;=&#32;tens.norm();
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;cell_weights_prec_1(cell-&gt;active_cell_index())&#32;=&#32;epsilon_pre1.norm();
568 
569 &#32;&#32;&#32;&#32;&#32;&#32;cell_weights_prec_2(cell-&gt;active_cell_index())&#32;=&#32;epsilon_pre2.norm();
570 &#32;&#32;&#32;&#32;}
571 &#32;&#32;}
572 
573 &#32;&#32;DataOut&lt;3&gt;&#32;data_out_cells;
574 &#32;&#32;data_out_cells.attach_dof_handler(dof_handler);
575 &#32;&#32;data_out_cells.add_data_vector(
576 &#32;&#32;&#32;&#32;&#32;&#32;cell_weights,&#32;<emphasis class="stringliteral">&quot;Material_Tensor_Norm&quot;</emphasis>,
577 &#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_cell_data);
579 &#32;&#32;data_out_cells.add_data_vector(
580 &#32;&#32;&#32;&#32;&#32;&#32;cell_weights_prec_1,&#32;<emphasis class="stringliteral">&quot;Material_Tensor_Prec_Low&quot;</emphasis>,
581 &#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_cell_data);
583 &#32;&#32;data_out_cells.add_data_vector(
584 &#32;&#32;&#32;&#32;&#32;&#32;cell_weights_prec_2,&#32;<emphasis class="stringliteral">&quot;Material_Tensor_Prec_Up&quot;</emphasis>,
585 &#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_cell_data);
587 &#32;&#32;data_out_cells.build_patches();
588 
589 &#32;&#32;std::string&#32;path&#32;=&#32;solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;/cell-weights&quot;</emphasis>&#32;+
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;-&quot;</emphasis>&#32;+&#32;std::to_string(rank)&#32;+
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>;
592 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Writing&#32;vtu&#32;file:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;path&#32;&lt;&lt;&#32;std::endl;
593 &#32;&#32;std::ofstream&#32;outputvtu2(path);
594 &#32;&#32;data_out_cells.write_vtu(outputvtu2);
595 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
596 &#32;&#32;deallog.pop();
597 }
598 
599 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_all()&#32;{
600 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;reinit_all&quot;</emphasis>);
601 
602 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;right-hand&#32;side&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
603 &#32;&#32;reinit_rhs();
604 
605 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.O_O_V_T_TransformationWeightsAll)&#32;{
606 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;cell&#32;weights&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
607 &#32;&#32;&#32;&#32;reinit_cell_weights();
608 &#32;&#32;}
609 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.O_O_V_T_TransformationWeightsFirst&#32;&amp;&amp;&#32;run_number&#32;==&#32;0)&#32;{
610 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;cell&#32;weights&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
611 &#32;&#32;&#32;&#32;reinit_cell_weights();
612 &#32;&#32;}
613 
614 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;solutiuon&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
615 &#32;&#32;reinit_solution();
616 
617 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;preconditioner&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
618 &#32;&#32;reinit_preconditioner();
619 
620 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;reinitializing&#32;system&#32;matrix&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
621 &#32;&#32;reinit_systemmatrix();
622 
623 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
624 &#32;&#32;deallog.pop();
625 }
626 
627 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_for_rerun()&#32;{
628 &#32;&#32;reinit_rhs();
629 &#32;&#32;reinit_preconditioner_fast();
630 &#32;&#32;reinit_systemmatrix();
631 }
632 
633 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_systemmatrix()&#32;{
634 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;reinit_systemmatrix&quot;</emphasis>);
635 
636 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Generating&#32;BSP&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
637 
638 &#32;&#32;TrilinosWrappers::BlockSparsityPattern&#32;sp(i_sys_owned,&#32;MPI_COMM_WORLD);
639 
640 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Collecting&#32;sizes&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
641 
642 &#32;&#32;sp.collect_sizes();
643 
644 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Making&#32;BSP&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
645 &#32;&#32;DoFTools::make_sparsity_pattern(dof_handler,&#32;sp,&#32;cm,&#32;<emphasis class="keyword">false</emphasis>,&#32;rank);
646 &#32;&#32;sp.compress();
647 
648 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Initializing&#32;system_matrix&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
649 &#32;&#32;system_matrix.reinit(sp);
650 &#32;&#32;deallog.pop();
651 }
652 
653 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_rhs()&#32;{
654 &#32;&#32;system_rhs.reinit(i_sys_owned,&#32;MPI_COMM_WORLD);
655 
656 &#32;&#32;preconditioner_rhs.reinit(dof_handler.n_dofs());
657 }
658 
659 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_solution()&#32;{
660 &#32;&#32;solution-&gt;reinit(i_sys_owned,&#32;i_sys_readable,&#32;mpi_comm,&#32;<emphasis class="keyword">true</emphasis>);
661 &#32;&#32;EstimatedSolution.reinit(i_sys_owned,&#32;mpi_comm);
662 &#32;&#32;ErrorOfSolution.reinit(i_sys_owned,&#32;mpi_comm);
663 }
664 
665 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_cell_weights()&#32;{
666 &#32;&#32;cell_weights.reinit(triangulation.n_active_cells());
667 &#32;&#32;cell_weights_prec_1.reinit(triangulation.n_active_cells());
668 &#32;&#32;cell_weights_prec_2.reinit(triangulation.n_active_cells());
669 &#32;&#32;calculate_cell_weights();
670 }
671 
672 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_storage()&#32;{&#32;storage.reinit(i_sys_owned,&#32;mpi_comm);&#32;}
673 
674 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_preconditioner()&#32;{
675 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;reinit_preconditioner&quot;</emphasis>);
676 
677 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Generating&#32;BSP&quot;</emphasis>);
678 
679 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Started&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
680 
681 &#32;&#32;TrilinosWrappers::BlockSparsityPattern&#32;epsp(i_prec_even_owned_row,
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_prec_even_owned_col,
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_prec_even_writable,&#32;mpi_comm);
684 
685 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Even&#32;worked.&#32;Continuing&#32;Odd.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
686 
687 &#32;&#32;TrilinosWrappers::BlockSparsityPattern&#32;opsp(i_prec_odd_owned_row,
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_prec_odd_owned_col,
689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_prec_odd_writable,&#32;mpi_comm);
690 
691 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Odd&#32;worked.&#32;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
692 
693 &#32;&#32;deallog.pop();
694 
695 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Collecting&#32;sizes&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
696 &#32;&#32;epsp.collect_sizes();
697 &#32;&#32;opsp.collect_sizes();
698 
699 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Making&#32;BSP&quot;</emphasis>);
700 
701 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Even&#32;Preconditioner&#32;Matrices&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
702 &#32;&#32;DoFTools::make_sparsity_pattern(dof_handler,&#32;epsp,&#32;cm_prec_even,&#32;<emphasis class="keyword">false</emphasis>,&#32;rank);
703 &#32;&#32;epsp.compress();
704 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Odd&#32;Preconditioner&#32;Matrices&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
705 &#32;&#32;DoFTools::make_sparsity_pattern(dof_handler,&#32;opsp,&#32;cm_prec_odd,&#32;<emphasis class="keyword">false</emphasis>,&#32;rank);
706 &#32;&#32;opsp.compress();
707 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
708 
709 &#32;&#32;deallog.pop();
710 
711 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Initializing&#32;matrices&quot;</emphasis>);
712 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Even&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
713 &#32;&#32;prec_matrix_even.reinit(epsp);
714 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Odd&#32;...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
715 &#32;&#32;prec_matrix_odd.reinit(opsp);
716 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
717 &#32;&#32;deallog.pop();
718 &#32;&#32;deallog.pop();
719 }
720 
721 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reinit_preconditioner_fast()&#32;{}
722 
723 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::assemble_system()&#32;{
724 &#32;&#32;reinit_rhs();
725 
726 &#32;&#32;QGauss&lt;3&gt;&#32;quadrature_formula(2);
727 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;real(0);
728 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;imag(3);
729 &#32;&#32;FEValues&lt;3&gt;&#32;fe_values(fe,&#32;quadrature_formula,
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_values&#32;|&#32;update_gradients&#32;|&#32;update_JxW_values&#32;|
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_quadrature_points);
732 &#32;&#32;std::vector&lt;Point&lt;3&gt;&gt;&#32;quadrature_points;
733 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;dofs_per_cell&#32;=&#32;fe.dofs_per_cell;
734 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;n_q_points&#32;=&#32;quadrature_formula.size();
735 
736 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Starting&#32;Assemblation&#32;process&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
737 
738 &#32;&#32;FullMatrix&lt;double&gt;&#32;cell_matrix_real(dofs_per_cell,&#32;dofs_per_cell);
739 &#32;&#32;FullMatrix&lt;double&gt;&#32;cell_matrix_prec_odd(dofs_per_cell,&#32;dofs_per_cell);
740 &#32;&#32;FullMatrix&lt;double&gt;&#32;cell_matrix_prec_even(dofs_per_cell,&#32;dofs_per_cell);
741 
742 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;e_temp&#32;=&#32;1.0;
743 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!GlobalParams.C_AllOne)&#32;{
744 &#32;&#32;&#32;&#32;e_temp&#32;*=&#32;GlobalParams.C_Epsilon;
745 &#32;&#32;}
746 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;mu_temp&#32;=&#32;1.0;
747 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!GlobalParams.C_AllOne)&#32;{
748 &#32;&#32;&#32;&#32;mu_temp&#32;*=&#32;GlobalParams.C_Mu;
749 &#32;&#32;}
750 
751 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;eps_in&#32;=&#32;GlobalParams.M_W_epsilonin&#32;*&#32;e_temp;
752 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;eps_out&#32;=&#32;GlobalParams.M_W_epsilonout&#32;*&#32;e_temp;
753 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;mu_zero&#32;=&#32;mu_temp;
754 
755 &#32;&#32;Vector&lt;double&gt;&#32;cell_rhs(dofs_per_cell);
756 &#32;&#32;cell_rhs&#32;=&#32;0;
757 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;transformation,&#32;epsilon,&#32;epsilon_pre1,
758 &#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2,&#32;mu,&#32;mu_prec1,&#32;mu_prec2;
759 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_dof_indices(dofs_per_cell);
760 
761 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
762 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),&#32;endc&#32;=&#32;dof_handler.end();
763 &#32;&#32;std::complex&lt;double&gt;&#32;k_a_sqr(GlobalParams.C_omega,
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.So_PreconditionerDampening);
765 &#32;&#32;k_a_sqr&#32;=&#32;k_a_sqr&#32;*&#32;k_a_sqr;
766 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
767 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;subdomain_id&#32;=&#32;cell-&gt;subdomain_id();
768 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(subdomain_id&#32;==&#32;rank)&#32;{
769 &#32;&#32;&#32;&#32;&#32;&#32;cell_rhs.reinit(dofs_per_cell,&#32;<emphasis class="keyword">false</emphasis>);
770 &#32;&#32;&#32;&#32;&#32;&#32;fe_values.reinit(cell);
771 &#32;&#32;&#32;&#32;&#32;&#32;quadrature_points&#32;=&#32;fe_values.get_quadrature_points();
772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;has_left&#32;=&#32;<emphasis class="keyword">false</emphasis>;
773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;has_right&#32;=&#32;<emphasis class="keyword">false</emphasis>;
774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;face(i)-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>)[2]&#32;&lt;=
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0)
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_left&#32;=&#32;<emphasis class="keyword">true</emphasis>;
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;face(i)-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>)[2]&#32;&gt;=
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0)
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;has_right&#32;=&#32;<emphasis class="keyword">true</emphasis>;
781 &#32;&#32;&#32;&#32;&#32;&#32;}
782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;compute_rhs&#32;=&#32;has_left&#32;&amp;&amp;&#32;has_right;
783 &#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_real&#32;=&#32;0;
784 &#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_odd&#32;=&#32;0;
785 &#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_even&#32;=&#32;0;
786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;q_index&#32;=&#32;0;&#32;q_index&#32;&lt;&#32;n_q_points;&#32;++q_index)&#32;{
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!locals_set)&#32;{
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(quadrature_points[q_index][2]&#32;&lt;&#32;minimum_local_z)&#32;{
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minimum_local_z&#32;=&#32;quadrature_points[q_index][2];
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(quadrature_points[q_index][2]&#32;&gt;&#32;maximum_local_z)&#32;{
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maximum_local_z&#32;=&#32;quadrature_points[q_index][2];
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
796 
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(mg-&gt;<link linkend="class_mesh_generator_1a571dc7c36f29edbdb9ea40e5832ba851">math_coordinate_in_waveguide</link>(quadrature_points[q_index]))&#32;{
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon&#32;=&#32;transformation&#32;*&#32;eps_in;
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon&#32;=&#32;transformation&#32;*&#32;eps_out;
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
802 
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu&#32;=&#32;invert(transformation)&#32;/&#32;mu_zero;
804 
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec1&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec2&#32;=
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec2&#32;=&#32;st-&gt;get_Tensor(quadrature_points[q_index]);
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;=
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec1&#32;=
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;get_Preconditioner_Tensor(quadrature_points[q_index],&#32;rank);
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
820 
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec1&#32;=&#32;invert(mu_prec1)&#32;/&#32;mu_zero;
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mu_prec2&#32;=&#32;invert(mu_prec2)&#32;/&#32;mu_zero;
823 
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(mg-&gt;<link linkend="class_mesh_generator_1a571dc7c36f29edbdb9ea40e5832ba851">math_coordinate_in_waveguide</link>(quadrature_points[q_index]))&#32;{
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;*=&#32;eps_in;
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;*=&#32;eps_in;
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre1&#32;*=&#32;eps_out;
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;epsilon_pre2&#32;*=&#32;eps_out;
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;JxW&#32;=&#32;fe_values.JxW(q_index);
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;dofs_per_cell;&#32;i++)&#32;{
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;I_Curl;
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;I_Val;
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;{
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Curl[k].imag(fe_values[imag].curl(i,&#32;q_index)[k]);
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Curl[k].real(fe_values[real].curl(i,&#32;q_index)[k]);
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Val[k].imag(fe_values[imag].value(i,&#32;q_index)[k]);
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_Val[k].real(fe_values[real].value(i,&#32;q_index)[k]);
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;dofs_per_cell;&#32;j++)&#32;{
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;J_Curl;
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;J_Val;
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;{
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Curl[k].imag(fe_values[imag].curl(j,&#32;q_index)[k]);
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Curl[k].real(fe_values[real].curl(j,&#32;q_index)[k]);
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Val[k].imag(fe_values[imag].value(j,&#32;q_index)[k]);
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;J_Val[k].real(fe_values[real].value(j,&#32;q_index)[k]);
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
852 
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;x&#32;=
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(mu&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(J_Curl)&#32;*&#32;JxW&#32;-
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((epsilon&#32;*&#32;I_Val)&#32;*&#32;Conjugate_Vector(J_Val))&#32;*&#32;JxW&#32;*
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.C_omega&#32;*&#32;GlobalParams.C_omega;
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_real[i][j]&#32;+=&#32;x.real();
858 
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;pre1&#32;=
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(mu_prec1&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(J_Curl)&#32;*&#32;JxW&#32;-
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((epsilon_pre1&#32;*&#32;I_Val)&#32;*&#32;Conjugate_Vector(J_Val))&#32;*&#32;JxW&#32;*
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k_a_sqr;
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_even[i][j]&#32;+=&#32;pre1.real();
864 
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;pre2&#32;=
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(mu_prec2&#32;*&#32;I_Curl)&#32;*&#32;Conjugate_Vector(J_Curl)&#32;*&#32;JxW&#32;-
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((epsilon_pre2&#32;*&#32;I_Val)&#32;*&#32;Conjugate_Vector(J_Val))&#32;*&#32;JxW&#32;*
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k_a_sqr;
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_odd[i][j]&#32;+=&#32;pre2.real();
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(compute_rhs&#32;&amp;&amp;
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points[q_index][2]&#32;&lt;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0)&#32;{
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;rhs2&#32;=
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(mu&#32;*&#32;I_Curl)&#32;*
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Conjugate_Vector(es.curl(quadrature_points[q_index]))&#32;*
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JxW&#32;-
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((epsilon&#32;*&#32;I_Val))&#32;*
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Conjugate_Vector(es.val(quadrature_points[q_index]))&#32;*&#32;JxW&#32;*
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.C_omega&#32;*&#32;GlobalParams.C_omega;
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_rhs[i]&#32;-=&#32;rhs2.real();
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
883 &#32;&#32;&#32;&#32;&#32;&#32;}
884 
885 &#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;get_dof_indices(local_dof_indices);
886 &#32;&#32;&#32;&#32;&#32;&#32;cm.distribute_local_to_global(cell_matrix_real,&#32;cell_rhs,
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;local_dof_indices,&#32;system_matrix,
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;system_rhs,&#32;<emphasis class="keyword">false</emphasis>);
889 &#32;&#32;&#32;&#32;&#32;&#32;cm_prec_odd.distribute_local_to_global(cell_matrix_prec_odd,&#32;cell_rhs,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;local_dof_indices,&#32;prec_matrix_odd,
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preconditioner_rhs,&#32;<emphasis class="keyword">false</emphasis>);
892 &#32;&#32;&#32;&#32;&#32;&#32;cm_prec_even.distribute_local_to_global(
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_matrix_prec_even,&#32;cell_rhs,&#32;local_dof_indices,&#32;prec_matrix_even,
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;preconditioner_rhs,&#32;<emphasis class="keyword">false</emphasis>);
895 &#32;&#32;&#32;&#32;}
896 &#32;&#32;}
897 &#32;&#32;locals_set&#32;=&#32;<emphasis class="keyword">true</emphasis>;
898 
899 &#32;&#32;MPI_Barrier(mpi_comm);
900 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!is_stored)
901 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Assembling&#32;done.&#32;L2-Norm&#32;of&#32;RHS:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;system_rhs.l2_norm()
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
903 
904 &#32;&#32;system_matrix.compress(VectorOperation::add);
905 &#32;&#32;system_rhs.compress(VectorOperation::add);
906 
907 &#32;&#32;prec_matrix_even.compress(VectorOperation::add);
908 &#32;&#32;prec_matrix_odd.compress(VectorOperation::add);
909 
910 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
911 &#32;&#32;&#32;&#32;cm.distribute(primal_solution);
912 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
913 &#32;&#32;&#32;&#32;cm.distribute(dual_solution);
914 &#32;&#32;}
915 &#32;&#32;cm.distribute(EstimatedSolution);
916 &#32;&#32;cm.distribute(ErrorOfSolution);
917 &#32;&#32;MPI_Barrier(mpi_comm);
918 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Distributing&#32;solution&#32;done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
919 &#32;&#32;<link linkend="class_waveguide_1aecce672b929c81b8966198043bff646a">estimate_solution</link>();
920 }
921 
922 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::MakeBoundaryConditions()&#32;{
923 &#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
924 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),&#32;endc&#32;=&#32;dof_handler.end();
925 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_line_dofs(fe.dofs_per_line);
926 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;input_search_x&#32;=&#32;0.45&#32;*&#32;GlobalParams.M_R_XLength;
927 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;input_search_y&#32;=&#32;0.45&#32;*&#32;GlobalParams.M_R_YLength;
928 &#32;&#32;InputInterfaceDofs&#32;=&#32;IndexSet(dof_handler.n_dofs());
929 &#32;&#32;cell_layer_z&#32;=&#32;0.0;
930 
931 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
932 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;cell_min_x&#32;=&#32;GlobalParams.M_R_XLength;
933 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;cell_max_x&#32;=&#32;-GlobalParams.M_R_XLength;
934 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;cell_min_y&#32;=&#32;GlobalParams.M_R_YLength;
935 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;cell_max_y&#32;=&#32;-GlobalParams.M_R_YLength;
936 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;cell_min_z&#32;=&#32;GlobalParams.M_R_ZLength;
937 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;cell_max_z&#32;=&#32;-GlobalParams.M_R_ZLength;
938 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
939 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;pos&#32;=&#32;cell-&gt;face(i)-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>);
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pos[0]&#32;&lt;&#32;cell_min_x)&#32;cell_min_x&#32;=&#32;pos[0];
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pos[0]&#32;&gt;&#32;cell_max_x)&#32;cell_max_x&#32;=&#32;pos[0];
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pos[1]&#32;&lt;&#32;cell_min_y)&#32;cell_min_y&#32;=&#32;pos[1];
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pos[1]&#32;&gt;&#32;cell_max_y)&#32;cell_max_y&#32;=&#32;pos[1];
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pos[2]&#32;&lt;&#32;cell_min_z)&#32;cell_min_z&#32;=&#32;pos[2];
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(pos[2]&#32;&gt;&#32;cell_max_z)&#32;cell_max_z&#32;=&#32;pos[2];
947 &#32;&#32;&#32;&#32;&#32;&#32;}
948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell_min_x&#32;&lt;&#32;input_search_x&#32;&amp;&amp;&#32;cell_max_x&#32;&gt;&#32;input_search_x&#32;&amp;&amp;
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_min_y&#32;&lt;&#32;input_search_y&#32;&amp;&amp;&#32;cell_max_y&#32;&gt;&#32;input_search_y)&#32;{
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell_min_z&#32;&lt;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;&amp;&amp;
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_max_z&#32;&lt;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0)&#32;{
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell_layer_z&#32;=&#32;cell_min_z;
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
954 &#32;&#32;&#32;&#32;&#32;&#32;}
955 &#32;&#32;&#32;&#32;}
956 &#32;&#32;}
957 &#32;&#32;cell_layer_z&#32;=&#32;Utilities::MPI::sum(cell_layer_z,&#32;MPI_COMM_WORLD);
958 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;input&#32;cell&#32;interface&#32;layer&#32;is&#32;located&#32;at&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;cell_layer_z
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
960 &#32;&#32;MPI_Barrier(MPI_COMM_WORLD);
961 
962 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
963 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;pos&#32;=&#32;cell-&gt;face(i)-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>);
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(abs(pos[2]&#32;-&#32;cell_layer_z)&#32;&lt;&#32;0.0001)&#32;{
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InputInterfaceDofs.add_index(local_line_dofs[k]);
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
974 &#32;&#32;&#32;&#32;&#32;&#32;}
975 &#32;&#32;&#32;&#32;}
976 &#32;&#32;}
977 
978 &#32;&#32;cell&#32;=&#32;dof_handler.begin_active();
979 &#32;&#32;dealii::ZeroFunction&lt;3,&#32;double&gt;&#32;zf(6);
980 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;3,
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm);
982 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;1,
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm);
984 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;2,
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm);
986 
987 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;face_own_count&#32;=&#32;std::max(
988 &#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;unsigned&#32;int&gt;(0),
989 &#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face&#32;-&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;fe.dofs_per_line);
990 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;cell_own_count&#32;=&#32;std::max(
991 &#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;unsigned&#32;int&gt;(0),
992 &#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_cell&#32;-&#32;GeometryInfo&lt;3&gt;::faces_per_cell&#32;*&#32;fe.dofs_per_face&#32;+
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeometryInfo&lt;3&gt;::lines_per_cell&#32;*&#32;fe.dofs_per_line);
994 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_face_dofs(fe.dofs_per_face);
995 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Dofs&#32;per&#32;line:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fe.dofs_per_line&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
996 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Dofs&#32;per&#32;face:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fe.dofs_per_face
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&#32;Own:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;face_own_count&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
998 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Dofs&#32;per&#32;cell:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;fe.dofs_per_cell
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&#32;Own:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;cell_own_count&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1000 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;==&#32;0)&#32;{
1001 &#32;&#32;&#32;&#32;fixed_dofs.set_size(dof_handler.n_dofs());
1002 &#32;&#32;}
1003 
1004 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
1005 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
1006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;center&#32;=&#32;(cell-&gt;face(i))-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[0]&#32;&lt;&#32;0)&#32;center[0]&#32;*=&#32;(-1.0);
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[1]&#32;&lt;&#32;0)&#32;center[1]&#32;*=&#32;(-1.0);
1010 
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[0]&#32;-&#32;GlobalParams.M_R_XLength&#32;/&#32;2.0)&#32;&lt;&#32;0.0001)&#32;{
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[k]);
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[k],&#32;0.0);
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;fe.dofs_per_line;
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;&lt;&#32;fe.dofs_per_face;&#32;j++)&#32;{
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_face_dofs[j]);
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_face_dofs[j],&#32;0.0);
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1035 
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[1]&#32;-&#32;GlobalParams.M_R_YLength&#32;/&#32;2.0)&#32;&lt;&#32;0.0001)&#32;{
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[k]);
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[k],&#32;0.0);
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;fe.dofs_per_line;
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;&lt;&#32;fe.dofs_per_face;&#32;j++)&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_face_dofs[j]);
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_face_dofs[j],&#32;0.0);
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1060 
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z)&#32;&lt;&#32;0.0001)&#32;{
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((cell-&gt;face(i))-&gt;line(j)-&gt;at_boundary())&#32;{
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(fe.dofs_per_line&#32;&gt;=&#32;2)&#32;{
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[1]);
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[1],&#32;0.0);
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;fe.dofs_per_line;
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;&lt;&#32;fe.dofs_per_face;&#32;j++)&#32;{
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1087 
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Maximum_Z)&#32;&lt;&#32;0.0001)&#32;{
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((cell-&gt;face(i))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;fe.dofs_per_line;&#32;k++)&#32;{
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_line_dofs[k]);
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_line_dofs[k],&#32;0.0);
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_line_dofs[k]);
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(face_own_count&#32;&gt;&#32;0)&#32;{
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;face(i)-&gt;get_dof_indices(local_face_dofs);
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;fe.dofs_per_line;
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;&lt;&#32;fe.dofs_per_face;&#32;j++)&#32;{
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.add_line(local_face_dofs[j]);
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm.set_inhomogeneity(local_face_dofs[j],&#32;0.0);
1107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fixed_dofs.add_index(local_face_dofs[j]);
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1112 &#32;&#32;&#32;&#32;&#32;&#32;}
1113 &#32;&#32;&#32;&#32;}
1114 &#32;&#32;}
1115 }
1116 
1117 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::MakePreconditionerBoundaryConditions()&#32;{
1118 &#32;&#32;dealii::DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell_loc,&#32;endc;
1119 &#32;&#32;cell_loc&#32;=&#32;dof_handler.begin_active();
1120 &#32;&#32;endc&#32;=&#32;dof_handler.end();
1121 
1122 &#32;&#32;dealii::ZeroFunction&lt;3,&#32;double&gt;&#32;zf(6);
1123 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;3,
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm_prec_even);
1125 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;3,
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm_prec_odd);
1127 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;1,
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm_prec_even);
1129 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;1,
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm_prec_odd);
1131 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;2,
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm_prec_even);
1133 &#32;&#32;VectorTools::project_boundary_values_curl_conforming(dof_handler,&#32;0,&#32;zf,&#32;2,
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cm_prec_odd);
1135 
1136 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;layer_length&#32;=&#32;GlobalParams.LayerThickness;
1137 &#32;&#32;IndexSet&#32;own(dof_handler.n_dofs());
1138 &#32;&#32;own.add_indices(locally_owned_dofs);
1139 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;==&#32;0)&#32;{
1140 &#32;&#32;&#32;&#32;sweepable.set_size(dof_handler.n_dofs());
1141 &#32;&#32;&#32;&#32;sweepable.add_indices(locally_owned_dofs);
1142 &#32;&#32;}
1143 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
1144 &#32;&#32;&#32;&#32;own.add_indices(LowerDofs);
1145 &#32;&#32;}
1146 
1147 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;face_own_count&#32;=
1148 &#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face&#32;-&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;fe.dofs_per_line;
1149 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;has_non_edge_dofs&#32;=&#32;(face_own_count&#32;&gt;&#32;0);
1150 
1151 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_face_dofs(fe.dofs_per_face);
1152 
1153 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_dof_indices(fe.dofs_per_line);
1154 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_line_dofs(fe.dofs_per_line);
1155 
1156 &#32;&#32;cm_prec_even.merge(
1157 &#32;&#32;&#32;&#32;&#32;&#32;cm,&#32;dealii::ConstraintMatrix::MergeConflictBehavior::right_object_wins,
1158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">true</emphasis>);
1159 &#32;&#32;cm_prec_odd.merge(
1160 &#32;&#32;&#32;&#32;&#32;&#32;cm,&#32;dealii::ConstraintMatrix::MergeConflictBehavior::right_object_wins,
1161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">true</emphasis>);
1162 
1163 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell_loc&#32;!=&#32;endc;&#32;++cell_loc)&#32;{
1164 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(static_cast&lt;int&gt;((cell_loc-&gt;subdomain_id()&#32;-&#32;rank)))&#32;&lt;&#32;3)&#32;{
1165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::faces_per_cell;&#32;i++)&#32;{
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;center&#32;=&#32;(cell_loc-&gt;face(i))-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[0]&#32;&lt;&#32;0)&#32;center[0]&#32;*=&#32;(-1.0);
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(center[1]&#32;&lt;&#32;0)&#32;center[1]&#32;*=&#32;(-1.0);
1169 
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;Set&#32;x-boundary&#32;values</emphasis>
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[0]&#32;-&#32;GlobalParams.M_R_XLength&#32;/&#32;2.0)&#32;&lt;&#32;0.0001)&#32;{
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_odd,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_even,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1179 
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;Set&#32;y-boundary&#32;values</emphasis>
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[1]&#32;-&#32;GlobalParams.M_R_YLength&#32;/&#32;2.0)&#32;&lt;&#32;0.0001)&#32;{
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_odd,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_even,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1189 
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(rank&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_even,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1199 
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((rank&#32;+&#32;2)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_even,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1206 
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((rank&#32;+&#32;1)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_odd,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1213 
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((rank&#32;-&#32;1)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_odd,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(rank&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_odd,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1227 
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((rank&#32;+&#32;2)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_odd,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1234 
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(center[2]&#32;-&#32;GlobalParams.Minimum_Z&#32;-
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((rank&#32;+&#32;1)&#32;*&#32;layer_length))&#32;&lt;&#32;0.0001)&#32;{
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Add_Zero_Restraint(&amp;cm_prec_even,&#32;cell_loc,&#32;i,&#32;fe.dofs_per_line,
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe.dofs_per_face,&#32;has_non_edge_dofs,
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs);
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1242 &#32;&#32;&#32;&#32;&#32;&#32;}
1243 &#32;&#32;&#32;&#32;}
1244 &#32;&#32;}
1245 }
1246 
1247 std::vector&lt;unsigned&#32;int&gt;&#32;Waveguide::Add_Zero_Restraint(
1248 &#32;&#32;&#32;&#32;dealii::ConstraintMatrix&#32;*in_cm,
1249 &#32;&#32;&#32;&#32;dealii::DoFHandler&lt;3&gt;::active_cell_iterator&#32;&amp;in_cell,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_face,
1250 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;DofsPerLine,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;DofsPerFace,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;in_non_face_dofs,
1251 &#32;&#32;&#32;&#32;IndexSet&#32;locally_owned_dofs)&#32;{
1252 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_line_dofs(DofsPerLine);
1253 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;local_face_dofs(DofsPerFace);
1254 &#32;&#32;std::vector&lt;types::global_dof_index&gt;&#32;ret;
1255 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;GeometryInfo&lt;3&gt;::lines_per_face;&#32;j++)&#32;{
1256 &#32;&#32;&#32;&#32;((in_cell-&gt;face(in_face))-&gt;line(j))-&gt;get_dof_indices(local_line_dofs);
1257 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;DofsPerLine;&#32;k++)&#32;{
1258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_line_dofs[k]))&#32;{
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in_cm-&gt;add_line(local_line_dofs[k]);
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in_cm-&gt;set_inhomogeneity(local_line_dofs[k],&#32;0.0);
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.push_back(local_line_dofs[k]);
1262 &#32;&#32;&#32;&#32;&#32;&#32;}
1263 &#32;&#32;&#32;&#32;}
1264 &#32;&#32;}
1265 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(in_non_face_dofs)&#32;{
1266 &#32;&#32;&#32;&#32;in_cell-&gt;face(in_face)-&gt;get_dof_indices(local_face_dofs);
1267 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;GeometryInfo&lt;3&gt;::lines_per_face&#32;*&#32;DofsPerLine;
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;&lt;&#32;DofsPerFace;&#32;j++)&#32;{
1269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(locally_owned_dofs.is_element(local_face_dofs[j]))&#32;{
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in_cm-&gt;add_line(local_face_dofs[j]);
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in_cm-&gt;set_inhomogeneity(local_face_dofs[j],&#32;0.0);
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.push_back(local_face_dofs[j]);
1273 &#32;&#32;&#32;&#32;&#32;&#32;}
1274 &#32;&#32;&#32;&#32;}
1275 &#32;&#32;}
1276 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1277 }
1278 
1279 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::solve()&#32;{
1280 &#32;&#32;SolverControl&#32;lsc&#32;=
1281 &#32;&#32;&#32;&#32;&#32;&#32;SolverControl(GlobalParams.So_TotalSteps,&#32;1.e-5,&#32;<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>);
1282 
1283 &#32;&#32;lsc.log_frequency(1);
1284 
1285 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;!=&#32;0)&#32;{
1286 &#32;&#32;&#32;&#32;result_file.close();
1287 &#32;&#32;}
1288 
1289 &#32;&#32;result_file.open((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;/solution_of_run_&quot;</emphasis>&#32;+
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;.dat&quot;</emphasis>)
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.c_str());
1292 
1293 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.So_Solver&#32;==&#32;SolverOptions::GMRES)&#32;{
1294 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;&gt;&#32;0)&#32;{
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;primal_solution[index]&#32;=&#32;primal_with_relevant[index];
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1300 &#32;&#32;&#32;&#32;&#32;&#32;}
1301 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;&gt;&#32;1)&#32;{
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dual_solution[index]&#32;=&#32;dual_with_relevant[index];
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1307 &#32;&#32;&#32;&#32;&#32;&#32;}
1308 &#32;&#32;&#32;&#32;}
1309 
1310 &#32;&#32;&#32;&#32;dealii::SolverGMRES&lt;dealii::TrilinosWrappers::MPI::BlockVector&gt;&#32;solver(
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lsc,&#32;dealii::SolverGMRES&lt;dealii::TrilinosWrappers::MPI::BlockVector&gt;::
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AdditionalData(GlobalParams.So_RestartSteps));
1313 
1314 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;above&#32;=&#32;0;
1315 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;!=&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
1316 &#32;&#32;&#32;&#32;&#32;&#32;above&#32;=&#32;locally_relevant_dofs_all_processors[rank&#32;+&#32;1].n_elements();
1317 &#32;&#32;&#32;&#32;}
1318 
1319 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;below&#32;=&#32;0;
1320 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;!=&#32;0)&#32;{
1321 &#32;&#32;&#32;&#32;&#32;&#32;below&#32;=&#32;locally_relevant_dofs_all_processors[rank&#32;-&#32;1].n_elements();
1322 &#32;&#32;&#32;&#32;}
1323 
1324 &#32;&#32;&#32;&#32;<link linkend="class_preconditioner_sweeping">PreconditionerSweeping</link>&#32;sweep(mpi_comm,&#32;locally_owned_dofs.n_elements(),
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;above,&#32;below,
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dof_handler.max_couplings_between_dofs(),
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locally_owned_dofs,&#32;&amp;fixed_dofs,&#32;rank,&#32;<emphasis class="keyword">false</emphasis>);
1328 
1329 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0)&#32;{
1330 &#32;&#32;&#32;&#32;&#32;&#32;sweep.Prepare(*solution);
1331 &#32;&#32;&#32;&#32;}
1332 
1333 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1334 
1335 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(even)&#32;{
1336 &#32;&#32;&#32;&#32;&#32;&#32;sweep.matrix&#32;=&#32;&amp;prec_matrix_even.block(rank&#32;/&#32;2,&#32;rank&#32;/&#32;2);
1337 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1338 &#32;&#32;&#32;&#32;&#32;&#32;sweep.matrix&#32;=&#32;&amp;prec_matrix_odd.block((rank&#32;+&#32;1)&#32;/&#32;2,&#32;(rank&#32;+&#32;1)&#32;/&#32;2);
1339 &#32;&#32;&#32;&#32;}
1340 
1341 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;==&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
1342 &#32;&#32;&#32;&#32;&#32;&#32;sweep.matrix&#32;=&#32;&amp;system_matrix.block(rank,&#32;rank);
1343 &#32;&#32;&#32;&#32;}
1344 
1345 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Initializing&#32;the&#32;Preconditioner...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1346 
1347 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Preconditioner&#32;Initialization&quot;</emphasis>);
1348 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;&lt;&#32;GlobalParams.NumberProcesses&#32;-&#32;1&#32;&amp;&amp;
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;int&gt;(rank)&#32;&gt;&#32;0)&#32;{
1350 &#32;&#32;&#32;&#32;&#32;&#32;sweep.init(solver_control,&#32;&amp;system_matrix.block(rank,&#32;rank&#32;+&#32;1),
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;system_matrix.block(rank,&#32;rank&#32;-&#32;1));
1352 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(static_cast&lt;int&gt;(rank)&#32;==&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sweep.init(solver_control,&#32;&amp;system_matrix.block(rank,&#32;rank),
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;system_matrix.block(rank,&#32;rank&#32;-&#32;1));
1356 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sweep.init(solver_control,&#32;&amp;system_matrix.block(rank,&#32;rank&#32;+&#32;1),
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;system_matrix.block(rank,&#32;rank));
1359 &#32;&#32;&#32;&#32;&#32;&#32;}
1360 &#32;&#32;&#32;&#32;}
1361 
1362 &#32;&#32;&#32;&#32;solver.connect(std_cxx11::bind(&amp;Waveguide::residual_tracker,&#32;<emphasis class="keyword">this</emphasis>,
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::_1,&#32;std_cxx11::_2,
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::_3));
1365 &#32;&#32;&#32;&#32;timer.leave_subsection();
1366 
1367 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Preconditioner&#32;Ready.&#32;Solving...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1368 
1369 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>timeval&#32;tp;
1370 &#32;&#32;&#32;&#32;gettimeofday(&amp;tp,&#32;NULL);
1371 &#32;&#32;&#32;&#32;solver_start_milis&#32;=&#32;tp.tv_sec&#32;*&#32;1000&#32;+&#32;tp.tv_usec&#32;/&#32;1000;
1372 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;GMRES&#32;run&quot;</emphasis>);
1373 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">try</emphasis>&#32;{
1374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solver.solve(system_matrix,&#32;primal_solution,&#32;system_rhs,&#32;sweep);
1376 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solver.solve(system_matrix,&#32;dual_solution,&#32;system_rhs,&#32;sweep);
1378 &#32;&#32;&#32;&#32;&#32;&#32;}
1379 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">catch</emphasis>&#32;(<emphasis class="keyword">const</emphasis>&#32;dealii::SolverControl::NoConvergence&#32;&amp;e)&#32;{
1380 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;NO&#32;CONVERGENCE!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1381 &#32;&#32;&#32;&#32;}
1382 &#32;&#32;&#32;&#32;timer.leave_subsection();
1383 
1384 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(steps&#32;&lt;&#32;40)&#32;{
1385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>timeval&#32;tp;
1386 &#32;&#32;&#32;&#32;&#32;&#32;gettimeofday(&amp;tp,&#32;NULL);
1387 &#32;&#32;&#32;&#32;&#32;&#32;int64_t&#32;ms&#32;=&#32;tp.tv_sec&#32;*&#32;1000&#32;+&#32;tp.tv_usec&#32;/&#32;1000&#32;-&#32;solver_start_milis;
1388 
1389 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_value(
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,&#32;steps&#32;+&#32;1);
1391 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_value(
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,&#32;0.0);
1393 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_value(
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Time&quot;</emphasis>,
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(ms));
1396 &#32;&#32;&#32;&#32;&#32;&#32;steps++;
1397 &#32;&#32;&#32;&#32;}
1398 
1399 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((GlobalParams.O_C_D_ConvergenceFirst&#32;&amp;&amp;&#32;run_number&#32;==&#32;0)&#32;||
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.O_C_D_ConvergenceAll)&#32;{
1401 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_column_to_supercolumn(
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;Run&#32;&quot;</emphasis>&#32;+&#32;std::to_string(run_number));
1404 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_column_to_supercolumn(
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;Run&#32;&quot;</emphasis>&#32;+&#32;std::to_string(run_number));
1407 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.add_column_to_supercolumn(
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Time&quot;</emphasis>,
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;Run&#32;&quot;</emphasis>&#32;+&#32;std::to_string(run_number));
1410 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.evaluate_convergence_rates(
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConvergenceTable::RateMode::reduction_rate);
1414 &#32;&#32;&#32;&#32;}
1415 
1416 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1417 
1418 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Norm&#32;of&#32;the&#32;solution:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;solution-&gt;l2_norm()&#32;&lt;&lt;&#32;std::endl;
1419 &#32;&#32;}
1420 
1421 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1422 &#32;&#32;&#32;&#32;cm.distribute(primal_solution);
1423 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1424 &#32;&#32;&#32;&#32;cm.distribute(dual_solution);
1425 &#32;&#32;}
1426 
1427 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.So_Solver&#32;==&#32;SolverOptions::UMFPACK)&#32;{
1428 &#32;&#32;&#32;&#32;SolverControl&#32;sc2(2,&#32;<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
1429 &#32;&#32;&#32;&#32;TrilinosWrappers::SolverDirect&#32;temp_s(
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sc2,&#32;TrilinosWrappers::SolverDirect::AdditionalData(
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">false</emphasis>,&#32;PrecOptionNames[GlobalParams.So_Preconditioner]));
1432 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;temp_s.solve(system_matrix,&#32;solution,&#32;system_rhs);</emphasis>
1433 &#32;&#32;}
1434 
1435 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1436 &#32;&#32;&#32;&#32;primal_with_relevant.reinit(locally_owned_dofs,&#32;locally_relevant_dofs,
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mpi_comm);
1438 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1440 &#32;&#32;&#32;&#32;&#32;&#32;primal_with_relevant[index]&#32;=&#32;primal_solution[index];
1441 &#32;&#32;&#32;&#32;}
1442 &#32;&#32;&#32;&#32;primal_with_relevant.update_ghost_values();
1443 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1444 &#32;&#32;&#32;&#32;dual_with_relevant.reinit(locally_owned_dofs,&#32;locally_relevant_dofs,
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mpi_comm);
1446 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1448 &#32;&#32;&#32;&#32;&#32;&#32;dual_with_relevant[index]&#32;=&#32;dual_solution[index];
1449 &#32;&#32;&#32;&#32;}
1450 &#32;&#32;&#32;&#32;dual_with_relevant.update_ghost_values();
1451 &#32;&#32;}
1452 
1453 &#32;&#32;GrowingVectorMemory&lt;
1454 &#32;&#32;&#32;&#32;&#32;&#32;TrilinosWrappers::MPI::BlockVector&gt;::release_unused_memory();
1455 }
1456 
<link linkend="class_waveguide_1a3c6bc7f419f94b50c85edbd917c550d1">1457 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_waveguide_1a3c6bc7f419f94b50c85edbd917c550d1">Waveguide::store</link>()&#32;{
1458 &#32;&#32;reinit_storage();
1459 &#32;&#32;<emphasis class="comment">//&#32;storage.reinit(dof_handler.n_dofs());</emphasis>
1460 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(primal)&#32;{
1461 &#32;&#32;&#32;&#32;storage&#32;=&#32;primal_solution;
1462 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1463 &#32;&#32;&#32;&#32;storage&#32;=&#32;dual_solution;
1464 &#32;&#32;}
1465 &#32;&#32;is_stored&#32;=&#32;<emphasis class="keyword">true</emphasis>;
1466 }
1467 
1468 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::output_results(<emphasis class="keywordtype">bool</emphasis>)&#32;{
1469 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i++)&#32;{
1470 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1471 &#32;&#32;&#32;&#32;ErrorOfSolution[index]&#32;=&#32;(*solution)[index]&#32;-&#32;EstimatedSolution[index];
1472 &#32;&#32;}
1473 
1474 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sol_real,&#32;sol_imag;
1475 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;locally_owned_dofs.n_elements();&#32;i&#32;+=&#32;2)&#32;{
1476 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;locally_owned_dofs.nth_index_in_set(i);
1477 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;index2&#32;=&#32;locally_owned_dofs.nth_index_in_set(i&#32;+&#32;1);
1478 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(index&#32;!=&#32;index2&#32;-&#32;1)
1479 &#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;WEIRD&#32;EVENT&#32;IN&#32;OUTPUT&#32;RESULTS&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1480 &#32;&#32;&#32;&#32;sol_real&#32;=&#32;(*solution)[index];
1481 &#32;&#32;&#32;&#32;sol_real&#32;=&#32;sol_real&#32;*&#32;sol_real;
1482 &#32;&#32;&#32;&#32;sol_imag&#32;=&#32;(*solution)[index2];
1483 &#32;&#32;&#32;&#32;sol_imag&#32;=&#32;sol_imag&#32;*&#32;sol_imag;
1484 &#32;&#32;&#32;&#32;ErrorOfSolution[index]&#32;=&#32;std::sqrt(sol_real&#32;+&#32;sol_imag);
1485 &#32;&#32;}
1486 
1487 &#32;&#32;MPI_Barrier(mpi_comm);
1488 
1489 &#32;&#32;std::vector&lt;IndexSet&gt;&#32;i_sys_relevant;
1490 &#32;&#32;i_sys_relevant.resize(GlobalParams.NumberProcesses);
1491 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;below&#32;=&#32;0;
1492 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.NumberProcesses;&#32;i++)&#32;{
1493 &#32;&#32;&#32;&#32;IndexSet&#32;local(Block_Sizes[i]);
1494 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;static_cast&lt;int&gt;(rank))&#32;{
1495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;locally_relevant_dofs.n_elements();&#32;j++)&#32;{
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;idx&#32;=&#32;locally_relevant_dofs.nth_index_in_set(j);
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(idx&#32;&gt;=&#32;below&#32;&amp;&amp;&#32;idx&#32;&lt;&#32;below&#32;+&#32;Block_Sizes[i])&#32;{
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;local.add_index(idx&#32;-&#32;below);
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1500 &#32;&#32;&#32;&#32;&#32;&#32;}
1501 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1502 &#32;&#32;&#32;&#32;&#32;&#32;local&#32;=&#32;i_sys_owned[i];
1503 &#32;&#32;&#32;&#32;}
1504 &#32;&#32;&#32;&#32;below&#32;+=&#32;Block_Sizes[i];
1505 &#32;&#32;&#32;&#32;i_sys_relevant[i]&#32;=&#32;local;
1506 &#32;&#32;}
1507 
1508 &#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;solution_output(i_sys_owned,
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_sys_relevant,&#32;mpi_comm);
1510 &#32;&#32;solution_output&#32;=&#32;*solution;
1511 
1512 &#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;estimate_output(i_sys_owned,
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i_sys_relevant,&#32;mpi_comm);
1514 &#32;&#32;estimate_output&#32;=&#32;EstimatedSolution;
1515 
1516 &#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;error_output(i_sys_owned,&#32;i_sys_relevant,
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mpi_comm);
1518 &#32;&#32;error_output&#32;=&#32;ErrorOfSolution;
1519 
1520 &#32;&#32;MPI_Barrier(mpi_comm);
1521 
1522 &#32;&#32;<emphasis class="comment">//&#32;std::cout&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;&quot;:&#32;&quot;&#32;&lt;&lt;locally_owned_dofs.n_elements()&lt;&lt;&#32;&quot;,&quot;</emphasis>
1523 &#32;&#32;<emphasis class="comment">//&#32;&lt;&lt;locally_owned_dofs.nth_index_in_set(0)&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;</emphasis>
1524 &#32;&#32;<emphasis class="comment">//&#32;locally_owned_dofs.nth_index_in_set(locally_owned_dofs.n_elements()-1)</emphasis>
1525 &#32;&#32;<emphasis class="comment">//&#32;&lt;&lt;std::endl;&#32;evaluate_overall();</emphasis>
1526 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<emphasis class="keyword">true</emphasis>)&#32;{
1527 &#32;&#32;&#32;&#32;DataOut&lt;3&gt;&#32;data_out;
1528 
1529 &#32;&#32;&#32;&#32;data_out.attach_dof_handler(dof_handler);
1530 &#32;&#32;&#32;&#32;data_out.add_data_vector(
1531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution_output,&#32;<emphasis class="stringliteral">&quot;Solution&quot;</emphasis>,
1532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_dof_data);
1534 &#32;&#32;&#32;&#32;data_out.add_data_vector(
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_output,&#32;<emphasis class="stringliteral">&quot;Error_Of_Estimated_Solution&quot;</emphasis>,
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_dof_data);
1538 &#32;&#32;&#32;&#32;data_out.add_data_vector(
1539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;estimate_output,&#32;<emphasis class="stringliteral">&quot;Estimated_Solution&quot;</emphasis>,
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_dof_data);
1542 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;data_out.add_data_vector(differences,&#32;&quot;L2error&quot;);</emphasis>
1543 
1544 &#32;&#32;&#32;&#32;data_out.build_patches();
1545 
1546 &#32;&#32;&#32;&#32;std::ofstream&#32;outputvtu(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;/solution-run&quot;</emphasis>&#32;+
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;-P&quot;</emphasis>&#32;+
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(rank)&#32;+&#32;<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>);
1549 &#32;&#32;&#32;&#32;data_out.write_vtu(outputvtu);
1550 
1551 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0)&#32;{
1552 &#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;outputpvtu(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;/solution-run&quot;</emphasis>&#32;+&#32;std::to_string(run_number)&#32;+
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;.pvtu&quot;</emphasis>);
1555 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;filenames;
1556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.NumberProcesses;&#32;i++)&#32;{
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filenames.push_back(<emphasis class="stringliteral">&quot;solution-run&quot;</emphasis>&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;-P&quot;</emphasis>&#32;+
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(i)&#32;+&#32;<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>);
1559 &#32;&#32;&#32;&#32;&#32;&#32;}
1560 &#32;&#32;&#32;&#32;&#32;&#32;data_out.write_pvtu_record(outputpvtu,&#32;filenames);
1561 &#32;&#32;&#32;&#32;}
1562 
1563 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<emphasis class="keyword">false</emphasis>)&#32;{
1564 &#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;pattern(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;/pattern.gnu&quot;</emphasis>);
1565 
1566 &#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;patternscript(solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;/displaypattern.gnu&quot;</emphasis>);
1568 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;style&#32;line&#32;1000&#32;lw&#32;1&#32;lc&#32;\&quot;black\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.M_W_Sectors;&#32;i++)&#32;{
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1000&#32;+&#32;2&#32;*&#32;i&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;0,-&quot;</emphasis>
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,-&quot;</emphasis>&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1001&#32;+&#32;2&#32;*&#32;i&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,0&#32;to&#32;&quot;</emphasis>
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Dofs_Below_Subdomain[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,&#32;-&quot;</emphasis>
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
1579 &#32;&#32;&#32;&#32;&#32;&#32;}
1580 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1000&#32;+&#32;2&#32;*&#32;GlobalParams.M_W_Sectors
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;0,-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;to&#32;&quot;</emphasis>
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1584 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;set&#32;arrow&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;1001&#32;+&#32;2&#32;*&#32;GlobalParams.M_W_Sectors
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;from&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,0&#32;to&#32;&quot;</emphasis>
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;dof_handler.n_dofs()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;,&#32;-&quot;</emphasis>&#32;&lt;&lt;&#32;dof_handler.n_dofs()
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;nohead&#32;ls&#32;1000&#32;front&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1588 
1589 &#32;&#32;&#32;&#32;&#32;&#32;patternscript&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;plot&#32;\&quot;pattern.gnu\&quot;&#32;with&#32;dots&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1590 &#32;&#32;&#32;&#32;&#32;&#32;patternscript.flush();
1591 &#32;&#32;&#32;&#32;}
1592 &#32;&#32;}
1593 &#32;&#32;MPI_Barrier(mpi_comm);
1594 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.O_O_V_S_SolutionFirst)&#32;{
1595 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;parallel::distributed::Triangulation&lt;3&gt;</emphasis>
1596 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;temp_for_transformation(MPI_COMM_WORLD,</emphasis>
1597 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;parallel::distributed::Triangulation&lt;3&gt;::MeshSmoothing(parallel::distributed::Triangulation&lt;3&gt;::none),</emphasis>
1598 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;parallel::distributed::Triangulation&lt;3&gt;::Settings::no_automatic_repartitioning);</emphasis>
1599 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;temp_for_transformation.copy_triangulation(triangulation);</emphasis>
1600 
1601 &#32;&#32;&#32;&#32;set_the_st(this-&gt;st);
1602 
1603 &#32;&#32;&#32;&#32;GridTools::transform(&amp;Triangulation_Transform_to_physical,&#32;triangulation);
1604 
1605 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1606 
1607 &#32;&#32;&#32;&#32;DataOut&lt;3&gt;&#32;data_out;
1608 
1609 &#32;&#32;&#32;&#32;data_out.attach_dof_handler(dof_handler);
1610 &#32;&#32;&#32;&#32;data_out.add_data_vector(
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution_output,&#32;<emphasis class="stringliteral">&quot;Solution&quot;</emphasis>,
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::DataOut_DoFData&lt;dealii::DoFHandler&lt;3&gt;,&#32;3,
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;3&gt;::DataVectorType::type_dof_data);
1614 
1615 &#32;&#32;&#32;&#32;data_out.build_patches();
1616 
1617 &#32;&#32;&#32;&#32;std::ofstream&#32;outputvtu(
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;/solution-transformed-run&quot;</emphasis>&#32;+
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;-P&quot;</emphasis>&#32;+&#32;std::to_string(rank)&#32;+&#32;<emphasis class="stringliteral">&quot;.vtu&quot;</emphasis>);
1620 &#32;&#32;&#32;&#32;data_out.write_vtu(outputvtu);
1621 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1622 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;triangulation.copy_triangulation(temp_for_transformation);</emphasis>
1623 &#32;&#32;}
1624 }
1625 
1626 Point&lt;3,&#32;double&gt;&#32;Waveguide::transform_coordinate(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;in_p)&#32;{
1627 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;st-&gt;math_to_phys(in_p);
1628 }
1629 
<link linkend="class_waveguide_1a50cf6893286ff8b1b4955f98df0194d2">1630 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_waveguide_1a50cf6893286ff8b1b4955f98df0194d2">Waveguide::run</link>()&#32;{
1631 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Waveguide_&quot;</emphasis>&#32;+&#32;path_prefix&#32;+&#32;<emphasis class="stringliteral">&quot;_run&quot;</emphasis>);
1632 
1633 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(run_number&#32;==&#32;0)&#32;{
1634 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Setting&#32;up&#32;the&#32;mesh...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1635 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Setup&#32;Mesh&quot;</emphasis>);
1636 &#32;&#32;&#32;&#32;make_grid();
1637 &#32;&#32;&#32;&#32;timer.leave_subsection();
1638 
1639 &#32;&#32;&#32;&#32;Compute_Dof_Numbers();
1640 
1641 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Setting&#32;up&#32;FEM...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1642 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Setup&#32;FEM&quot;</emphasis>);
1643 &#32;&#32;&#32;&#32;setup_system();
1644 &#32;&#32;&#32;&#32;timer.leave_subsection();
1645 
1646 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Reset&quot;</emphasis>);
1647 &#32;&#32;&#32;&#32;timer.leave_subsection();
1648 
1649 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1650 &#32;&#32;&#32;&#32;Prepare_Boundary_Constraints();
1651 
1652 &#32;&#32;&#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Reset&quot;</emphasis>);
1653 &#32;&#32;&#32;&#32;reinit_all();
1654 &#32;&#32;&#32;&#32;timer.leave_subsection();
1655 &#32;&#32;}
1656 
1657 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Assembly&quot;</emphasis>);
1658 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Assembling&#32;the&#32;system...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1659 &#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Assemble&quot;</emphasis>);
1660 &#32;&#32;assemble_system();
1661 &#32;&#32;timer.leave_subsection();
1662 &#32;&#32;deallog.pop();
1663 
1664 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Solving&quot;</emphasis>);
1665 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Solving&#32;the&#32;system...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1666 &#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Solve&quot;</emphasis>);
1667 &#32;&#32;solve();
1668 &#32;&#32;timer.leave_subsection();
1669 &#32;&#32;deallog.pop();
1670 
1671 &#32;&#32;timer.enter_subsection(<emphasis class="stringliteral">&quot;Evaluate&quot;</emphasis>);
1672 &#32;&#32;timer.leave_subsection();
1673 
1674 &#32;&#32;timer.print_summary();
1675 
1676 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Writing&#32;outputs...&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1677 &#32;&#32;timer.reset();
1678 
1679 &#32;&#32;output_results(<emphasis class="keyword">false</emphasis>);
1680 
1681 &#32;&#32;deallog.pop();
1682 &#32;&#32;run_number++;
1683 }
1684 
1685 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::print_eigenvalues(
1686 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;&amp;input)&#32;{
1687 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;input.size();&#32;i++)&#32;{
1688 &#32;&#32;&#32;&#32;eigenvalue_file&#32;&lt;&lt;&#32;input.at(i).real()&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;input.at(i).imag()
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
1690 &#32;&#32;}
1691 &#32;&#32;eigenvalue_file&#32;&lt;&lt;&#32;std::endl;
1692 }
1693 
1694 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::print_condition(<emphasis class="keywordtype">double</emphasis>&#32;condition)&#32;{
1695 &#32;&#32;condition_file&#32;&lt;&lt;&#32;condition&#32;&lt;&lt;&#32;std::endl;
1696 }
1697 
1698 std::vector&lt;std::complex&lt;double&gt;&gt;
1699 Waveguide::assemble_adjoint_local_contribution(<emphasis class="keywordtype">double</emphasis>&#32;stepwidth)&#32;{
1700 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Waveguide:adj_local&quot;</emphasis>);
1701 
1702 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Computing&#32;adjoint&#32;based&#32;shape&#32;derivative&#32;contributions...&quot;</emphasis>
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
1704 
1705 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;other_proc&#32;=&#32;GlobalParams.NumberProcesses&#32;-&#32;rank&#32;-&#32;1;
1706 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ndofs&#32;=&#32;st-&gt;<link linkend="class_space_transformation_1a463f0141c194724575bdcdb23168fdec">NDofs</link>();
1707 &#32;&#32;std::vector&lt;std::complex&lt;double&gt;&gt;&#32;ret;
1708 &#32;&#32;ret.resize(ndofs);
1709 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
1710 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;0;
1711 &#32;&#32;}
1712 &#32;&#32;std::vector&lt;bool&gt;&#32;local_supported_dof;
1713 &#32;&#32;local_supported_dof.resize(ndofs);
1714 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;min&#32;=&#32;ndofs;
1715 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;max&#32;=&#32;-1;
1716 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;static_cast&lt;int&gt;(ndofs);&#32;i++)&#32;{
1717 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;<link linkend="class_space_transformation_1a487c356afef667763e244f3a93df4c8a">IsDofFree</link>(i))&#32;{
1718 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;double,&#32;double&gt;&#32;support&#32;=&#32;st-&gt;dof_support(i);
1719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((support.first&#32;&lt;=&#32;minimum_local_z&#32;&amp;&amp;
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;support.second&#32;&gt;=&#32;maximum_local_z)&#32;||
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(support.first&#32;&gt;=&#32;minimum_local_z&#32;&amp;&amp;
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;support.second&#32;&lt;=&#32;maximum_local_z)&#32;||
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(support.first&#32;&lt;=&#32;maximum_local_z&#32;&amp;&amp;
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;support.second&#32;&gt;=&#32;minimum_local_z))&#32;{
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;max)&#32;{
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max&#32;=&#32;i;
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;min)&#32;{
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min&#32;=&#32;i;
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1731 &#32;&#32;&#32;&#32;&#32;&#32;}
1732 &#32;&#32;&#32;&#32;}
1733 &#32;&#32;}
1734 
1735 &#32;&#32;QGauss&lt;3&gt;&#32;quadrature_formula(1);
1736 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;real(0);
1737 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;FEValuesExtractors::Vector&#32;imag(3);
1738 &#32;&#32;FEValues&lt;3&gt;&#32;fe_values(fe,&#32;quadrature_formula,
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_values&#32;|&#32;update_gradients&#32;|&#32;update_JxW_values&#32;|
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update_quadrature_points);
1741 &#32;&#32;std::vector&lt;Point&lt;3&gt;&gt;&#32;quadrature_points;
1742 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;n_q_points&#32;=&#32;quadrature_formula.size();
1743 
1744 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;transformation;
1745 
1746 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;total&#32;=&#32;triangulation.n_active_cells()&#32;*&#32;quadrature_formula.size();
1747 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;counter&#32;=&#32;0;
1748 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*returned_vector&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[6];
1749 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;temp_counter&#32;=&#32;0;&#32;temp_counter&#32;&lt;&#32;2;&#32;temp_counter++)&#32;{
1750 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(((GlobalParams.NumberProcesses&#32;%&#32;2&#32;==&#32;1)&#32;&amp;&amp;
1751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(static_cast&lt;int&gt;(rank)&#32;==&#32;GlobalParams.NumberProcesses&#32;/&#32;2&#32;-&#32;1)&#32;&amp;&amp;
1752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp_counter&#32;==&#32;0))&#32;{
1753 &#32;&#32;&#32;&#32;&#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;middle&#32;phase&quot;</emphasis>);
1754 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;This&#32;process&#32;is&#32;now&#32;computing&#32;its&#32;own&#32;contributions&#32;to&#32;the&#32;&quot;</emphasis>
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;shape&#32;gradient.&quot;</emphasis>
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
1757 
1758 &#32;&#32;&#32;&#32;&#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
1759 &#32;&#32;&#32;&#32;&#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),&#32;endc&#32;=&#32;dof_handler.end();
1760 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe_values.reinit(cell);
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points&#32;=&#32;fe_values.get_quadrature_points();
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;q_index&#32;=&#32;0;&#32;q_index&#32;&lt;&#32;n_q_points;&#32;++q_index)&#32;{
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;own_solution&#32;=
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution_evaluation(quadrature_points[q_index]);
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;other_solution&#32;=
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjoint_solution_evaluation(quadrature_points[q_index]);
1769 
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;JxW&#32;=&#32;fe_values.JxW(q_index);
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;min;&#32;j&#32;&lt;=&#32;max;&#32;j++)&#32;{
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation&#32;=&#32;st-&gt;get_Tensor_for_step(
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points[q_index],&#32;j,&#32;stepwidth);
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;point_in_dof_support(quadrature_points[q_index],&#32;j))&#32;{
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[j]&#32;+=&#32;own_solution&#32;*&#32;transformation&#32;*&#32;other_solution&#32;*&#32;JxW;
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter++;
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((counter&#32;-&#32;1)&#32;/&#32;(total&#32;/&#32;10)&#32;!=&#32;(counter)&#32;/&#32;(total&#32;/&#32;10))&#32;{
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;static_cast&lt;int&gt;(100&#32;*&#32;(counter)&#32;/&#32;(total))&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;%&quot;</emphasis>
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1785 &#32;&#32;&#32;&#32;&#32;&#32;}
1786 
1787 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1788 &#32;&#32;&#32;&#32;&#32;&#32;deallog.pop();
1789 
1790 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&gt;=&#32;temp_counter&#32;*&#32;(GlobalParams.NumberProcesses)&#32;/&#32;2&#32;&amp;&amp;
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rank&#32;&lt;&#32;(1&#32;+&#32;temp_counter)&#32;*&#32;(GlobalParams.NumberProcesses)&#32;/&#32;2)&#32;{
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;local&#32;cell&#32;phase&quot;</emphasis>);
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;This&#32;process&#32;is&#32;now&#32;computing&#32;its&#32;own&#32;contributions&#32;to&#32;the&#32;&quot;</emphasis>
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;shape&#32;gradient&#32;together&#32;with&#32;&quot;</emphasis>
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;other_proc&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1797 
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DoFHandler&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell&#32;=&#32;dof_handler.begin_active(),&#32;endc&#32;=&#32;dof_handler.end();
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fe_values.reinit(cell);
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points&#32;=&#32;fe_values.get_quadrature_points();
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;q_index&#32;=&#32;0;&#32;q_index&#32;&lt;&#32;n_q_points;&#32;++q_index)&#32;{
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;own_solution&#32;=
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solution_evaluation(quadrature_points[q_index]);
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;quadrature_points[q_index][0],&#32;3,&#32;MPI_DOUBLE,
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_proc,&#32;0,&#32;mpi_comm);
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Recv(&amp;returned_vector[0],&#32;6,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mpi_comm,&#32;MPI_STATUS_IGNORE);
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;other_solution;
1812 
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[0].real(returned_vector[0]);
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[0].imag(-returned_vector[1]);
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[1].real(returned_vector[2]);
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[1].imag(-returned_vector[3]);
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[2].real(returned_vector[4]);
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other_solution[2].imag(-returned_vector[5]);
1819 
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;JxW&#32;=&#32;fe_values.JxW(q_index);
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;min;&#32;j&#32;&lt;=&#32;max;&#32;j++)&#32;{
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation&#32;=&#32;st-&gt;get_Tensor_for_step(
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;quadrature_points[q_index],&#32;j,&#32;stepwidth);
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;point_in_dof_support(quadrature_points[q_index],&#32;j))&#32;{
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[j]&#32;+=
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;own_solution&#32;*&#32;transformation&#32;*&#32;other_solution&#32;*&#32;JxW;
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;counter++;
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((counter&#32;-&#32;1)&#32;/&#32;(total&#32;/&#32;10)&#32;!=&#32;(counter)&#32;/&#32;(total&#32;/&#32;10))&#32;{
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;static_cast&lt;int&gt;(100&#32;*&#32;(counter)&#32;/&#32;(total))&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;%&quot;</emphasis>
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1837 
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*end_signal&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[3];
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_signal[0]&#32;=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0;
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_signal[1]&#32;=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0;
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end_signal[2]&#32;=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0;
1842 
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;end_signal[0],&#32;3,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm);
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.pop();
1846 
1847 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;non-local&#32;cell&#32;phase&quot;</emphasis>);
1849 
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;This&#32;process&#32;is&#32;now&#32;adjoint&#32;based&#32;contributions&#32;for&#32;process&#32;&quot;</emphasis>
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;other_proc&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;normal&#32;=&#32;<emphasis class="keyword">true</emphasis>;
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(normal)&#32;{
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*position_array&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[3];
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Recv(&amp;position_array[0],&#32;3,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm,
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_STATUS_IGNORE);
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal&#32;=&#32;<emphasis class="keyword">false</emphasis>;
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position_array[i]&#32;!=&#32;GlobalParams.Minimum_Z&#32;-&#32;10.0)&#32;{
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;normal&#32;=&#32;<emphasis class="keyword">true</emphasis>;
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Received&#32;request&#32;for&#32;(&quot;&#32;&lt;&lt;&#32;position_array[0]&#32;&lt;&lt;&#32;&quot;,&#32;&quot;&lt;&lt;</emphasis>
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;position_array[1]&#32;&lt;&lt;&#32;&quot;,&#32;&quot;&lt;&lt;position_array[2]&lt;&lt;&quot;)&quot;&lt;&lt;std::endl;</emphasis>
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(normal)&#32;{
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*result&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[6];
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;position;
1869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
1870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position[i]&#32;=&#32;position_array[i];
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;adjoint_solution_evaluation(position,&#32;result);
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;result[0],&#32;6,&#32;MPI_DOUBLE,&#32;other_proc,&#32;0,&#32;mpi_comm);
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Sent&#32;a&#32;solution.&quot;&lt;&lt;std::endl;</emphasis>
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog.pop();
1879 &#32;&#32;&#32;&#32;&#32;&#32;}
1880 &#32;&#32;&#32;&#32;}
1881 
1882 &#32;&#32;&#32;&#32;MPI_Barrier(mpi_comm);
1883 &#32;&#32;}
1884 
1885 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done.&#32;Communicating:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
1886 
1887 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*input&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[2&#32;*&#32;ndofs];
1888 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*output&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[2&#32;*&#32;ndofs];
1889 
1890 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
1891 &#32;&#32;&#32;&#32;input[2&#32;*&#32;i]&#32;=&#32;ret[i].real();
1892 &#32;&#32;&#32;&#32;input[2&#32;*&#32;i&#32;+&#32;1]&#32;=&#32;ret[i].imag();
1893 &#32;&#32;}
1894 
1895 &#32;&#32;MPI_Allreduce(input,&#32;output,&#32;2&#32;*&#32;ndofs,&#32;MPI_DOUBLE,&#32;MPI_SUM,&#32;MPI_COMM_WORLD);
1896 
1897 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
1898 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;-1.0&#32;*&#32;std::complex&lt;double&gt;(output[2&#32;*&#32;i&#32;+&#32;1],&#32;output[2&#32;*&#32;i])&#32;/
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stepwidth;
1900 &#32;&#32;}
1901 
1902 &#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;input;
1903 &#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;output;
1904 
1905 &#32;&#32;deallog.pop();
1906 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1907 }
1908 
1909 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::solution_evaluation(
1910 &#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1911 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1912 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1913 
1914 &#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_with_relevant,&#32;position,&#32;result);
1915 
1916 &#32;&#32;ret[0]&#32;=&#32;std::complex&lt;double&gt;(result(0),&#32;result(3));
1917 &#32;&#32;ret[1]&#32;=&#32;std::complex&lt;double&gt;(result(1),&#32;result(4));
1918 &#32;&#32;ret[2]&#32;=&#32;std::complex&lt;double&gt;(result(2),&#32;result(5));
1919 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1920 }
1921 
1922 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::solution_evaluation(Point&lt;3,&#32;double&gt;&#32;position,
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*sol)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1924 &#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Process&#32;&quot;&#32;&lt;&lt;&#32;GlobalParams.MPI_Rank&#32;&lt;&lt;&#32;&quot;&#32;as&#32;&quot;&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;&quot;</emphasis>
1925 &#32;&#32;<emphasis class="comment">//&#32;evaluating&#32;at(&quot;&#32;&lt;&lt;&#32;position[0]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[1]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[2]</emphasis>
1926 &#32;&#32;<emphasis class="comment">//&#32;&lt;&lt;&#32;&quot;).&#32;The&#32;local&#32;range&#32;is&#32;[&quot;&lt;&lt;&#32;minimum_local_z&lt;&lt;&quot;,&quot;&lt;&lt;maximum_local_z&lt;&lt;&quot;]&quot;&lt;&lt;</emphasis>
1927 &#32;&#32;<emphasis class="comment">//&#32;std::endl;</emphasis>
1928 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1929 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1930 &#32;&#32;VectorTools::point_value(dof_handler,&#32;primal_with_relevant,&#32;position,&#32;result);
1931 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
1932 &#32;&#32;&#32;&#32;sol[i]&#32;=&#32;result(i);
1933 &#32;&#32;}
1934 }
1935 
1936 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Waveguide::adjoint_solution_evaluation(
1937 &#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1938 &#32;&#32;<emphasis class="comment">//&#32;deallog&#32;&lt;&lt;&#32;&quot;Process&#32;&quot;&#32;&lt;&lt;&#32;GlobalParams.MPI_Rank&#32;&lt;&lt;&#32;&quot;&#32;as&#32;&quot;&#32;&lt;&lt;&#32;rank&#32;&lt;&lt;&#32;&quot;</emphasis>
1939 &#32;&#32;<emphasis class="comment">//&#32;evaluating&#32;at(&quot;&#32;&lt;&lt;&#32;position[0]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[1]&#32;&lt;&lt;&#32;&quot;,&quot;&#32;&lt;&lt;&#32;position[2]</emphasis>
1940 &#32;&#32;<emphasis class="comment">//&#32;&lt;&lt;&#32;&quot;).&#32;The&#32;local&#32;range&#32;is&#32;[&quot;&lt;&lt;&#32;minimum_local_z&lt;&lt;&quot;,&quot;&lt;&lt;maximum_local_z&lt;&lt;&quot;]&quot;&lt;&lt;</emphasis>
1941 &#32;&#32;<emphasis class="comment">//&#32;std::endl;</emphasis>
1942 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1943 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1944 &#32;&#32;position[2]&#32;=&#32;-position[2];
1945 &#32;&#32;VectorTools::point_value(dof_handler,&#32;dual_with_relevant,&#32;position,&#32;result);
1946 &#32;&#32;ret[0]&#32;=&#32;std::complex&lt;double&gt;(result(0),&#32;result(3));
1947 &#32;&#32;ret[1]&#32;=&#32;std::complex&lt;double&gt;(-result(1),&#32;-result(4));
1948 &#32;&#32;ret[2]&#32;=&#32;std::complex&lt;double&gt;(-result(2),&#32;-result(5));
1949 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
1950 }
1951 
1952 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::adjoint_solution_evaluation(Point&lt;3,&#32;double&gt;&#32;position,
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*sol)<emphasis class="keyword">&#32;const&#32;</emphasis>{
1954 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
1955 &#32;&#32;Vector&lt;double&gt;&#32;result(6);
1956 &#32;&#32;position[2]&#32;=&#32;-position[2];
1957 &#32;&#32;VectorTools::point_value(dof_handler,&#32;dual_with_relevant,&#32;position,&#32;result);
1958 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
1959 &#32;&#32;&#32;&#32;sol[i]&#32;=&#32;-result(i);
1960 &#32;&#32;}
1961 &#32;&#32;sol[0]&#32;*=&#32;-1;
1962 &#32;&#32;sol[1]&#32;*=&#32;-1;
1963 }
1964 
1965 <emphasis class="keywordtype">void</emphasis>&#32;Waveguide::reset_changes()&#32;{&#32;reinit_all();&#32;}
1966 
1967 SolverControl::State&#32;Waveguide::residual_tracker(
1968 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Iteration,&#32;<emphasis class="keywordtype">double</emphasis>&#32;residual,
1969 &#32;&#32;&#32;&#32;dealii::TrilinosWrappers::MPI::BlockVector)&#32;{
1970 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((GlobalParams.O_C_D_ConvergenceFirst&#32;&amp;&amp;&#32;run_number&#32;==&#32;0)&#32;||
1971 &#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.O_C_D_ConvergenceAll)&#32;{
1972 &#32;&#32;&#32;&#32;<emphasis class="keyword">struct&#32;</emphasis>timeval&#32;tp;
1973 &#32;&#32;&#32;&#32;gettimeofday(&amp;tp,&#32;NULL);
1974 &#32;&#32;&#32;&#32;int64_t&#32;ms&#32;=&#32;tp.tv_sec&#32;*&#32;1000&#32;+&#32;tp.tv_usec&#32;/&#32;1000&#32;-&#32;solver_start_milis;
1975 
1976 &#32;&#32;&#32;&#32;Convergence_Table.add_value(
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Iteration&quot;</emphasis>,&#32;Iteration);
1978 &#32;&#32;&#32;&#32;Convergence_Table.add_value(
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Residual&quot;</emphasis>,&#32;residual);
1980 &#32;&#32;&#32;&#32;Convergence_Table.add_value(
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_prefix&#32;+&#32;std::to_string(run_number)&#32;+&#32;<emphasis class="stringliteral">&quot;Time&quot;</emphasis>,&#32;std::to_string(ms));
1982 &#32;&#32;}
1983 &#32;&#32;steps&#32;=&#32;Iteration;
1984 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;SolverControl::success;
1985 &#32;&#32;;
1986 }
1987 
1988 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
