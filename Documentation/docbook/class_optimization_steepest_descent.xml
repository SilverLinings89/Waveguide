<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_optimization_steepest_descent">
<title>OptimizationSteepestDescent class Reference</title>
<para>
    <programlisting>#include <link linkend="_optimization_steepest_descent_8h">&lt;OptimizationSteepestDescent.h&gt;</link></programlisting>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_optimization_steepest_descent_1a570b35e294def4475c39366dbd19b048">OptimizationSteepestDescent</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_optimization_steepest_descent_1ad87786cb0198eaa38ba1ee40dfe860ec">~OptimizationSteepestDescent</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_optimization_steepest_descent_1ad5965ac2f0eea46581d4ba5cecf31c34">perform_small_step_next</link> (
int small_steps_before)<para><emphasis>The optimization is mainly split into two kinds of steps: Full and small steps.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_optimization_steepest_descent_1a15b9554cfd1383bfc37a50f8d0070393">get_small_step_step_width</link> (
int small_steps_before)<para><emphasis>For the optimization scheme to know, which step size is appropriate, this function was included.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_optimization_steepest_descent_1ae66943b5912a1fff837c94e74ab96707">perform_big_step_next</link> (
int small_steps_before)<para><emphasis>This functions returns true, if enough steps were performed to compute the next state to compute a full solution on.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; double &gt; <link linkend="class_optimization_steepest_descent_1a5337bf387821a239a1694c4124e30cba">get_big_step_configuration</link> (
)<para><emphasis>This function computes the states that should be computed next.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>This class implements the computation of an optimization step via a Steepest-Descent-method. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Objects of the Type <link linkend="class_optimization_algorithm">OptimizationAlgorithm</link> are used by the class OptimizationStrategy to compute the next viable configuration based on former results. Its is encapsulated in it&apos;s own class to offer comparison and easy changing between different schemes. <formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
<formalpara><title>Date: </title>

<para>29.11.2016 </para>
</formalpara>
</para>
                <para>Definition at line 14 of file OptimizationSteepestDescent.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>OptimizationSteepestDescent.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="class_optimization_steepest_descent_1a570b35e294def4475c39366dbd19b048">
                <title>OptimizationSteepestDescent::OptimizationSteepestDescent ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_optimization_steepest_descent_1ad87786cb0198eaa38ba1ee40dfe860ec">
                <title>OptimizationSteepestDescent::~OptimizationSteepestDescent ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_optimization_steepest_descent_1ad5965ac2f0eea46581d4ba5cecf31c34">
                <title>bool OptimizationSteepestDescent::perform_small_step_next (int small_steps_before)</title> <emphasis>The optimization is mainly split into two kinds of steps: Full and small steps.</emphasis>
                
<para>For FD based schemes, a small step is a computation of finite differences for all degrees of freedom which entails a lot of computation. Small here refers to the norm of the step width - not necessarily to the amount of computation required. In general this function is supposed to gather information about the target functional around the current state. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>small_steps_before</entry>
                                <entry>
<para>this number tells the scheme how many small steps were performed before the current request. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>this is true, if the <link linkend="class_optimization">Optimization</link> Scheme requires more small steps before a big step can be performed. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_optimization_steepest_descent_1a15b9554cfd1383bfc37a50f8d0070393">
                <title>double OptimizationSteepestDescent::get_small_step_step_width (int small_steps_before)</title> <emphasis>For the optimization scheme to know, which step size is appropriate, this function was included.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>small_steps_before</entry>
                                <entry>
<para>similar to perform_small_step_next this is the number of small steps before the current one. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>double this is how much the values of the degrees of freedom should be adapted. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_optimization_steepest_descent_1ae66943b5912a1fff837c94e74ab96707">
                <title>bool OptimizationSteepestDescent::perform_big_step_next (int small_steps_before)</title> <emphasis>This functions returns true, if enough steps were performed to compute the next state to compute a full solution on.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>small_steps_before</entry>
                                <entry>
<para>number of small steps performed before this call. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>true, if the next computation should be a big step - otherwise false. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_optimization_steepest_descent_1a5337bf387821a239a1694c4124e30cba">
                <title>std::vector&lt; double &gt; OptimizationSteepestDescent::get_big_step_configuration ()</title> <emphasis>This function computes the states that should be computed next.</emphasis>
                
<para>If the next step will be a small step the update can be done by simply updating all dofs with a step width (or only one depending on the pattern) so this function is only used when a big step will be computed next and therefore all dofs could change differently. <formalpara><title>Returns: </title>

<para>This is a vector of degrees of freedom which can be used by the <link linkend="class_optimization">Optimization</link> Strategy to update the Space Transformation. </para>
</formalpara>
</para>

            </section>
</section>
