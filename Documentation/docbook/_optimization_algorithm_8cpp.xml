<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_optimization_algorithm_8cpp">
    <title>OptimizationAlgorithm.cpp File Reference</title>
    <programlisting>#include &quot;OptimizationAlgorithm.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_optimization_algorithm_8cpp_1ab873a4c37ca2011c16fa58d581667c87">OPTIMIZATION_ALGORITHM_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/OptimizationAlgorithm/OptimizationAlgorithm.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;OPTIMIZATION_ALGORITHM_CPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;OPTIMIZATION_ALGORITHM_CPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;OptimizationAlgorithm.h&quot;</emphasis>
5 
6 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keyword">typename</emphasis>&#32;datatype&gt;
7 <link linkend="class_optimization_algorithm">OptimizationAlgorithm&lt;datatype&gt;::OptimizationAlgorithm</link>()&#32;{}
8 
9 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keyword">typename</emphasis>&#32;datatype&gt;
10 <link linkend="class_optimization_algorithm">OptimizationAlgorithm&lt;datatype&gt;::~OptimizationAlgorithm</link>()&#32;{}
11 
12 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keyword">typename</emphasis>&#32;datatype&gt;
<link linkend="class_optimization_algorithm_1a8b94776efc6cb8783f3781c75a6c8d01">13 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_optimization_algorithm_1a8b94776efc6cb8783f3781c75a6c8d01">OptimizationAlgorithm&lt;datatype&gt;::pass_result_small_step</link>(
14 &#32;&#32;&#32;&#32;std::vector&lt;datatype&gt;&#32;in_step_result)&#32;{
15 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Small&#32;Step&#32;Result&quot;</emphasis>);
16 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;complex&#32;=&#32;std::is_same&lt;datatype,&#32;std::complex&lt;double&gt;&gt;::value;
17 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(complex)&#32;{
18 &#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;values;
19 &#32;&#32;&#32;&#32;values.resize(2&#32;*&#32;in_step_result.size());
20 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in_step_result.size();&#32;i++)&#32;{
21 &#32;&#32;&#32;&#32;&#32;&#32;values[2&#32;*&#32;i]&#32;=&#32;((std::complex&lt;double&gt;)in_step_result[i]).real();
22 &#32;&#32;&#32;&#32;&#32;&#32;values[2&#32;*&#32;i&#32;+&#32;1]&#32;=&#32;((std::complex&lt;double&gt;)in_step_result[i]).imag();
23 &#32;&#32;&#32;&#32;}
24 &#32;&#32;&#32;&#32;dealii::Utilities::MPI::sum(values,&#32;MPI_COMM_WORLD,&#32;values);
25 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in_step_result.size();&#32;i++)&#32;{
26 &#32;&#32;&#32;&#32;&#32;&#32;((std::complex&lt;double&gt;)in_step_result[i]).real(values[2&#32;*&#32;i]);
27 &#32;&#32;&#32;&#32;&#32;&#32;((std::complex&lt;double&gt;)in_step_result[i]).imag(values[2&#32;*&#32;i&#32;+&#32;1]);
28 &#32;&#32;&#32;&#32;}
29 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
30 &#32;&#32;}
31 
32 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in_step_result.size();&#32;i++)&#32;{
33 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;in_step_result[i];
34 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;in_step_result.size()&#32;-&#32;1)&#32;{
35 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;,&#32;&quot;</emphasis>;
36 &#32;&#32;&#32;&#32;}
37 &#32;&#32;}
38 &#32;&#32;deallog&#32;&lt;&lt;&#32;std::endl;
39 &#32;&#32;deallog.pop();
40 &#32;&#32;states.push_back(in_step_result);
41 }
42 
43 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keyword">typename</emphasis>&#32;datatype&gt;
<link linkend="class_optimization_algorithm_1ac35f79dd2065a34291033e10393059f0">44 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_optimization_algorithm_1ac35f79dd2065a34291033e10393059f0">OptimizationAlgorithm&lt;datatype&gt;::pass_result_big_step</link>(datatype&#32;in_change)&#32;{
45 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Big&#32;Step&#32;Result&#32;passed&quot;</emphasis>);
46 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Result:&quot;</emphasis>&#32;&lt;&lt;&#32;in_change&#32;&lt;&lt;&#32;std::endl;
47 &#32;&#32;deallog.pop();
48 &#32;&#32;residuals.push_back(in_change);
49 }
50 
51 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keyword">typename</emphasis>&#32;datatype&gt;
52 <emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_optimization_algorithm">OptimizationAlgorithm&lt;datatype&gt;::WriteStepsOut</link>(
53 &#32;&#32;&#32;&#32;std::ofstream&amp;&#32;result_file)&#32;{
54 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Writing&#32;state&#32;table&quot;</emphasis>);
55 &#32;&#32;std::string*&#32;names&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;std::string[3];
56 &#32;&#32;names[0]&#32;=&#32;<emphasis class="stringliteral">&quot;Radius&#32;&quot;</emphasis>;
57 &#32;&#32;names[1]&#32;=&#32;<emphasis class="stringliteral">&quot;Shift&#32;&quot;</emphasis>;
58 &#32;&#32;names[2]&#32;=&#32;<emphasis class="stringliteral">&quot;Angle&#32;&quot;</emphasis>;
59 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;complex&#32;=&#32;std::is_same&lt;datatype,&#32;std::complex&lt;double&gt;&gt;::value;
60 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Writing&#32;values&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
61 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;l&#32;=&#32;0;&#32;l&#32;&lt;&#32;states.size();&#32;l++)&#32;{
62 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;states[l].size()&#32;/&#32;3;&#32;j++)&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(complex)&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;temp&#32;=
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::complex&lt;double&gt;)states[l][3&#32;*&#32;j&#32;+&#32;i];
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Optimization_Steps.add_value(names[i]&#32;+&#32;std::to_string(j)&#32;+&#32;<emphasis class="stringliteral">&quot;r&quot;</emphasis>,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp.real());
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Optimization_Steps.add_value(names[i]&#32;+&#32;std::to_string(j)&#32;+&#32;<emphasis class="stringliteral">&quot;i&quot;</emphasis>,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp.imag());
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;Optimization_Steps.add_value(names[i]&#32;+&#32;std::to_string(j)&#32;,</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;(double)states[l][3*j&#32;+&#32;i]);</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
75 &#32;&#32;&#32;&#32;&#32;&#32;}
76 &#32;&#32;&#32;&#32;}
77 &#32;&#32;&#32;&#32;Optimization_Steps.add_value(<emphasis class="stringliteral">&quot;Step&#32;Width&quot;</emphasis>,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;steps_widths[l&#32;%&#32;STEPS_PER_DOFS]);
79 &#32;&#32;}
80 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Managing&#32;Table&#32;Columns&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
81 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(states.size()&#32;&gt;&#32;0)&#32;{
82 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;states[0].size()&#32;/&#32;3;&#32;j++)&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(complex)&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Optimization_Steps.add_column_to_supercolumn(
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;names[i]&#32;+&#32;std::to_string(j)&#32;+&#32;<emphasis class="stringliteral">&quot;r&quot;</emphasis>,&#32;names[i]);
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Optimization_Steps.add_column_to_supercolumn(
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;names[i]&#32;+&#32;std::to_string(j)&#32;+&#32;<emphasis class="stringliteral">&quot;i&quot;</emphasis>,&#32;names[i]);
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Optimization_Steps.add_column_to_supercolumn(
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;names[i]&#32;+&#32;std::to_string(j),&#32;names[i]);
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
93 &#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;}
95 &#32;&#32;}
96 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
97 &#32;&#32;Optimization_Steps.write_tex(result_file);
98 &#32;&#32;deallog.pop();
99 }
100 
101 <emphasis class="keyword">template</emphasis>&#32;<emphasis class="keyword">class&#32;</emphasis><link linkend="class_optimization_algorithm">OptimizationAlgorithm&lt;std::complex&lt;double&gt;</link>&gt;;
102 <emphasis class="keyword">template</emphasis>&#32;<emphasis class="keyword">class&#32;</emphasis><link linkend="class_optimization_algorithm">OptimizationAlgorithm&lt;double&gt;</link>;
103 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
