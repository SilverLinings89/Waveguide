<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_exact_solution">
<title>ExactSolution class Reference</title>
<para>
    <programlisting>#include <link linkend="_exact_solution_8h">&lt;ExactSolution.h&gt;</link></programlisting>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool is_rectangular</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool is_dual</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; float &gt; mesh_points</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>PointVal ** vals</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_exact_solution_1a900d8e9bd8ec42439f7a7dbb50c6c898">ExactSolution</link> (
bool in_rectangular, bool in_dual)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="class_exact_solution_1ae34a7cff183d6299852f404eecee0ac5">value</link> (
const Point&lt; 3 &gt; &amp; p, const unsigned int component)<para><emphasis>This function calculates one single component of the solution vector.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link> (
const Point&lt; 3 &gt; &amp; p, Vector&lt; double &gt; &amp; value)<para><emphasis>This function is the one that gets called from external contexts and calls
the value-function to calculate the individual components.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; std::string &gt; <link linkend="class_exact_solution_1ae5631eb0180157a43d021644ab437e76">split</link> (
std::string )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Tensor&lt; 1, 3, std::complex&lt; double &gt; &gt; <link linkend="class_exact_solution_1a4d1e8232b872f235132391f455573962">curl</link> (
const Point&lt; 3 &gt; &amp; in_p)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Tensor&lt; 1, 3, std::complex&lt; double &gt; &gt; <link linkend="class_exact_solution_1ab1eba3cde47c23a7492f6241a5b5e46c">val</link> (
const Point&lt; 3 &gt; &amp; in_p)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>This class is derived from the Function class and can be used to estimate the L2-error for a straight waveguide. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>In the case of a completely cylindrical waveguide, an analytic solution is known (the modes of the input-signal themselves) and this class offers a representation of this analytical solution. If the waveguide has any other shape, this solution does not lose its value completely - it can still be used as a starting-vector for iterative solvers.</para>

<para>The structure of this class is defined by the properties of the Function-class meaning that we have two functions:<orderedlist>
<listitem>
<para>virtual double value (const Point&lt;dim&gt; &amp;p, const unsigned int component ) calculates the value for a single component of the vector-valued return-value.</para>
</listitem><listitem>
<para>virtual void vector_value (const Point&lt;dim&gt; &amp;p, Vector&lt;double&gt; &amp;value) puts these individual components into the parameter value, which is a reference to a vector, handed over to store the result.</para>
</listitem></orderedlist>
</para>

<para><formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
<formalpara><title>Date: </title>

<para>23.11.2015 </para>
</formalpara>
</para>
                <para>Definition at line 36 of file ExactSolution.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>ExactSolution.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_exact_solution_1a900d8e9bd8ec42439f7a7dbb50c6c898">
                <title>ExactSolution::ExactSolution (bool in_rectangular=false, bool in_dual=false)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_exact_solution_1ae34a7cff183d6299852f404eecee0ac5">
                <title>double ExactSolution::value (const Point&lt; 3 &gt; &amp;p, const unsigned int component) const</title> <emphasis>This function calculates one single component of the solution vector.</emphasis>
                
<para>To calculate this, we do the following: We know the input on the boundary of the computational domain for <equation><title>form_25</title>$z = z_{in}$</equation>. So for a given position <equation><title>form_26</title>$ p = (x,y,z)$</equation> we calculate <equation><title>form_27</title>\[ f_c(x,y,z) = \sum_{j=0}^N \left( a_j \, \boldsymbol{\phi_j}(x,y,z_{in}) \right) \cdot \boldsymbol{e_c} \, \mathrm{e}^{i \omega (z-z_{in})}.\]</equation> Here, <equation><title>form_28</title>$\boldsymbol{\phi_j}$</equation> is the j-th mode of the waveguide which is induced with the intensity <equation><title>form_29</title>$ a_j$</equation>. <equation><title>form_30</title>$\boldsymbol{e_c}$</equation> is the c-th unit-vector with <equation><title>form_31</title>$c$</equation> being the index of the component we want to compute. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>p</entry>
                                <entry>
<para>This value contains the position for which we want to calculate the exact solution. </para>
</entry>
                            </row>
                            <row>
                                <entry>component</entry>
                                <entry>
<para>This integer holds the index of the component we want to compute. Keep in mind that these are not coordinates in the physical sense. The components 0 to 2 are the real parts of the solution-vector and the components 3-5 are the imaginary parts. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">
                <title>void ExactSolution::vector_value (const Point&lt; 3 &gt; &amp;p, Vector&lt; double &gt; &amp;value) const</title> <emphasis>This function is the one that gets called from external contexts and calls
the value-function to calculate the individual components.</emphasis>
                
<para>The real solution looks as follows: <equation><title>form_32</title>\[ f(x,y,z) = \begin{pmatrix} \operatorname{value}(x,y,z,0) \\ \operatorname{value}(x,y,z,1)\\\operatorname{value}(x,y,z,2) \end{pmatrix} + i \begin{pmatrix}\operatorname{value}(x,y,z,3)\\\operatorname{value}(x,y,z,4)\\\operatorname{value}(x,y,z,5)\end{pmatrix}.\]</equation> </para>

            </section>
            <section xml:id="class_exact_solution_1ae5631eb0180157a43d021644ab437e76">
                <title>std::vector&lt; std::string &gt; ExactSolution::split (std::string) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_exact_solution_1a4d1e8232b872f235132391f455573962">
                <title>Tensor&lt; 1, 3, std::complex&lt; double &gt; &gt; ExactSolution::curl (const Point&lt; 3 &gt; &amp;in_p) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_exact_solution_1ab1eba3cde47c23a7492f6241a5b5e46c">
                <title>Tensor&lt; 1, 3, std::complex&lt; double &gt; &gt; ExactSolution::val (const Point&lt; 3 &gt; &amp;in_p) const</title> <emphasis></emphasis>
                
            </section>
</section>
