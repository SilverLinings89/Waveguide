<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_optimization_steepest_descent_8cpp">
    <title>OptimizationSteepestDescent.cpp File Reference</title>
    <programlisting>#include &quot;OptimizationSteepestDescent.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_optimization_steepest_descent_8cpp_1a3ac083035906f79551a0cbf1f2b74e4f">OPTIMIZATION_STEEPEST_DESCENT_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/OptimizationAlgorithm/OptimizationSteepestDescent.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;OPTIMIZATION_STEEPEST_DESCENT_CPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;OPTIMIZATION_STEEPEST_DESCENT_CPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;OptimizationSteepestDescent.h&quot;</emphasis>
5 
6 OptimizationSteepestDescent::OptimizationSteepestDescent()&#32;{
7 
8 }
9 
10 OptimizationSteepestDescent::~OptimizationSteepestDescent()&#32;{
11 
12 }
13 
<link linkend="class_optimization_steepest_descent_1ae66943b5912a1fff837c94e74ab96707">14 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_optimization_steepest_descent_1ae66943b5912a1fff837c94e74ab96707">OptimizationSteepestDescent::perform_big_step_next</link>(&#32;<emphasis class="keywordtype">int</emphasis>&#32;&#32;)&#32;{
15 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;full_steps&#32;=&#32;residuals.size();
16 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;small_steps&#32;=&#32;states.size();
17 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(full_steps&#32;&lt;=&#32;small_steps);
18 }
19 
<link linkend="class_optimization_steepest_descent_1a15b9554cfd1383bfc37a50f8d0070393">20 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_optimization_steepest_descent_1a15b9554cfd1383bfc37a50f8d0070393">OptimizationSteepestDescent::get_small_step_step_width</link>(&#32;<emphasis class="keywordtype">int</emphasis>&#32;&#32;)&#32;{
21 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;GlobalParams.StepWidth;;
22 }
23 
<link linkend="class_optimization_steepest_descent_1ad5965ac2f0eea46581d4ba5cecf31c34">24 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_optimization_steepest_descent_1ad5965ac2f0eea46581d4ba5cecf31c34">OptimizationSteepestDescent::perform_small_step_next</link>(&#32;<emphasis class="keywordtype">int</emphasis>&#32;&#32;)&#32;&#32;{
25 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;!<link linkend="class_optimization_steepest_descent_1ae66943b5912a1fff837c94e74ab96707">perform_big_step_next</link>(0);
26 }
27 
<link linkend="class_optimization_steepest_descent_1a5337bf387821a239a1694c4124e30cba">28 </link>std::vector&lt;double&gt;&#32;<link linkend="class_optimization_steepest_descent_1a5337bf387821a239a1694c4124e30cba">OptimizationSteepestDescent::get_big_step_configuration</link>()&#32;{
29 &#32;&#32;std::vector&lt;double&gt;&#32;ret;
30 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(residuals.size()&#32;==&#32;0&#32;&amp;&amp;&#32;states.size()&#32;==&#32;0)&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
32 &#32;&#32;}
33 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;idx&#32;=&#32;states.size()-1;
34 &#32;&#32;ret.resize(states[0].size());
35 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=0;&#32;i&#32;&lt;&#32;states[0].size();&#32;i++)&#32;{
36 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;-0.0001&#32;*&#32;states[idx][i]&#32;;
37 &#32;&#32;}
38 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
39 }
40 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
