<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_inhomogenous_transformation_rectangular_8cpp">
    <title>InhomogenousTransformationRectangular.cpp File Reference</title>
    <programlisting>#include &quot;InhomogenousTransformationRectangular.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &quot;../Core/Sector.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/QuadratureFormulaCircle.cpp&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
    <programlisting>#include &quot;SpaceTransformation.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_inhomogenous_transformation_rectangular_8cpp_1aa622d476ed57e4d950a97a4b98889a4a">INHOMOGENOUS_TRANSFORMATION_RECTANGULAR_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/InhomogenousTransformationRectangular.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;INHOMOGENOUS_TRANSFORMATION_RECTANGULAR_CPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;INHOMOGENOUS_TRANSFORMATION_RECTANGULAR_CPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;InhomogenousTransformationRectangular.h&quot;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;../Core/Sector.h&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/QuadratureFormulaCircle.cpp&quot;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;SpaceTransformation.h&quot;</emphasis>
12 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
13 
14 InhomogenousTransformationRectangular::InhomogenousTransformationRectangular(
15 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_rank)
16 &#32;&#32;&#32;&#32;:&#32;<link linkend="class_space_transformation">SpaceTransformation</link>(3,&#32;in_rank),
17 &#32;&#32;&#32;&#32;&#32;&#32;XMinus(-(GlobalParams.M_R_XLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_XMinus)),
18 &#32;&#32;&#32;&#32;&#32;&#32;XPlus(GlobalParams.M_R_XLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_XPlus),
19 &#32;&#32;&#32;&#32;&#32;&#32;YMinus(-(GlobalParams.M_R_YLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_YMinus)),
20 &#32;&#32;&#32;&#32;&#32;&#32;YPlus(GlobalParams.M_R_YLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_YPlus),
21 &#32;&#32;&#32;&#32;&#32;&#32;ZMinus(-GlobalParams.M_R_ZLength&#32;*&#32;0.5),
22 &#32;&#32;&#32;&#32;&#32;&#32;ZPlus(GlobalParams.M_R_ZLength&#32;*&#32;0.5),
23 &#32;&#32;&#32;&#32;&#32;&#32;epsilon_K(GlobalParams.M_W_epsilonin),
24 &#32;&#32;&#32;&#32;&#32;&#32;epsilon_M(GlobalParams.M_W_epsilonout),
25 &#32;&#32;&#32;&#32;&#32;&#32;sectors(GlobalParams.M_W_Sectors),
26 &#32;&#32;&#32;&#32;&#32;&#32;deltaY(GlobalParams.M_W_Delta)&#32;{
27 &#32;&#32;homogenized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
28 }
29 
30 InhomogenousTransformationRectangular::
31 &#32;&#32;&#32;&#32;~InhomogenousTransformationRectangular()&#32;{}
32 
33 Point&lt;3&gt;&#32;InhomogenousTransformationRectangular::math_to_phys(
34 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;coord)<emphasis class="keyword">&#32;const&#32;</emphasis>{
35 &#32;&#32;Point&lt;3&gt;&#32;ret;
36 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sec&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(coord[2]);
37 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sec.first].get_m(sec.second);
38 &#32;&#32;ret[0]&#32;=&#32;coord[0];
39 &#32;&#32;ret[1]&#32;=&#32;coord[1]&#32;+&#32;m;
40 &#32;&#32;ret[2]&#32;=&#32;coord[2];
41 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
42 }
43 
44 Point&lt;3&gt;&#32;InhomogenousTransformationRectangular::phys_to_math(
45 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;coord)<emphasis class="keyword">&#32;const&#32;</emphasis>{
46 &#32;&#32;Point&lt;3&gt;&#32;ret;
47 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sec&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(coord[2]);
48 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sec.first].get_m(sec.second);
49 &#32;&#32;ret[0]&#32;=&#32;coord[0];
50 &#32;&#32;ret[1]&#32;=&#32;coord[1]&#32;-&#32;m;
51 &#32;&#32;ret[2]&#32;=&#32;coord[2];
52 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
53 }
54 
<link linkend="class_inhomogenous_transformation_rectangular_1a6cb643e640c943a28bfc9b43c23d41de">55 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a6cb643e640c943a28bfc9b43c23d41de">InhomogenousTransformationRectangular::PML_in_X</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
56 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(0)&#32;&lt;&#32;XMinus&#32;||&#32;p(0)&#32;&gt;&#32;XPlus;
57 }
58 
<link linkend="class_inhomogenous_transformation_rectangular_1abc2972d217a900bcb9abdf8db6cefd3a">59 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1abc2972d217a900bcb9abdf8db6cefd3a">InhomogenousTransformationRectangular::PML_in_Y</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
60 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(1)&#32;&lt;&#32;YMinus&#32;||&#32;p(1)&#32;&gt;&#32;YPlus;
61 }
62 
<link linkend="class_inhomogenous_transformation_rectangular_1a5298100533de731ceb7889cc25cb54ee">63 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a5298100533de731ceb7889cc25cb54ee">InhomogenousTransformationRectangular::PML_in_Z</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
64 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;&lt;&#32;ZMinus&#32;||&#32;p(2)&#32;&gt;&#32;ZPlus;
65 }
66 
<link linkend="class_inhomogenous_transformation_rectangular_1a1561364a5dda687f5ab1f987828fd928">67 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a1561364a5dda687f5ab1f987828fd928">InhomogenousTransformationRectangular::Preconditioner_PML_Z_Distance</link>(
68 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;rank)<emphasis class="keyword">&#32;const&#32;</emphasis>{
69 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;-&#32;GlobalParams.Minimum_Z&#32;-
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((double)rank)&#32;*&#32;GlobalParams.LayerThickness;
71 }
72 
<link linkend="class_inhomogenous_transformation_rectangular_1aae6d8b1612f012f07a750655470f9651">73 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aae6d8b1612f012f07a750655470f9651">InhomogenousTransformationRectangular::PML_X_Distance</link>(
74 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
75 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p(0)&#32;&gt;&#32;0)&#32;{
76 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(0)&#32;-&#32;XPlus;
77 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
78 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-p(0)&#32;+&#32;XMinus;
79 &#32;&#32;}
80 }
81 
<link linkend="class_inhomogenous_transformation_rectangular_1a2f730276696ed21ae025b38d7f145334">82 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a2f730276696ed21ae025b38d7f145334">InhomogenousTransformationRectangular::PML_Y_Distance</link>(
83 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
84 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p(1)&#32;&gt;&#32;0)&#32;{
85 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(1)&#32;-&#32;YMinus;
86 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
87 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-p(1)&#32;+&#32;YPlus;
88 &#32;&#32;}
89 }
90 
<link linkend="class_inhomogenous_transformation_rectangular_1abc77e051b32e0846310fe324a97889e6">91 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1abc77e051b32e0846310fe324a97889e6">InhomogenousTransformationRectangular::PML_Z_Distance</link>(
92 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
93 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p(2)&#32;&lt;&#32;0)&#32;{
94 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-(p(2)&#32;+&#32;(GlobalParams.M_R_ZLength&#32;/&#32;2.0));
95 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
96 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;-&#32;(GlobalParams.M_R_ZLength&#32;/&#32;2.0);
97 &#32;&#32;}
98 }
99 
100 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
101 InhomogenousTransformationRectangular::get_Tensor(Point&lt;3&gt;&#32;&amp;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
102 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transform&#32;=&#32;get_Space_Transformation_Tensor(position);
103 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Apply_PML_To_Tensor(position,&#32;transform);
104 }
105 
106 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
107 InhomogenousTransformationRectangular::get_Preconditioner_Tensor(
108 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
109 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transform&#32;=&#32;get_Space_Transformation_Tensor(position);
110 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Apply_PML_To_Tensor_For_Preconditioner(position,&#32;transform,&#32;block);
111 }
112 
113 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
114 InhomogenousTransformationRectangular::Apply_PML_To_Tensor(
115 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation)<emphasis class="keyword">&#32;const&#32;</emphasis>{
116 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;MaterialTensor;
117 
118 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
119 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;MaterialTensor[i][j]&#32;=
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation[i][j]&#32;*&#32;std::complex&lt;double&gt;(1.0,&#32;0.0);
122 &#32;&#32;&#32;&#32;}
123 &#32;&#32;}
124 
125 &#32;&#32;std::complex&lt;double&gt;&#32;sx(1.0,&#32;0.0),&#32;sy(1.0,&#32;0.0),&#32;sz(1.0,&#32;0.0);
126 
127 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a9cd5164ad5e81222d84ccae959e09ed9">PML_in_X</link>(position))&#32;{
128 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d;
129 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a95ca00c40d36fafd09c941ce338a5f06">PML_X_Distance</link>(position);
130 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[0]&#32;&lt;&#32;0)&#32;{
131 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XMinus;
132 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XPlus;
134 &#32;&#32;&#32;&#32;}
135 &#32;&#32;&#32;&#32;sx.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaXMax);
137 &#32;&#32;&#32;&#32;sx.imag(pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaXMax);
139 &#32;&#32;}
140 
141 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a37c2ebdba9a6bfb45410c4c525328e84">PML_in_Y</link>(position))&#32;{
142 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d;
143 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1aca704212b3f0ab894d7aa43706dba5ba">PML_Y_Distance</link>(position);
144 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[1]&#32;&lt;&#32;0)&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YMinus;
146 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YPlus;
148 &#32;&#32;&#32;&#32;}
149 
150 &#32;&#32;&#32;&#32;sy.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaYMax);
152 &#32;&#32;&#32;&#32;sy.imag(pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaYMax);
154 &#32;&#32;}
155 
156 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a9876ac78c5c2ec3524ca331cba9466e5">PML_in_Z</link>(position))&#32;{
157 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d;
158 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1abf499ff100ae388c4b819f0db3717e9f">PML_Z_Distance</link>(position);
159 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[1]&#32;&lt;&#32;0)&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zminus;
161 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zplus;
163 &#32;&#32;&#32;&#32;}
164 &#32;&#32;&#32;&#32;sz.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaZMax);
166 &#32;&#32;&#32;&#32;sz.imag(pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax);
168 &#32;&#32;}
169 
170 &#32;&#32;MaterialTensor[0][0]&#32;*=&#32;sy&#32;*&#32;sz&#32;/&#32;sx;
171 &#32;&#32;MaterialTensor[0][1]&#32;*=&#32;sz;
172 &#32;&#32;MaterialTensor[0][2]&#32;*=&#32;sy;
173 
174 &#32;&#32;MaterialTensor[1][0]&#32;*=&#32;sz;
175 &#32;&#32;MaterialTensor[1][1]&#32;*=&#32;sx&#32;*&#32;sz&#32;/&#32;sy;
176 &#32;&#32;MaterialTensor[1][2]&#32;*=&#32;sx;
177 
178 &#32;&#32;MaterialTensor[2][0]&#32;*=&#32;sy;
179 &#32;&#32;MaterialTensor[2][1]&#32;*=&#32;sx;
180 &#32;&#32;MaterialTensor[2][2]&#32;*=&#32;sx&#32;*&#32;sy&#32;/&#32;sz;
181 
182 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;MaterialTensor;
183 }
184 
185 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
186 InhomogenousTransformationRectangular::Apply_PML_To_Tensor_For_Preconditioner(
187 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
188 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;MaterialTensor;
189 
190 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
191 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;MaterialTensor[i][j]&#32;=
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation[i][j]&#32;*&#32;std::complex&lt;double&gt;(1.0,&#32;0.0);
194 &#32;&#32;&#32;&#32;}
195 &#32;&#32;}
196 
197 &#32;&#32;std::complex&lt;double&gt;&#32;sx(1.0,&#32;0.0),&#32;sy(1.0,&#32;0.0),&#32;sz(1.0,&#32;0.0),&#32;sz_p(0.0,&#32;0.0);
198 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a9cd5164ad5e81222d84ccae959e09ed9">PML_in_X</link>(position))&#32;{
199 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d;
200 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a95ca00c40d36fafd09c941ce338a5f06">PML_X_Distance</link>(position);
201 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[0]&#32;&lt;&#32;0)&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XMinus;
203 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XPlus;
205 &#32;&#32;&#32;&#32;}
206 &#32;&#32;&#32;&#32;sx.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaXMax);
208 &#32;&#32;&#32;&#32;sx.imag(pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaXMax);
210 &#32;&#32;}
211 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a37c2ebdba9a6bfb45410c4c525328e84">PML_in_Y</link>(position))&#32;{
212 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d;
213 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1aca704212b3f0ab894d7aa43706dba5ba">PML_Y_Distance</link>(position);
214 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[1]&#32;&lt;&#32;0)&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YMinus;
216 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YPlus;
218 &#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;&#32;&#32;sy.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaYMax);
222 &#32;&#32;&#32;&#32;sy.imag(pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaYMax);
224 &#32;&#32;}
225 
226 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1aba258d6b34408aaf252fed22497f54f8">Preconditioner_PML_Z_Distance</link>(position,&#32;rank)&#32;&gt;&#32;0)&#32;{
227 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r_temp&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1aba258d6b34408aaf252fed22497f54f8">Preconditioner_PML_Z_Distance</link>(position,&#32;rank);
228 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;d_temp&#32;=&#32;GlobalParams.LayerThickness;
229 
230 &#32;&#32;&#32;&#32;sz.real(1&#32;+&#32;pow(r_temp&#32;/&#32;d_temp,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaZMax);
232 &#32;&#32;&#32;&#32;sz.imag(pow(r_temp&#32;/&#32;d_temp,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax);
234 &#32;&#32;}
235 
236 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a9876ac78c5c2ec3524ca331cba9466e5">PML_in_Z</link>(position))&#32;{
237 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d;
238 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1abf499ff100ae388c4b819f0db3717e9f">PML_Z_Distance</link>(position);
239 &#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zplus;
240 &#32;&#32;&#32;&#32;sz.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaZMax);
242 &#32;&#32;&#32;&#32;sz.imag(pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax);
244 &#32;&#32;}
245 
246 &#32;&#32;MaterialTensor[0][0]&#32;*=&#32;sy&#32;*&#32;sz&#32;/&#32;sx;
247 &#32;&#32;MaterialTensor[0][1]&#32;*=&#32;sz;
248 &#32;&#32;MaterialTensor[0][2]&#32;*=&#32;sy;
249 
250 &#32;&#32;MaterialTensor[1][0]&#32;*=&#32;sz;
251 &#32;&#32;MaterialTensor[1][1]&#32;*=&#32;sx&#32;*&#32;sz&#32;/&#32;sy;
252 &#32;&#32;MaterialTensor[1][2]&#32;*=&#32;sx;
253 
254 &#32;&#32;MaterialTensor[2][0]&#32;*=&#32;sy;
255 &#32;&#32;MaterialTensor[2][1]&#32;*=&#32;sx;
256 &#32;&#32;MaterialTensor[2][2]&#32;*=&#32;sx&#32;*&#32;sy&#32;/&#32;sz;
257 
258 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;MaterialTensor;
259 }
260 
<link linkend="class_inhomogenous_transformation_rectangular_1aeee00d4fa66b35deead406433368ac1a">261 </link>std::complex&lt;double&gt;&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aeee00d4fa66b35deead406433368ac1a">InhomogenousTransformationRectangular::evaluate_for_z</link>(
262 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_z,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*in_w)&#32;{
263 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out;
264 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;gauss_product_2D_sphere(in_z,&#32;10,&#32;r,&#32;0,&#32;0,&#32;in_w);
265 }
266 
<link linkend="class_inhomogenous_transformation_rectangular_1a9afcf7381a1f09eb07c5ab6e91ebf360">267 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a9afcf7381a1f09eb07c5ab6e91ebf360">InhomogenousTransformationRectangular::get_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;dof)<emphasis class="keyword">&#32;const&#32;</emphasis>{
268 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
269 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;2);
270 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;2];
272 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;2];
274 &#32;&#32;&#32;&#32;}
275 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
276 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;InhomogenousTransformationRectangular::get_dof!&quot;</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
279 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
280 &#32;&#32;}
281 }
282 
<link linkend="class_inhomogenous_transformation_rectangular_1aa160a28a90440c898d393aca94840a1c">283 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aa160a28a90440c898d393aca94840a1c">InhomogenousTransformationRectangular::get_free_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;in_dof)<emphasis class="keyword">&#32;const&#32;</emphasis>{
284 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;=&#32;in_dof&#32;+&#32;2;
285 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;-&#32;2&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
286 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;2);
287 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;2];
289 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;2];
291 &#32;&#32;&#32;&#32;}
292 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
293 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;InhomogenousTransformationRectangular::get_free_dof!&quot;</emphasis>
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
296 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
297 &#32;&#32;}
298 }
299 
<link linkend="class_inhomogenous_transformation_rectangular_1a430a8e171a06b84c6c6c7f9c0505eba6">300 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a430a8e171a06b84c6c6c7f9c0505eba6">InhomogenousTransformationRectangular::set_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_val)&#32;{
301 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
302 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;2);
303 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
304 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;2]&#32;=&#32;in_val;
305 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;0)&#32;{
306 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].dofs_l[dof&#32;%&#32;2]&#32;=&#32;in_val;
307 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
308 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;2]&#32;=&#32;in_val;
309 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;2]&#32;=&#32;in_val;
310 &#32;&#32;&#32;&#32;}
311 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
312 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;InhomogenousTransformationRectangular::set_dof!&quot;</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
315 &#32;&#32;}
316 }
317 
<link linkend="class_inhomogenous_transformation_rectangular_1a7d6faa62a95704da012d55f1319fc7be">318 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a7d6faa62a95704da012d55f1319fc7be">InhomogenousTransformationRectangular::set_free_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;in_dof,
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_val)&#32;{
320 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;=&#32;in_dof&#32;+&#32;2;
321 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;-&#32;2&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
322 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;2);
323 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
324 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;2]&#32;=&#32;in_val;
325 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;0)&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].dofs_l[dof&#32;%&#32;2]&#32;=&#32;in_val;
327 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;2]&#32;=&#32;in_val;
329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;2]&#32;=&#32;in_val;
330 &#32;&#32;&#32;&#32;}
331 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
332 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;InhomogenousTransformationRectangular::set_free_dof!&quot;</emphasis>
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
335 &#32;&#32;}
336 }
337 
<link linkend="class_inhomogenous_transformation_rectangular_1ad710784eedb69216061abb2c68a3cf27">338 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1ad710784eedb69216061abb2c68a3cf27">InhomogenousTransformationRectangular::Sector_Length</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
339 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;GlobalParams.SectorThickness;
340 }
341 
<link linkend="class_inhomogenous_transformation_rectangular_1a57bfab6df3943d1a551fa2ab8b5b5f98">342 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a57bfab6df3943d1a551fa2ab8b5b5f98">InhomogenousTransformationRectangular::estimate_and_initialize</link>()&#32;{
343 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.M_PC_Use)&#32;{
344 &#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;the_first(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;GlobalParams.sd.z[0],
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.z[1]);
346 &#32;&#32;&#32;&#32;the_first.<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">set_properties_force</link>(GlobalParams.sd.m[0],&#32;GlobalParams.sd.m[1],
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.v[0],&#32;GlobalParams.sd.v[1]);
348 &#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(the_first);
349 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;GlobalParams.sd.Sectors&#32;-&#32;2;&#32;i++)&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;intermediate(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;GlobalParams.sd.z[i],
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.z[i&#32;+&#32;1]);
352 &#32;&#32;&#32;&#32;&#32;&#32;intermediate.<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">set_properties_force</link>(
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.m[i],&#32;GlobalParams.sd.m[i&#32;+&#32;1],&#32;GlobalParams.sd.v[i],
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.v[i&#32;+&#32;1]);
355 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(intermediate);
356 &#32;&#32;&#32;&#32;}
357 &#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;the_last(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">true</emphasis>,
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.z[GlobalParams.sd.Sectors&#32;-&#32;2],
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.z[GlobalParams.sd.Sectors&#32;-&#32;1]);
360 &#32;&#32;&#32;&#32;the_last.<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">set_properties_force</link>(
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.m[GlobalParams.sd.Sectors&#32;-&#32;2],
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.m[GlobalParams.sd.Sectors&#32;-&#32;1],
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.v[GlobalParams.sd.Sectors&#32;-&#32;2],
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.sd.v[GlobalParams.sd.Sectors&#32;-&#32;1]);
365 &#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(the_last);
366 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.size();&#32;i++)&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;From&#32;z:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].z_0
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;(m:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_m(0.0)
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;v:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_v(0.0)&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
370 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;&#32;To&#32;z:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].z_1
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;(m:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_m(1.0)
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;v:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_v(1.0)&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
373 &#32;&#32;&#32;&#32;}
374 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
375 &#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.reserve(<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>);
376 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m_0&#32;=&#32;GlobalParams.M_W_Delta&#32;/&#32;2.0;
377 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m_1&#32;=&#32;-GlobalParams.M_W_Delta&#32;/&#32;2.0;
378 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>&#32;==&#32;1)&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;temp12(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>,&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0,
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_R_ZLength&#32;/&#32;2.0);
381 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(temp12);
382 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].set_properties_force(
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_W_Delta&#32;/&#32;2.0,&#32;-GlobalParams.M_W_Delta&#32;/&#32;2.0,
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_C_Dim1In,&#32;GlobalParams.M_C_Dim1Out,&#32;0,&#32;0);
385 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;length&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a07a16c6e19f6727a5dea930da36b75ad">Sector_Length</link>();
387 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;temp(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;-GlobalParams.M_R_ZLength&#32;/&#32;(2.0),
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;+&#32;length);
389 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(temp);
390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>;&#32;i++)&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;temp2(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;(2.0)&#32;+&#32;length&#32;*&#32;(1.0&#32;*&#32;i),
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;(2.0)&#32;+&#32;length&#32;*&#32;(i&#32;+&#32;1.0));
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(temp2);
395 &#32;&#32;&#32;&#32;&#32;&#32;}
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;length_rel&#32;=&#32;1.0&#32;/&#32;((double)(sectors));
398 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].set_properties_force(
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_0,&#32;InterpolationPolynomialZeroDerivative(length_rel,&#32;m_0,&#32;m_1),&#32;0,
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(length_rel,&#32;m_0,&#32;m_1,&#32;0,&#32;0));
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>;&#32;i++)&#32;{
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z_l&#32;=&#32;i&#32;*&#32;length_rel;
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z_r&#32;=&#32;(i&#32;+&#32;1)&#32;*&#32;length_rel;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].set_properties_force(
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_l,&#32;m_0,&#32;m_1),
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_r,&#32;m_0,&#32;m_1),
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(z_l,&#32;m_0,&#32;m_1,&#32;0,&#32;0),
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(z_r,&#32;m_0,&#32;m_1,&#32;0,&#32;0));
409 &#32;&#32;&#32;&#32;&#32;&#32;}
410 &#32;&#32;&#32;&#32;}
411 &#32;&#32;}
412 }
413 
<link linkend="class_inhomogenous_transformation_rectangular_1a2d3550e479f1a2015700ea7619312c64">414 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a2d3550e479f1a2015700ea7619312c64">InhomogenousTransformationRectangular::get_r</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
415 &#32;&#32;<emphasis class="comment">//&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;Z_to_Sector_and_local_z(z_in);</emphasis>
416 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Asking&#32;for&#32;Radius&#32;of&#32;rectangular&#32;Waveguide.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
417 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
418 }
419 
<link linkend="class_inhomogenous_transformation_rectangular_1a2aedc5c4044617415189c769ef444ce2">420 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a2aedc5c4044617415189c769ef444ce2">InhomogenousTransformationRectangular::get_m</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
421 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
422 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].get_m(two.second);
423 }
424 
<link linkend="class_inhomogenous_transformation_rectangular_1aac3e020f5543a1fbdc50a9b1e90485b6">425 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aac3e020f5543a1fbdc50a9b1e90485b6">InhomogenousTransformationRectangular::get_v</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
426 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
427 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].get_v(two.second);
428 }
429 
<link linkend="class_inhomogenous_transformation_rectangular_1acee242562240efec2caba6dfbef3f751">430 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1acee242562240efec2caba6dfbef3f751">InhomogenousTransformationRectangular::get_Q1</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
431 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
432 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].getQ1(two.second);
433 }
434 
<link linkend="class_inhomogenous_transformation_rectangular_1a6a862fd0e48df918ed615032adc251af">435 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a6a862fd0e48df918ed615032adc251af">InhomogenousTransformationRectangular::get_Q2</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
436 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
437 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].getQ2(two.second);
438 }
439 
<link linkend="class_inhomogenous_transformation_rectangular_1ac7642401fd8d72b7a0f88314437f395c">440 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1ac7642401fd8d72b7a0f88314437f395c">InhomogenousTransformationRectangular::get_Q3</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
441 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
442 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].getQ3(two.second);
443 }
444 
<link linkend="class_inhomogenous_transformation_rectangular_1a6f7772c13ef16ffca0bd4f02cbd5bbe6">445 </link>Vector&lt;double&gt;&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a6f7772c13ef16ffca0bd4f02cbd5bbe6">InhomogenousTransformationRectangular::Dofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
446 &#32;&#32;Vector&lt;double&gt;&#32;ret;
447 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;total&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>();
448 &#32;&#32;ret.reinit(total);
449 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;total;&#32;i++)&#32;{
450 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a47af0c99415a86b9d14f85560b8c37d1">get_dof</link>(i);
451 &#32;&#32;}
452 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
453 }
454 
<link linkend="class_inhomogenous_transformation_rectangular_1a98e0f78b4f0dde6957787f9864a1eb4e">455 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a98e0f78b4f0dde6957787f9864a1eb4e">InhomogenousTransformationRectangular::NFreeDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
456 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;-&#32;4;
457 }
458 
<link linkend="class_inhomogenous_transformation_rectangular_1addcdac558877e24a1d1327c44dcdbc4d">459 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1addcdac558877e24a1d1327c44dcdbc4d">InhomogenousTransformationRectangular::IsDofFree</link>(<emphasis class="keywordtype">int</emphasis>&#32;index)<emphasis class="keyword">&#32;const&#32;</emphasis>{
460 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;index&#32;&gt;&#32;1&#32;&amp;&amp;&#32;index&#32;&lt;&#32;(int)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;-&#32;1;
461 }
462 
<link linkend="class_inhomogenous_transformation_rectangular_1ac167cd73546a4ec03615f0e3748fd0c8">463 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1ac167cd73546a4ec03615f0e3748fd0c8">InhomogenousTransformationRectangular::Print</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
464 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Printing&#32;is&#32;not&#32;yet&#32;implemented.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
465 }
466 
<link linkend="class_inhomogenous_transformation_rectangular_1a763065737c653b754373c6550317798e">467 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a763065737c653b754373c6550317798e">InhomogenousTransformationRectangular::NDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
468 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>&#32;*&#32;2&#32;+&#32;2;
469 }
470 
471 Tensor&lt;2,&#32;3,&#32;double&gt;&#32;InhomogenousTransformationRectangular::
472 &#32;&#32;&#32;&#32;get_Space_Transformation_Tensor_Homogenized(Point&lt;3&gt;&#32;&amp;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
473 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sector_z&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(position[2]);
474 
475 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation&#32;=
476 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector_z.first].TransformationTensorInternal(
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position[0],&#32;position[1],&#32;sector_z.second);
478 
479 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;transformation;
480 }
481 
482 Tensor&lt;2,&#32;3,&#32;double&gt;
483 InhomogenousTransformationRectangular::get_Space_Transformation_Tensor(
484 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
485 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sector_z&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(position[2]);
486 
487 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation&#32;=
488 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector_z.first].TransformationTensorInternal(
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position[0],&#32;position[1],&#32;sector_z.second);
490 
491 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;transformation;
492 }
493 
494 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
