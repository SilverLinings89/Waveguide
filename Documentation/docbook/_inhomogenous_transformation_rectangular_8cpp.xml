<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_inhomogenous_transformation_rectangular_8cpp">
    <title>InhomogenousTransformationRectangular.cpp File Reference</title>
    <programlisting>#include &quot;InhomogenousTransformationRectangular.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &quot;SpaceTransformation.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/QuadratureFormulaCircle.cpp&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
    <programlisting>#include &quot;../Core/Sector.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_inhomogenous_transformation_rectangular_8cpp_1aa622d476ed57e4d950a97a4b98889a4a">INHOMOGENOUS_TRANSFORMATION_RECTANGULAR_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/InhomogenousTransformationRectangular.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;INHOMOGENOUS_TRANSFORMATION_RECTANGULAR_CPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;INHOMOGENOUS_TRANSFORMATION_RECTANGULAR_CPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;InhomogenousTransformationRectangular.h&quot;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;SpaceTransformation.h&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/QuadratureFormulaCircle.cpp&quot;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;../Core/Sector.h&quot;</emphasis>
12 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
13 
14 InhomogenousTransformationRectangular::InhomogenousTransformationRectangular&#32;(<emphasis class="keywordtype">int</emphasis>&#32;in_rank):
15 &#32;&#32;&#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>(3,&#32;in_rank),
16 &#32;&#32;XMinus(&#32;-(GlobalParams.M_R_XLength&#32;*0.5&#32;-&#32;GlobalParams.M_BC_XMinus)),
17 &#32;&#32;XPlus(&#32;GlobalParams.M_R_XLength&#32;*0.5&#32;-&#32;GlobalParams.M_BC_XPlus),
18 &#32;&#32;YMinus(&#32;-(GlobalParams.M_R_YLength&#32;*0.5&#32;-&#32;GlobalParams.M_BC_YMinus)),
19 &#32;&#32;YPlus(&#32;GlobalParams.M_R_YLength&#32;*0.5&#32;-&#32;GlobalParams.M_BC_YPlus),
20 &#32;&#32;ZMinus(&#32;-&#32;GlobalParams.M_R_ZLength&#32;*0.5&#32;),
21 &#32;&#32;ZPlus(&#32;GlobalParams.M_R_ZLength&#32;*0.5&#32;),
22 &#32;&#32;epsilon_K(GlobalParams.M_W_epsilonin),
23 &#32;&#32;epsilon_M(GlobalParams.M_W_epsilonout),
24 &#32;&#32;sectors(GlobalParams.M_W_Sectors),
25 &#32;&#32;deltaY(GlobalParams.M_W_Delta)
26 {
27 &#32;&#32;homogenized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
28 }
29 
30 InhomogenousTransformationRectangular::~InhomogenousTransformationRectangular()&#32;{
31 
32 }
33 
34 Point&lt;3&gt;&#32;InhomogenousTransformationRectangular::math_to_phys(Point&lt;3&gt;&#32;coord)<emphasis class="keyword">&#32;const&#32;</emphasis>{
35 &#32;&#32;Point&lt;3&gt;&#32;ret;
36 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sec&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(coord[2]);
37 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sec.first].get_m(sec.second);
38 &#32;&#32;ret[0]&#32;=&#32;coord[0]&#32;;
39 &#32;&#32;ret[1]&#32;=&#32;coord[1]&#32;+&#32;m;
40 &#32;&#32;ret[2]&#32;=&#32;coord[2];
41 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
42 }
43 
44 Point&lt;3&gt;&#32;InhomogenousTransformationRectangular::phys_to_math(Point&lt;3&gt;&#32;coord)<emphasis class="keyword">&#32;const&#32;</emphasis>{
45 &#32;&#32;Point&lt;3&gt;&#32;ret;
46 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sec&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(coord[2]);
47 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sec.first].get_m(sec.second);
48 &#32;&#32;ret[0]&#32;=&#32;coord[0]&#32;;
49 &#32;&#32;ret[1]&#32;=&#32;coord[1]&#32;-&#32;m;
50 &#32;&#32;ret[2]&#32;=&#32;coord[2];
51 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
52 }
53 
<link linkend="class_inhomogenous_transformation_rectangular_1a6cb643e640c943a28bfc9b43c23d41de">54 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a6cb643e640c943a28bfc9b43c23d41de">InhomogenousTransformationRectangular::PML_in_X</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
55 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(0)&#32;&lt;&#32;XMinus&#32;||p(0)&#32;&gt;&#32;XPlus;
56 }
57 
<link linkend="class_inhomogenous_transformation_rectangular_1abc2972d217a900bcb9abdf8db6cefd3a">58 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1abc2972d217a900bcb9abdf8db6cefd3a">InhomogenousTransformationRectangular::PML_in_Y</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
59 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(1)&#32;&lt;&#32;YMinus&#32;||p(1)&#32;&gt;&#32;YPlus;
60 }
61 
<link linkend="class_inhomogenous_transformation_rectangular_1a5298100533de731ceb7889cc25cb54ee">62 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a5298100533de731ceb7889cc25cb54ee">InhomogenousTransformationRectangular::PML_in_Z</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
63 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;&lt;&#32;ZMinus&#32;||p(2)&#32;&gt;&#32;ZPlus;
64 }
65 
<link linkend="class_inhomogenous_transformation_rectangular_1a1561364a5dda687f5ab1f987828fd928">66 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a1561364a5dda687f5ab1f987828fd928">InhomogenousTransformationRectangular::Preconditioner_PML_Z_Distance</link>(Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;rank&#32;)<emphasis class="keyword">&#32;const</emphasis>{
67 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;-&#32;GlobalParams.Minimum_Z&#32;-&#32;((double)rank)*GlobalParams.LayerThickness;
68 }
69 
<link linkend="class_inhomogenous_transformation_rectangular_1aae6d8b1612f012f07a750655470f9651">70 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aae6d8b1612f012f07a750655470f9651">InhomogenousTransformationRectangular::PML_X_Distance</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const</emphasis>{
71 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(p(0)&#32;&gt;0){
72 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(0)&#32;-&#32;XPlus&#32;;
73 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
74 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-p(0)&#32;+&#32;XMinus;
75 &#32;&#32;}
76 }
77 
<link linkend="class_inhomogenous_transformation_rectangular_1a2f730276696ed21ae025b38d7f145334">78 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a2f730276696ed21ae025b38d7f145334">InhomogenousTransformationRectangular::PML_Y_Distance</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const</emphasis>{
79 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(p(1)&#32;&gt;0){
80 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(1)&#32;-&#32;YMinus;
81 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
82 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-p(1)&#32;+&#32;YPlus;
83 &#32;&#32;}
84 }
85 
<link linkend="class_inhomogenous_transformation_rectangular_1abc77e051b32e0846310fe324a97889e6">86 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1abc77e051b32e0846310fe324a97889e6">InhomogenousTransformationRectangular::PML_Z_Distance</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const</emphasis>{
87 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(p(2)&#32;&lt;&#32;0)&#32;{
88 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-(p(2)&#32;+&#32;(GlobalParams.M_R_ZLength&#32;/&#32;2.0));
89 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
90 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;-&#32;(GlobalParams.M_R_ZLength&#32;/&#32;2.0);
91 &#32;&#32;}
92 }
93 
94 Tensor&lt;2,3,std::complex&lt;double&gt;&gt;&#32;InhomogenousTransformationRectangular::get_Tensor(Point&lt;3&gt;&#32;&amp;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
95 &#32;&#32;Tensor&lt;2,3,double&gt;&#32;transform&#32;=&#32;get_Space_Transformation_Tensor(position);
96 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Apply_PML_To_Tensor(position,&#32;transform);
97 }
98 
99 Tensor&lt;2,3,std::complex&lt;double&gt;&gt;&#32;InhomogenousTransformationRectangular::get_Preconditioner_Tensor(Point&lt;3&gt;&#32;&amp;&#32;position,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
100 &#32;&#32;Tensor&lt;2,3,double&gt;&#32;transform&#32;=&#32;get_Space_Transformation_Tensor(position);
101 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Apply_PML_To_Tensor_For_Preconditioner(position,&#32;transform,&#32;block);
102 }
103 
104 Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;InhomogenousTransformationRectangular::Apply_PML_To_Tensor(Point&lt;3&gt;&#32;&amp;&#32;position,&#32;Tensor&lt;2,3,double&gt;&#32;transformation)<emphasis class="keyword">&#32;const&#32;</emphasis>{
105 &#32;&#32;&#32;&#32;Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;MaterialTensor;
106 
107 &#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
108 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;MaterialTensor[i][j]&#32;=&#32;transformation[i][j]*&#32;std::complex&lt;double&gt;(1.0,&#32;0.0);
110 &#32;&#32;&#32;&#32;}
111 &#32;&#32;}
112 
113 &#32;&#32;std::complex&lt;double&gt;&#32;sx(1.0,&#32;0.0),sy(1.0,0.0),&#32;sz(1.0,0.0);
114 
115 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a9cd5164ad5e81222d84ccae959e09ed9">PML_in_X</link>(position)){
116 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,d;
117 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a95ca00c40d36fafd09c941ce338a5f06">PML_X_Distance</link>(position);
118 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(position[0]&#32;&lt;&#32;0){
119 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XMinus;
120 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XPlus;
122 &#32;&#32;&#32;&#32;}
123 &#32;&#32;&#32;&#32;sx.real(&#32;1&#32;+&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaXMax&#32;);
124 &#32;&#32;&#32;&#32;sx.imag(&#32;pow(r/d,&#32;GlobalParams.M_BC_DampeningExponent)*GlobalParams.M_BC_SigmaXMax&#32;);
125 &#32;&#32;}
126 
127 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a37c2ebdba9a6bfb45410c4c525328e84">PML_in_Y</link>(position)){
128 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,d;
129 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1aca704212b3f0ab894d7aa43706dba5ba">PML_Y_Distance</link>(position);
130 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(position[1]&#32;&lt;&#32;0){
131 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YMinus;
132 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YPlus;
134 &#32;&#32;&#32;&#32;}
135 
136 &#32;&#32;&#32;&#32;sy.real(&#32;1&#32;+&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaYMax&#32;);
137 &#32;&#32;&#32;&#32;sy.imag(&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_SigmaYMax);
138 &#32;&#32;}
139 
140 
141 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a9876ac78c5c2ec3524ca331cba9466e5">PML_in_Z</link>(position)){
142 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,d;
143 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1abf499ff100ae388c4b819f0db3717e9f">PML_Z_Distance</link>(position);
144 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(position[1]&#32;&lt;&#32;0){
145 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zminus;
146 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zplus;
148 &#32;&#32;&#32;&#32;}
149 &#32;&#32;&#32;&#32;sz.real(&#32;1&#32;+&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaZMax&#32;);
150 &#32;&#32;&#32;&#32;sz.imag(&#32;pow(r/d&#32;,GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_SigmaZMax&#32;);
151 &#32;&#32;}
152 
153 &#32;&#32;MaterialTensor[0][0]&#32;*=&#32;sy*sz/sx;
154 &#32;&#32;MaterialTensor[0][1]&#32;*=&#32;sz;
155 &#32;&#32;MaterialTensor[0][2]&#32;*=&#32;sy;
156 
157 &#32;&#32;MaterialTensor[1][0]&#32;*=&#32;sz;
158 &#32;&#32;MaterialTensor[1][1]&#32;*=&#32;sx*sz/sy;
159 &#32;&#32;MaterialTensor[1][2]&#32;*=&#32;sx;
160 
161 &#32;&#32;MaterialTensor[2][0]&#32;*=&#32;sy;
162 &#32;&#32;MaterialTensor[2][1]&#32;*=&#32;sx;
163 &#32;&#32;MaterialTensor[2][2]&#32;*=&#32;sx*sy/sz;
164 
165 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;MaterialTensor;
166 }
167 
168 Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;InhomogenousTransformationRectangular::Apply_PML_To_Tensor_For_Preconditioner(Point&lt;3&gt;&#32;&amp;&#32;position,&#32;Tensor&lt;2,3,double&gt;&#32;transformation,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
169 &#32;&#32;&#32;&#32;Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;MaterialTensor;
170 
171 &#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
172 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;MaterialTensor[i][j]&#32;=&#32;transformation[i][j]*&#32;std::complex&lt;double&gt;(1.0,&#32;0.0);
174 &#32;&#32;&#32;&#32;}
175 &#32;&#32;}
176 
177 &#32;&#32;std::complex&lt;double&gt;&#32;sx(1.0,&#32;0.0),sy(1.0,0.0),&#32;sz(1.0,0.0),sz_p(0.0,0.0);
178 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a9cd5164ad5e81222d84ccae959e09ed9">PML_in_X</link>(position)){
179 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,d;
180 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a95ca00c40d36fafd09c941ce338a5f06">PML_X_Distance</link>(position);
181 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(position[0]&#32;&lt;&#32;0){
182 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XMinus;
183 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XPlus;
185 &#32;&#32;&#32;&#32;}
186 &#32;&#32;&#32;&#32;sx.real(&#32;1&#32;+&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaXMax&#32;);
187 &#32;&#32;&#32;&#32;sx.imag(&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_SigmaXMax&#32;);
188 &#32;&#32;}
189 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a37c2ebdba9a6bfb45410c4c525328e84">PML_in_Y</link>(position)){
190 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,d;
191 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1aca704212b3f0ab894d7aa43706dba5ba">PML_Y_Distance</link>(position);
192 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(position[1]&#32;&lt;&#32;0){
193 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YMinus;
194 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YPlus;
196 &#32;&#32;&#32;&#32;}
197 
198 &#32;&#32;&#32;&#32;sy.real(&#32;1&#32;+&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaYMax&#32;);
199 &#32;&#32;&#32;&#32;sy.imag(&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_SigmaYMax);
200 &#32;&#32;}
201 
202 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1aba258d6b34408aaf252fed22497f54f8">Preconditioner_PML_Z_Distance</link>(position,&#32;rank)&#32;&gt;&#32;0){
203 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r_temp&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1aba258d6b34408aaf252fed22497f54f8">Preconditioner_PML_Z_Distance</link>(position,&#32;rank);
204 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;d_temp&#32;=&#32;GlobalParams.LayerThickness;
205 
206 &#32;&#32;&#32;&#32;sz.real(&#32;1&#32;+&#32;pow(r_temp/d_temp&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaZMax&#32;);
207 &#32;&#32;&#32;&#32;sz.imag(&#32;pow(r_temp/d_temp&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_SigmaZMax);
208 &#32;&#32;}
209 
210 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a9876ac78c5c2ec3524ca331cba9466e5">PML_in_Z</link>(position)){
211 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,d;
212 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1abf499ff100ae388c4b819f0db3717e9f">PML_Z_Distance</link>(position);
213 &#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zplus;
214 &#32;&#32;&#32;&#32;sz.real(&#32;1&#32;+&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_KappaZMax&#32;);
215 &#32;&#32;&#32;&#32;sz.imag(&#32;pow(r/d&#32;,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*&#32;GlobalParams.M_BC_SigmaZMax&#32;);
216 &#32;&#32;}
217 
218 &#32;&#32;MaterialTensor[0][0]&#32;*=&#32;sy*sz/sx;
219 &#32;&#32;MaterialTensor[0][1]&#32;*=&#32;sz;
220 &#32;&#32;MaterialTensor[0][2]&#32;*=&#32;sy;
221 
222 &#32;&#32;MaterialTensor[1][0]&#32;*=&#32;sz;
223 &#32;&#32;MaterialTensor[1][1]&#32;*=&#32;sx*sz/sy;
224 &#32;&#32;MaterialTensor[1][2]&#32;*=&#32;sx;
225 
226 &#32;&#32;MaterialTensor[2][0]&#32;*=&#32;sy;
227 &#32;&#32;MaterialTensor[2][1]&#32;*=&#32;sx;
228 &#32;&#32;MaterialTensor[2][2]&#32;*=&#32;sx*sy/sz;
229 
230 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;MaterialTensor;
231 }
232 
<link linkend="class_inhomogenous_transformation_rectangular_1aeee00d4fa66b35deead406433368ac1a">233 </link>std::complex&lt;double&gt;&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aeee00d4fa66b35deead406433368ac1a">InhomogenousTransformationRectangular::evaluate_for_z</link>(<emphasis class="keywordtype">double</emphasis>&#32;in_z,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*&#32;in_w)&#32;{
234 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out;
235 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;gauss_product_2D_sphere(in_z,10,r,0,0,&#32;in_w);
236 }
237 
<link linkend="class_inhomogenous_transformation_rectangular_1a9afcf7381a1f09eb07c5ab6e91ebf360">238 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a9afcf7381a1f09eb07c5ab6e91ebf360">InhomogenousTransformationRectangular::get_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;dof)<emphasis class="keyword">&#32;const&#32;</emphasis>{
239 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
240 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof/2);
241 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector-1].dofs_r[dof%2];
243 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof%2];
245 &#32;&#32;&#32;&#32;}
246 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
247 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;InhomogenousTransformationRectangular::get_dof!&quot;</emphasis>&#32;&lt;&lt;std::endl;
248 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
249 &#32;&#32;}
250 }
251 
<link linkend="class_inhomogenous_transformation_rectangular_1aa160a28a90440c898d393aca94840a1c">252 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aa160a28a90440c898d393aca94840a1c">InhomogenousTransformationRectangular::get_free_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;in_dof)<emphasis class="keyword">&#32;const&#32;</emphasis>{
253 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;=&#32;in_dof&#32;+&#32;2&#32;;
254 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()-2&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
255 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof/2);
256 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector-1].dofs_r[dof%2];
258 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof%2];
260 &#32;&#32;&#32;&#32;}
261 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
262 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;InhomogenousTransformationRectangular::get_free_dof!&quot;</emphasis>&#32;&lt;&lt;std::endl;
263 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
264 &#32;&#32;}
265 }
266 
<link linkend="class_inhomogenous_transformation_rectangular_1a430a8e171a06b84c6c6c7f9c0505eba6">267 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a430a8e171a06b84c6c6c7f9c0505eba6">InhomogenousTransformationRectangular::set_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_val)&#32;{
268 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
269 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof/2);
270 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector-1].dofs_r[dof%2]&#32;=&#32;in_val;
272 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;0)&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].dofs_l[dof%2]&#32;=&#32;in_val;
274 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof%2]&#32;=&#32;in_val;
276 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector-1].dofs_r[dof%2]&#32;=&#32;in_val;
277 &#32;&#32;&#32;&#32;}
278 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
279 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;InhomogenousTransformationRectangular::set_dof!&quot;</emphasis>&#32;&lt;&lt;std::endl;
280 &#32;&#32;}
281 }
282 
<link linkend="class_inhomogenous_transformation_rectangular_1a7d6faa62a95704da012d55f1319fc7be">283 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a7d6faa62a95704da012d55f1319fc7be">InhomogenousTransformationRectangular::set_free_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;in_dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_val)&#32;{
284 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;=&#32;in_dof&#32;+&#32;2;
285 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;-2&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
286 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof/2);
287 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(sector&#32;==&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>)&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector-1].dofs_r[dof%2]&#32;=&#32;in_val;
289 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;0)&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].dofs_l[dof%2]&#32;=&#32;in_val;
291 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector].dofs_l[dof%2]&#32;=&#32;in_val;
293 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector-1].dofs_r[dof%2]&#32;=&#32;in_val;
294 &#32;&#32;&#32;&#32;}
295 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
296 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;InhomogenousTransformationRectangular::set_free_dof!&quot;</emphasis>&#32;&lt;&lt;std::endl;
297 &#32;&#32;}
298 }
299 
<link linkend="class_inhomogenous_transformation_rectangular_1ad710784eedb69216061abb2c68a3cf27">300 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1ad710784eedb69216061abb2c68a3cf27">InhomogenousTransformationRectangular::Sector_Length</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
301 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;GlobalParams.SectorThickness;
302 }
303 
<link linkend="class_inhomogenous_transformation_rectangular_1a57bfab6df3943d1a551fa2ab8b5b5f98">304 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a57bfab6df3943d1a551fa2ab8b5b5f98">InhomogenousTransformationRectangular::estimate_and_initialize</link>()&#32;{
305 &#32;&#32;<emphasis class="keywordflow">if</emphasis>(GlobalParams.M_PC_Use)&#32;{
306 &#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;the_first(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;GlobalParams.sd.z[0],&#32;GlobalParams.sd.z[1]);
307 &#32;&#32;&#32;&#32;the_first.<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">set_properties_force</link>(GlobalParams.sd.m[0],GlobalParams.sd.m[1],GlobalParams.sd.v[0],GlobalParams.sd.v[1]);
308 &#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(the_first);
309 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;GlobalParams.sd.Sectors-2;&#32;i++)&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;intermediate(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;GlobalParams.sd.z[i],&#32;GlobalParams.sd.z[i+1]&#32;);
311 &#32;&#32;&#32;&#32;&#32;&#32;intermediate.<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">set_properties_force</link>(GlobalParams.sd.m[i],GlobalParams.sd.m[i+1],GlobalParams.sd.v[i],GlobalParams.sd.v[i+1]);
312 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(intermediate);
313 &#32;&#32;&#32;&#32;}
314 &#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;the_last(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">true</emphasis>,&#32;GlobalParams.sd.z[GlobalParams.sd.Sectors-2],&#32;GlobalParams.sd.z[GlobalParams.sd.Sectors-1]);
315 &#32;&#32;&#32;&#32;the_last.<link linkend="class_sector_1a197c78d119ee872f43c895b02ebb3e8d">set_properties_force</link>(GlobalParams.sd.m[GlobalParams.sd.Sectors-2],GlobalParams.sd.m[GlobalParams.sd.Sectors-1],GlobalParams.sd.v[GlobalParams.sd.Sectors-2],GlobalParams.sd.v[GlobalParams.sd.Sectors-1]);
316 &#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(the_last);
317 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.size();&#32;i++)&#32;{
318 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;From&#32;z:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].z_0&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;(m:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_m(0.0)&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;v:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_v(0.0)&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
319 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;&#32;To&#32;z:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].z_1&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;(m:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_m(1.0)&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;v:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].get_v(1.0)&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;)&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
320 &#32;&#32;&#32;&#32;}
321 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
322 &#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.reserve(<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>);
323 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m_0&#32;=&#32;GlobalParams.M_W_Delta/2.0;
324 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m_1&#32;=&#32;-GlobalParams.M_W_Delta/2.0;
325 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>&#32;==&#32;1)&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;temp12(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>,&#32;-GlobalParams.M_R_ZLength/2.0,&#32;GlobalParams.M_R_ZLength/2.0&#32;);
327 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(temp12);
328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].set_properties_force(GlobalParams.M_W_Delta/2.0,-GlobalParams.M_W_Delta/2.0,&#32;GlobalParams.M_C_Dim1In,&#32;GlobalParams.M_C_Dim1Out,&#32;0,&#32;0);
329 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;length&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a07a16c6e19f6727a5dea930da36b75ad">Sector_Length</link>();
331 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;temp(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;-GlobalParams.M_R_ZLength/(2.0),&#32;-GlobalParams.M_R_ZLength/2.0&#32;+&#32;length&#32;);
332 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(temp);
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>;&#32;i++)&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;2&gt;</link>&#32;temp2(&#32;<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;-GlobalParams.M_R_ZLength/(2.0)&#32;+&#32;length*(1.0&#32;*i),&#32;-GlobalParams.M_R_ZLength/(2.0)&#32;+&#32;length*(i&#32;+&#32;1.0)&#32;);
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>.push_back(temp2);
336 &#32;&#32;&#32;&#32;&#32;&#32;}
337 
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;length_rel&#32;=&#32;1.0/((double)(sectors));
339 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[0].set_properties_force(
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_0,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(length_rel,&#32;m_0,&#32;m_1),
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(length_rel,&#32;m_0,&#32;m_1,&#32;0,&#32;0)
344 &#32;&#32;&#32;&#32;&#32;&#32;);
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>&#32;;&#32;i++)&#32;{
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z_l&#32;=&#32;i*length_rel;
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z_r&#32;=&#32;(i+1)*length_rel;
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[i].set_properties_force(
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_l,&#32;m_0,&#32;m_1),
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_r,&#32;m_0,&#32;m_1),
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(z_l,&#32;m_0,&#32;m_1,&#32;0,&#32;0),
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(z_r,&#32;m_0,&#32;m_1,&#32;0,&#32;0)
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
354 &#32;&#32;&#32;&#32;&#32;&#32;}
355 &#32;&#32;&#32;&#32;}
356 &#32;&#32;}
357 }
358 
<link linkend="class_inhomogenous_transformation_rectangular_1a2d3550e479f1a2015700ea7619312c64">359 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a2d3550e479f1a2015700ea7619312c64">InhomogenousTransformationRectangular::get_r</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
360 &#32;&#32;<emphasis class="comment">//std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;Z_to_Sector_and_local_z(z_in);</emphasis>
361 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Asking&#32;for&#32;Radius&#32;of&#32;rectangular&#32;Waveguide.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
362 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
363 }
364 
<link linkend="class_inhomogenous_transformation_rectangular_1a2aedc5c4044617415189c769ef444ce2">365 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a2aedc5c4044617415189c769ef444ce2">InhomogenousTransformationRectangular::get_m</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
366 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
367 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].get_m(two.second);
368 }
369 
<link linkend="class_inhomogenous_transformation_rectangular_1aac3e020f5543a1fbdc50a9b1e90485b6">370 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1aac3e020f5543a1fbdc50a9b1e90485b6">InhomogenousTransformationRectangular::get_v</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
371 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
372 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].get_v(two.second);
373 }
374 
<link linkend="class_inhomogenous_transformation_rectangular_1acee242562240efec2caba6dfbef3f751">375 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1acee242562240efec2caba6dfbef3f751">InhomogenousTransformationRectangular::get_Q1</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;&#32;const</emphasis>{
376 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
377 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].getQ1(two.second);
378 }
379 
<link linkend="class_inhomogenous_transformation_rectangular_1a6a862fd0e48df918ed615032adc251af">380 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a6a862fd0e48df918ed615032adc251af">InhomogenousTransformationRectangular::get_Q2</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
381 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
382 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].getQ2(two.second);
383 }
384 
<link linkend="class_inhomogenous_transformation_rectangular_1ac7642401fd8d72b7a0f88314437f395c">385 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1ac7642401fd8d72b7a0f88314437f395c">InhomogenousTransformationRectangular::get_Q3</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
386 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
387 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[two.first].getQ3(two.second);
388 }
389 
<link linkend="class_inhomogenous_transformation_rectangular_1a6f7772c13ef16ffca0bd4f02cbd5bbe6">390 </link>Vector&lt;double&gt;&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a6f7772c13ef16ffca0bd4f02cbd5bbe6">InhomogenousTransformationRectangular::Dofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
391 &#32;&#32;Vector&lt;double&gt;&#32;ret;
392 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;total&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>();
393 &#32;&#32;ret.reinit(total);
394 &#32;&#32;<emphasis class="keywordflow">for</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;i=&#32;0;&#32;i&#32;&lt;&#32;total;&#32;i++&#32;){
395 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a47af0c99415a86b9d14f85560b8c37d1">get_dof</link>(i);
396 &#32;&#32;}
397 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
398 }
399 
<link linkend="class_inhomogenous_transformation_rectangular_1a98e0f78b4f0dde6957787f9864a1eb4e">400 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a98e0f78b4f0dde6957787f9864a1eb4e">InhomogenousTransformationRectangular::NFreeDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
401 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()&#32;-&#32;4;
402 }
403 
<link linkend="class_inhomogenous_transformation_rectangular_1addcdac558877e24a1d1327c44dcdbc4d">404 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1addcdac558877e24a1d1327c44dcdbc4d">InhomogenousTransformationRectangular::IsDofFree</link>(<emphasis class="keywordtype">int</emphasis>&#32;index)<emphasis class="keyword">&#32;const&#32;</emphasis>{
405 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;index&#32;&gt;&#32;1&#32;&amp;&amp;&#32;index&#32;&lt;&#32;(int)<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">NDofs</link>()-1;
406 }
407 
<link linkend="class_inhomogenous_transformation_rectangular_1ac167cd73546a4ec03615f0e3748fd0c8">408 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1ac167cd73546a4ec03615f0e3748fd0c8">InhomogenousTransformationRectangular::Print</link>&#32;()<emphasis class="keyword">&#32;const&#32;</emphasis>{
409 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Printing&#32;is&#32;not&#32;yet&#32;implemented.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
410 }
411 
<link linkend="class_inhomogenous_transformation_rectangular_1a763065737c653b754373c6550317798e">412 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_inhomogenous_transformation_rectangular_1a763065737c653b754373c6550317798e">InhomogenousTransformationRectangular::NDofs</link>()<emphasis class="keyword">&#32;&#32;const</emphasis>{
413 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a871387c0fb136ed8b82764d9690117b9">sectors</link>&#32;*&#32;2&#32;+&#32;2;
414 }
415 
416 Tensor&lt;2,3,double&gt;&#32;InhomogenousTransformationRectangular::get_Space_Transformation_Tensor_Homogenized(Point&lt;3&gt;&#32;&amp;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
417 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sector_z&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(position[2]);
418 
419 &#32;&#32;Tensor&lt;2,3,&#32;double&gt;&#32;transformation&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector_z.first].TransformationTensorInternal(position[0],&#32;position[1],&#32;sector_z.second);
420 
421 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;transformation;
422 }
423 
424 Tensor&lt;2,3,double&gt;&#32;InhomogenousTransformationRectangular::get_Space_Transformation_Tensor(Point&lt;3&gt;&#32;&amp;&#32;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
425 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sector_z&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(position[2]);
426 
427 &#32;&#32;Tensor&lt;2,3,&#32;double&gt;&#32;transformation&#32;=&#32;<link linkend="class_inhomogenous_transformation_circular_1a8cf64655d42af9dc8e58fc6a8da1b5d1">case_sectors</link>[sector_z.first].TransformationTensorInternal(position[0],&#32;position[1],&#32;sector_z.second);
428 
429 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;transformation;
430 }
431 
432 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
