<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_round_mesh_generator_8cpp">
    <title>RoundMeshGenerator.cpp File Reference</title>
    <programlisting>#include &quot;RoundMeshGenerator.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/multithread_info.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/std_cxx11/array.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/std_cxx11/bind.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/thread_management.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/tria.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/grid_generator.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/grid_tools.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/manifold_lib.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/tria_accessor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/grid/tria_iterator.h&gt;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_round_mesh_generator_8cpp_1abc07b0432c826b4cbb6cfc38a14de5eb">RoundMeshGeneratorCppFlag</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/MeshGenerators/RoundMeshGenerator.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;RoundMeshGeneratorCppFlag</emphasis>
2 <emphasis class="preprocessor">#define&#32;RoundMeshGeneratorCppFlag</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;RoundMeshGenerator.h&quot;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/multithread_info.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/std_cxx11/array.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/std_cxx11/bind.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/thread_management.h&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/tria.h&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/grid_generator.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/grid_tools.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/manifold_lib.h&gt;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/tria_accessor.h&gt;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&lt;deal.II/grid/tria_iterator.h&gt;</emphasis>
16 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
17 
18 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
19 
20 RoundMeshGenerator::RoundMeshGenerator(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*in_ct)
21 &#32;&#32;&#32;&#32;:&#32;MaxDistX((GlobalParams.M_C_Dim1Out&#32;+&#32;GlobalParams.M_C_Dim1In)&#32;*&#32;1.4&#32;/
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2.0),
23 &#32;&#32;&#32;&#32;&#32;&#32;MaxDistY((GlobalParams.M_C_Dim1Out&#32;+&#32;GlobalParams.M_C_Dim1In)&#32;*&#32;1.4&#32;/
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2.0)&#32;{
25 &#32;&#32;Layers&#32;=&#32;Utilities::MPI::n_mpi_processes(MPI_COMM_WORLD);
26 &#32;&#32;origin&#32;=&#32;Point&lt;3&gt;(-1,&#32;-1,&#32;-1);
27 &#32;&#32;edges[0][0]&#32;=&#32;2;
28 &#32;&#32;edges[0][1]&#32;=&#32;0;
29 &#32;&#32;edges[0][2]&#32;=&#32;0;
30 
31 &#32;&#32;edges[1][0]&#32;=&#32;0;
32 &#32;&#32;edges[1][1]&#32;=&#32;2;
33 &#32;&#32;edges[1][2]&#32;=&#32;0;
34 
35 &#32;&#32;edges[2][0]&#32;=&#32;0;
36 &#32;&#32;edges[2][1]&#32;=&#32;0;
37 &#32;&#32;edges[2][2]&#32;=&#32;2;
38 
39 &#32;&#32;<emphasis class="comment">//&#32;const&#32;std_cxx11::array&lt;&#32;Tensor&lt;&#32;1,&#32;3&#32;&gt;,&#32;3&#32;&gt;&#32;edges2(edges);</emphasis>
40 
41 &#32;&#32;subs.push_back(1);
42 &#32;&#32;subs.push_back(1);
43 &#32;&#32;subs.push_back(Utilities::MPI::n_mpi_processes(MPI_COMM_WORLD));
44 &#32;&#32;ct&#32;=&#32;in_ct;
45 }
46 
47 RoundMeshGenerator::~RoundMeshGenerator()&#32;{}
48 
<link linkend="class_round_mesh_generator_1accafc85e0b02823ef5cd12c384080aad">49 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_round_mesh_generator_1accafc85e0b02823ef5cd12c384080aad">RoundMeshGenerator::set_boundary_ids</link>(
50 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;&#32;&amp;tria)<emphasis class="keyword">&#32;const&#32;</emphasis>{
51 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::active_cell_iterator
52 &#32;&#32;&#32;&#32;&#32;&#32;cell2&#32;=&#32;tria.begin_active(),
53 &#32;&#32;&#32;&#32;&#32;&#32;endc2&#32;=&#32;tria.end();
54 &#32;&#32;tria.set_all_manifold_ids(0);
55 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell2&#32;!=&#32;endc2;&#32;++cell2)&#32;{
56 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Distance2D(cell2-&gt;center())&#32;&lt;&#32;0.25)&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;cell2-&gt;set_all_manifold_ids(1);
58 &#32;&#32;&#32;&#32;&#32;&#32;cell2-&gt;set_manifold_id(1);
59 &#32;&#32;&#32;&#32;}
60 &#32;&#32;}
61 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;man&#32;=&#32;1;
62 
63 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;min_z&#32;=&#32;100000.0;
64 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;max_z&#32;=&#32;-100000.0;
65 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::cell_iterator
66 &#32;&#32;&#32;&#32;&#32;&#32;boundary_searcher_begin&#32;=&#32;tria.begin();
67 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::cell_iterator&#32;boundary_searcher_end&#32;=
68 &#32;&#32;&#32;&#32;&#32;&#32;tria.end();
69 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;boundary_searcher_begin&#32;!=&#32;boundary_searcher_end;
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;boundary_searcher_begin++)&#32;{
71 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GeometryInfo&lt;3&gt;::vertices_per_cell;&#32;++i)&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;v&#32;=&#32;boundary_searcher_begin-&gt;vertex(i);
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(v(2)&#32;&lt;&#32;min_z)&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_z&#32;=&#32;v(2);
75 &#32;&#32;&#32;&#32;&#32;&#32;}
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(v(2)&#32;&gt;&#32;max_z)&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_z&#32;=&#32;v(2);
78 &#32;&#32;&#32;&#32;&#32;&#32;}
79 &#32;&#32;&#32;&#32;}
80 &#32;&#32;}
81 
82 &#32;&#32;tria.set_manifold(man,&#32;round_description);
83 
84 &#32;&#32;cell2&#32;=&#32;tria.begin_active();
85 
86 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell2&#32;!=&#32;endc2;&#32;++cell2)&#32;{
87 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell2-&gt;at_boundary())&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;6;&#32;j++)&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell2-&gt;face(j)-&gt;at_boundary())&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;ctr&#32;=&#32;cell2-&gt;face(j)-&gt;center(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;if(System_Coordinate_in_Waveguide(ctr)){</emphasis>
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell2-&gt;face(j)-&gt;set_all_boundary_ids(1);
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(ctr(2)&#32;-&#32;max_z)&#32;&lt;&#32;0.00001)&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell2-&gt;face(j)-&gt;set_all_boundary_ids(2);
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(ctr(2)&#32;-&#32;min_z)&#32;&lt;&#32;0.00001)&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell2-&gt;face(j)-&gt;set_all_boundary_ids(3);
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
102 &#32;&#32;&#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;}
104 &#32;&#32;}
105 }
106 
<link linkend="class_round_mesh_generator_1a7940ac54d22af156b3cc10d490264171">107 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_round_mesh_generator_1a7940ac54d22af156b3cc10d490264171">RoundMeshGenerator::prepare_triangulation</link>(
108 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;&#32;*in_tria)&#32;{
109 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;RoundMeshGenerator:prepare_triangulation&quot;</emphasis>);
110 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Starting&#32;Mesh&#32;preparation&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
111 
112 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;std_cxx11::array&lt;Tensor&lt;1,&#32;3&gt;,&#32;3&gt;&#32;edges2(edges);
113 
114 &#32;&#32;GridGenerator::subdivided_parallelepiped&lt;3,&#32;3&gt;(*in_tria,&#32;origin,&#32;edges2,&#32;subs,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">false</emphasis>);
116 
117 &#32;&#32;in_tria-&gt;repartition();
118 
119 &#32;&#32;in_tria-&gt;signals.post_refinement.connect(
120 &#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::bind(&amp;<link linkend="class_round_mesh_generator_1accafc85e0b02823ef5cd12c384080aad">RoundMeshGenerator::set_boundary_ids</link>,
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std_cxx11::cref(*<emphasis class="keyword">this</emphasis>),&#32;std_cxx11::ref(*in_tria)));
122 
123 &#32;&#32;in_tria-&gt;refine_global(3);
124 
125 &#32;&#32;in_tria-&gt;set_all_manifold_ids(0);
126 
127 &#32;&#32;GridTools::transform(&amp;Triangulation_Stretch_to_circle,&#32;*in_tria);
128 
129 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;man&#32;=&#32;1;
130 
131 &#32;&#32;in_tria-&gt;set_manifold(man,&#32;round_description);
132 
133 &#32;&#32;in_tria-&gt;set_all_manifold_ids(0);
134 &#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
135 
136 &#32;&#32;endc&#32;=&#32;in_tria-&gt;end();
137 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
138 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Distance2D(cell-&gt;center())&#32;&lt;&#32;0.25)&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_all_manifold_ids(1);
140 &#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_manifold_id(1);
141 &#32;&#32;&#32;&#32;}
142 &#32;&#32;}
143 
144 &#32;&#32;in_tria-&gt;set_manifold(man,&#32;round_description);
145 
146 &#32;&#32;in_tria-&gt;set_all_manifold_ids(0);
147 &#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
148 &#32;&#32;endc&#32;=&#32;in_tria-&gt;end();
149 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
150 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Distance2D(cell-&gt;center())&#32;&lt;&#32;0.25)&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_all_manifold_ids(1);
152 &#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_manifold_id(1);
153 &#32;&#32;&#32;&#32;}
154 &#32;&#32;}
155 
156 &#32;&#32;in_tria-&gt;set_manifold(man,&#32;round_description);
157 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::active_cell_iterator
158 &#32;&#32;&#32;&#32;&#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active(),
159 &#32;&#32;&#32;&#32;&#32;&#32;endc&#32;=&#32;in_tria-&gt;end();
160 
161 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;len&#32;=&#32;2.0&#32;/&#32;Layers;
162 
163 &#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
164 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
165 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;temp&#32;=&#32;(int)std::floor((cell-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>)[2]&#32;+&#32;1.0)&#32;/&#32;len);
166 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(temp&#32;&gt;=&#32;(<emphasis class="keywordtype">int</emphasis>)Layers&#32;||&#32;temp&#32;&lt;&#32;0)
167 &#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical&#32;Error&#32;in&#32;Mesh&#32;partitioning.&#32;See&#32;make_grid!&#32;&quot;</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;Solvers&#32;might&#32;not&#32;work.&quot;</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
170 &#32;&#32;}
171 
172 &#32;&#32;GridTools::transform(&amp;Triangulation_Stretch_X,&#32;*in_tria);
173 &#32;&#32;GridTools::transform(&amp;Triangulation_Stretch_Y,&#32;*in_tria);
174 &#32;&#32;GridTools::transform(&amp;Triangulation_Stretch_Computational_Radius,&#32;*in_tria);
175 
176 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(GlobalParams.R_Global&#32;&gt;&#32;0)&#32;{
177 &#32;&#32;&#32;&#32;in_tria-&gt;refine_global(GlobalParams.R_Global);
178 &#32;&#32;}
179 
180 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;MaxDistFromBoundary&#32;=
181 &#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1Out&#32;+&#32;GlobalParams.M_C_Dim1In)&#32;*&#32;1.4&#32;/&#32;2.0;
182 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.R_Local;&#32;i++)&#32;{
183 &#32;&#32;&#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
184 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(std::abs(Distance2D(cell-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>))&#32;-
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;/&#32;2.0)&#32;&lt;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MaxDistFromBoundary)&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_refine_flag();
189 &#32;&#32;&#32;&#32;&#32;&#32;}
190 &#32;&#32;&#32;&#32;}
191 &#32;&#32;&#32;&#32;in_tria-&gt;execute_coarsening_and_refinement();
192 &#32;&#32;&#32;&#32;MaxDistFromBoundary&#32;=
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(MaxDistFromBoundary&#32;+
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((GlobalParams.M_C_Dim1Out&#32;+&#32;GlobalParams.M_C_Dim1In)&#32;/&#32;2.0))&#32;/
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2.0;
196 &#32;&#32;}
197 
198 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GlobalParams.R_Interior;&#32;i++)&#32;{
199 &#32;&#32;&#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
200 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Distance2D(cell-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>))&#32;&lt;
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;/&#32;2.0)&#32;{
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_refine_flag();
204 &#32;&#32;&#32;&#32;&#32;&#32;}
205 &#32;&#32;&#32;&#32;}
206 &#32;&#32;&#32;&#32;in_tria-&gt;execute_coarsening_and_refinement();
207 &#32;&#32;}
208 
209 &#32;&#32;<emphasis class="comment">//&#32;mesh_info(triangulation,&#32;solutionpath&#32;+&#32;&quot;/grid&quot;&#32;+</emphasis>
210 &#32;&#32;<emphasis class="comment">//&#32;static_cast&lt;std::ostringstream*&gt;(&#32;&amp;(std::ostringstream()&#32;&lt;&lt;</emphasis>
211 &#32;&#32;<emphasis class="comment">//&#32;GlobalParams.MPI_Rank)&#32;)-&gt;str()&#32;+&#32;&quot;.vtk&quot;);</emphasis>
212 
213 &#32;&#32;GridTools::transform(&amp;Triangulation_Stretch_Z,&#32;*in_tria);
214 
215 &#32;&#32;GridTools::transform(&amp;Triangulation_Shift_Z,&#32;*in_tria);
216 
217 &#32;&#32;z_min&#32;=&#32;10000000.0;
218 &#32;&#32;z_max&#32;=&#32;-10000000.0;
219 &#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
220 &#32;&#32;endc&#32;=&#32;in_tria-&gt;end();
221 
222 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
223 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(cell-&gt;is_locally_owned())&#32;{
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;face&#32;=&#32;0;&#32;face&#32;&lt;&#32;6;&#32;face++)&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z_min&#32;=&#32;std::min(z_min,&#32;cell-&gt;face(face)-&gt;center()[2]);
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;z_max&#32;=&#32;std::max(z_max,&#32;cell-&gt;face(face)-&gt;center()[2]);
227 &#32;&#32;&#32;&#32;&#32;&#32;}
228 &#32;&#32;&#32;&#32;}
229 &#32;&#32;}
230 
231 &#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
232 &#32;&#32;endc&#32;=&#32;in_tria-&gt;end();
233 <emphasis class="comment"></emphasis>
234 <emphasis class="comment">&#32;&#32;///&#32;mesh_info(*in_tria,</emphasis>
235 <emphasis class="comment">&#32;&#32;///&#32;&quot;Output&quot;+std::to_string(GlobalParams.MPI_Rank)+&quot;.vtk&quot;);</emphasis>
236 <emphasis class="comment"></emphasis>
237 &#32;&#32;set_boundary_ids(*in_tria);
238 
239 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
240 &#32;&#32;deallog.pop();
241 }
242 
<link linkend="class_round_mesh_generator_1ae28b3d9461233b9de1ce366c0f2458bd">243 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_round_mesh_generator_1ae28b3d9461233b9de1ce366c0f2458bd">RoundMeshGenerator::math_coordinate_in_waveguide</link>(
244 &#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;in_position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
245 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Distance2D(in_position)&#32;&lt;
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;/&#32;2.0;
247 }
248 
<link linkend="class_round_mesh_generator_1aba31fbd62ab56899c0cd06c5257420c7">249 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_round_mesh_generator_1aba31fbd62ab56899c0cd06c5257420c7">RoundMeshGenerator::phys_coordinate_in_waveguide</link>(
250 &#32;&#32;&#32;&#32;Point&lt;3,&#32;double&gt;&#32;in_position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
251 &#32;&#32;Point&lt;3,&#32;double&gt;&#32;temp&#32;=&#32;in_position;
252 &#32;&#32;temp[1]&#32;-=&#32;ct-&gt;<link linkend="class_space_transformation_1a164857fcea7bbad31325ee26705f8e0b">get_m</link>(in_position[2]);
253 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;ct-&gt;<link linkend="class_space_transformation_1a15a36cfba06f1242c243d3f92c79b3d8">get_r</link>(in_position[2]);
254 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(abs(temp[0])&#32;&lt;&#32;r&#32;&amp;&amp;&#32;abs(temp[1])&#32;&lt;&#32;r);
255 }
256 
<link linkend="class_round_mesh_generator_1a6853ef55471fb74a7e4a7c3a3b0f2649">257 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_round_mesh_generator_1a6853ef55471fb74a7e4a7c3a3b0f2649">RoundMeshGenerator::refine_global</link>(
258 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;&#32;*in_tria,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;times)&#32;{
259 &#32;&#32;in_tria-&gt;refine_global(times);
260 }
261 
<link linkend="class_round_mesh_generator_1a9bdb7b90cc1988eb80c441ee8f85b0a0">262 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_round_mesh_generator_1a9bdb7b90cc1988eb80c441ee8f85b0a0">RoundMeshGenerator::refine_proximity</link>(
263 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;&#32;*in_tria,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;times,
264 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;factor)&#32;{
265 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;t&#32;=&#32;0;&#32;t&#32;&lt;&#32;times;&#32;t++)&#32;{
266 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;R&#32;=&#32;(GlobalParams.M_C_Dim1Out&#32;+&#32;GlobalParams.M_C_Dim1In)&#32;*
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(1.0&#32;+&#32;factor)&#32;/&#32;2.0;
268 &#32;&#32;&#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
269 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(Distance2D(cell-&gt;center(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>))&#32;&lt;&#32;R)&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_refine_flag();
272 &#32;&#32;&#32;&#32;&#32;&#32;}
273 &#32;&#32;&#32;&#32;}
274 &#32;&#32;&#32;&#32;in_tria-&gt;execute_coarsening_and_refinement();
275 &#32;&#32;}
276 }
277 
<link linkend="class_round_mesh_generator_1ae2a55c58cfe3c69479237921e284e0b8">278 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_round_mesh_generator_1ae2a55c58cfe3c69479237921e284e0b8">RoundMeshGenerator::refine_internal</link>(
279 &#32;&#32;&#32;&#32;parallel::distributed::Triangulation&lt;3&gt;&#32;*in_tria,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;times)&#32;{
280 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;times;&#32;i++)&#32;{
281 &#32;&#32;&#32;&#32;cell&#32;=&#32;in_tria-&gt;begin_active();
282 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;cell&#32;!=&#32;endc;&#32;++cell)&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_mesh_generator_1a571dc7c36f29edbdb9ea40e5832ba851">math_coordinate_in_waveguide</link>(cell-&gt;center()))&#32;{
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cell-&gt;set_refine_flag();
285 &#32;&#32;&#32;&#32;&#32;&#32;}
286 &#32;&#32;&#32;&#32;}
287 &#32;&#32;&#32;&#32;in_tria-&gt;execute_coarsening_and_refinement();
288 &#32;&#32;}
289 }
290 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
