<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_square_mesh_generator_8h">
    <title>SquareMeshGenerator.h File Reference</title>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/tria.h&gt;</programlisting>
    <programlisting>#include &lt;array&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/SpaceTransformation.h&quot;</programlisting>
    <programlisting>#include &quot;./MeshGenerator.h&quot;</programlisting>
    <programlisting>#include &quot;./SquareMeshGenerator.h&quot;</programlisting>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_square_mesh_generator">SquareMeshGenerator</link></para>
<para><emphasis>This class generates meshes, that are used to discretize a rectangular
Waveguide.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/MeshGenerators/SquareMeshGenerator.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;SquareMeshGenerator_h_</emphasis>
2 <emphasis class="preprocessor">#define&#32;SquareMeshGenerator_h_</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/tria.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;array&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/SpaceTransformation.h&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&quot;./MeshGenerator.h&quot;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;./SquareMeshGenerator.h&quot;</emphasis><emphasis class="comment"></emphasis>
11 <emphasis class="comment">/**</emphasis>
12 <emphasis class="comment">&#32;*&#32;\class&#32;SquareMeshGenerator</emphasis>
13 <emphasis class="comment">&#32;*&#32;\brief&#32;This&#32;class&#32;generates&#32;meshes,&#32;that&#32;are&#32;used&#32;to&#32;discretize&#32;a&#32;rectangular</emphasis>
14 <emphasis class="comment">&#32;*&#32;Waveguide.&#32;It&#32;is&#32;derived&#32;from&#32;MeshGenerator.</emphasis>
15 <emphasis class="comment">&#32;*</emphasis>
16 <emphasis class="comment">&#32;*&#32;The&#32;original&#32;intention&#32;of&#32;this&#32;project&#32;was&#32;to&#32;model&#32;tubular&#32;(or&#32;cylindrical)</emphasis>
17 <emphasis class="comment">&#32;*&#32;waveguides.&#32;The&#32;motivation&#32;behind&#32;this&#32;thought&#32;was&#32;the&#32;fact,&#32;that&#32;for&#32;this</emphasis>
18 <emphasis class="comment">&#32;*&#32;case&#32;the&#32;modes&#32;are&#32;known&#32;analytically.&#32;In&#32;applications&#32;however&#32;modes&#32;can&#32;be</emphasis>
19 <emphasis class="comment">&#32;*&#32;computed&#32;numerically&#32;and&#32;other&#32;shapes&#32;are&#32;easier&#32;to&#32;fabricate.&#32;For&#32;example</emphasis>
20 <emphasis class="comment">&#32;*&#32;square&#32;or&#32;rectangular&#32;waveguides&#32;can&#32;be&#32;printed&#32;in&#32;3D&#32;on&#32;the&#32;scales&#32;we</emphasis>
21 <emphasis class="comment">&#32;*&#32;currently&#32;compute&#32;while&#32;tubular&#32;waveguides&#32;on&#32;that&#32;scale&#32;are&#32;not&#32;yet</emphasis>
22 <emphasis class="comment">&#32;*&#32;feasible.&#32;\author&#32;Pascal&#32;Kraft&#32;\date&#32;28.11.2016</emphasis>
23 <emphasis class="comment">&#32;*/</emphasis>
<link linkend="class_square_mesh_generator">24 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_square_mesh_generator">SquareMeshGenerator</link>&#32;:&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="class_mesh_generator">MeshGenerator</link>&#32;{
25 &#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>*&#32;ct;
26 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;Layers;
27 &#32;&#32;Point&lt;3&gt;&#32;origin;
28 &#32;&#32;std_cxx11::array&lt;Tensor&lt;1,&#32;3&gt;,&#32;3&gt;&#32;edges;
29 &#32;&#32;std::vector&lt;unsigned&#32;int&gt;&#32;subs;
30 
31 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;MaxDistX;
32 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;MaxDistY;
33 
34 &#32;<emphasis class="keyword">public</emphasis>:
35 &#32;&#32;<link linkend="class_square_mesh_generator">SquareMeshGenerator</link>(<link linkend="class_space_transformation">SpaceTransformation</link>*&#32;st);
36 
37 &#32;&#32;~<link linkend="class_square_mesh_generator">SquareMeshGenerator</link>();<emphasis class="comment"></emphasis>
38 <emphasis class="comment">&#32;&#32;/**</emphasis>
39 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;intended&#32;to&#32;execute&#32;a&#32;global&#32;refinement&#32;of&#32;the&#32;mesh.&#32;This</emphasis>
40 <emphasis class="comment">&#32;&#32;&#32;*&#32;means&#32;that&#32;every&#32;cell&#32;will&#32;be&#32;refined&#32;in&#32;every&#32;direction&#32;(effectively</emphasis>
41 <emphasis class="comment">&#32;&#32;&#32;*&#32;multiplying&#32;the&#32;number&#32;of&#32;DOFs&#32;by&#32;8).&#32;This&#32;version&#32;is&#32;the&#32;most&#32;expensive</emphasis>
42 <emphasis class="comment">&#32;&#32;&#32;*&#32;refinement&#32;possible&#32;and&#32;should&#32;be&#32;used&#32;with&#32;caution.&#32;\param&#32;times&#32;Number&#32;of</emphasis>
43 <emphasis class="comment">&#32;&#32;&#32;*&#32;refinement&#32;steps&#32;to&#32;be&#32;performed&#32;(gives&#32;us&#32;a&#32;multiplication&#32;of&#32;the&#32;number</emphasis>
44 <emphasis class="comment">&#32;&#32;&#32;*&#32;of&#32;degrees&#32;of&#32;freedom&#32;by&#32;\f$8^{times}\f$.</emphasis>
45 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
46 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_square_mesh_generator_1a4bf7ccb54b42b23c4c21e6b0348cfa64">refine_global</link>(parallel::distributed::Triangulation&lt;3&gt;*&#32;in_tria,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;times);
48 <emphasis class="comment"></emphasis>
49 <emphasis class="comment">&#32;&#32;/**</emphasis>
50 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;intended&#32;to&#32;execute&#32;an&#32;internal&#32;refinement&#32;of&#32;the&#32;mesh.</emphasis>
51 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;means&#32;that&#32;every&#32;cell&#32;inside&#32;the&#32;waveguide&#32;will&#32;be&#32;refined&#32;in&#32;every</emphasis>
52 <emphasis class="comment">&#32;&#32;&#32;*&#32;direction.&#32;This&#32;method&#32;is&#32;rather&#32;cheap&#32;and&#32;only&#32;refines&#32;where&#32;the&#32;field&#32;is</emphasis>
53 <emphasis class="comment">&#32;&#32;&#32;*&#32;strong,&#32;however,&#32;the&#32;mesh&#32;outside&#32;the&#32;waveguide&#32;should&#32;not&#32;be&#32;too&#32;coarse&#32;to</emphasis>
54 <emphasis class="comment">&#32;&#32;&#32;*&#32;reduce&#32;numerical&#32;errors.&#32;\param&#32;times&#32;Number&#32;of&#32;refinement&#32;steps&#32;to&#32;be</emphasis>
55 <emphasis class="comment">&#32;&#32;&#32;*&#32;performed.</emphasis>
56 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
57 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_square_mesh_generator_1aeb8209c7e20ee24c98bfa2b3e0e70ffa">refine_internal</link>(parallel::distributed::Triangulation&lt;3&gt;*&#32;in_tria,
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;times);
59 <emphasis class="comment"></emphasis>
60 <emphasis class="comment">&#32;&#32;/**</emphasis>
61 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;intended&#32;to&#32;execute&#32;a&#32;refinement&#32;inside&#32;and&#32;near&#32;the</emphasis>
62 <emphasis class="comment">&#32;&#32;&#32;*&#32;waveguide&#32;boundary.&#32;\param&#32;times&#32;Number&#32;of&#32;refinement&#32;steps&#32;to&#32;be</emphasis>
63 <emphasis class="comment">&#32;&#32;&#32;*&#32;performed.</emphasis>
64 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
65 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_square_mesh_generator_1a942195cc1dbc944e5ec96c41b82084f5">refine_proximity</link>(parallel::distributed::Triangulation&lt;3&gt;*&#32;in_tria,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;times,&#32;<emphasis class="keywordtype">double</emphasis>&#32;factor);
67 <emphasis class="comment"></emphasis>
68 <emphasis class="comment">&#32;&#32;/**</emphasis>
69 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;checks&#32;if&#32;the&#32;given&#32;coordinate&#32;is&#32;inside&#32;the&#32;waveguide&#32;or</emphasis>
70 <emphasis class="comment">&#32;&#32;&#32;*&#32;not.&#32;The&#32;naming&#32;convention&#32;of&#32;physical&#32;and&#32;mathematical&#32;system&#32;find</emphasis>
71 <emphasis class="comment">&#32;&#32;&#32;*&#32;application.&#32;In&#32;this&#32;version,&#32;the&#32;waveguide&#32;has&#32;been&#32;transformed&#32;and&#32;the</emphasis>
72 <emphasis class="comment">&#32;&#32;&#32;*&#32;check&#32;for&#32;a&#32;tubal&#32;waveguide&#32;for&#32;example&#32;only&#32;checks&#32;if&#32;the&#32;radius&#32;of&#32;a</emphasis>
73 <emphasis class="comment">&#32;&#32;&#32;*&#32;given&#32;vector&#32;is&#32;below&#32;the&#32;average&#32;of&#32;input&#32;and&#32;output&#32;radius.&#32;\params</emphasis>
74 <emphasis class="comment">&#32;&#32;&#32;*&#32;position&#32;This&#32;value&#32;gives&#32;us&#32;the&#32;location&#32;to&#32;check&#32;for.</emphasis>
75 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
76 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_square_mesh_generator_1a472172871d02e901edc48c40eb829a17">math_coordinate_in_waveguide</link>(Point&lt;3&gt;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
77 <emphasis class="comment"></emphasis>
78 <emphasis class="comment">&#32;&#32;/**</emphasis>
79 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;checks&#32;if&#32;the&#32;given&#32;coordinate&#32;is&#32;inside&#32;the&#32;waveguide&#32;or</emphasis>
80 <emphasis class="comment">&#32;&#32;&#32;*&#32;not.&#32;The&#32;naming&#32;convention&#32;of&#32;physical&#32;and&#32;mathematical&#32;system&#32;find</emphasis>
81 <emphasis class="comment">&#32;&#32;&#32;*&#32;application.&#32;In&#32;this&#32;version,&#32;the&#32;waveguide&#32;is&#32;bent.&#32;If&#32;we&#32;are&#32;using&#32;a</emphasis>
82 <emphasis class="comment">&#32;&#32;&#32;*&#32;space&#32;transformation&#32;\f$f\f$&#32;then&#32;this&#32;function&#32;is&#32;equal&#32;to</emphasis>
83 <emphasis class="comment">&#32;&#32;&#32;*&#32;math_coordinate_in_waveguide(f(x,y,z)).&#32;\params&#32;position&#32;This&#32;value&#32;gives</emphasis>
84 <emphasis class="comment">&#32;&#32;&#32;*&#32;us&#32;the&#32;location&#32;to&#32;check&#32;for.</emphasis>
85 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
86 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_square_mesh_generator_1a0567efd954b9f8fb04863ee35f6e10f8">phys_coordinate_in_waveguide</link>(Point&lt;3&gt;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
87 <emphasis class="comment"></emphasis>
88 <emphasis class="comment">&#32;&#32;/**</emphasis>
89 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;takes&#32;a&#32;triangulation&#32;object&#32;and&#32;prepares&#32;it&#32;for&#32;the&#32;further</emphasis>
90 <emphasis class="comment">&#32;&#32;&#32;*&#32;computations.&#32;It&#32;is&#32;intended&#32;to&#32;encapsulate&#32;all&#32;related&#32;work&#32;and&#32;is</emphasis>
91 <emphasis class="comment">&#32;&#32;&#32;*&#32;explicitely&#32;not&#32;const.&#32;\param&#32;in_tria&#32;The&#32;triangulation&#32;that&#32;is&#32;supposed&#32;to</emphasis>
92 <emphasis class="comment">&#32;&#32;&#32;*&#32;be&#32;prepared.&#32;All&#32;further&#32;information&#32;is&#32;derived&#32;from&#32;the&#32;parameter&#32;file&#32;and</emphasis>
93 <emphasis class="comment">&#32;&#32;&#32;*&#32;not&#32;given&#32;by&#32;parameters.</emphasis>
94 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
95 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_square_mesh_generator_1a5d4f5e0caaf4c22ef1d67759560c0acf">prepare_triangulation</link>(parallel::distributed::Triangulation&lt;3&gt;*&#32;in_tria);
96 
97 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;set_boundary_ids(parallel::distributed::Triangulation&lt;3&gt;&amp;&#32;tria)&#32;<emphasis class="keyword">const</emphasis>;
98 
99 &#32;&#32;parallel::distributed::Triangulation&lt;3&gt;::active_cell_iterator&#32;cell,&#32;endc;
100 };
101 
102 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
