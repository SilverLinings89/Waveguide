<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_preconditioner_sweeping_8cpp">
    <title>PreconditionerSweeping.cpp File Reference</title>
    <programlisting>#include &lt;deal.II/base/utilities.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_solver.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &lt;cmath&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/solver.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/sparse_direct.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/sparse_matrix.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_sparse_matrix.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/trilinos_vector.h&gt;</programlisting>
    <programlisting>#include &quot;PreconditionerSweeping.h&quot;</programlisting>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespacedealii">dealii</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_preconditioner_sweeping_8cpp_1ae00e50ce8a2458899d3e2b6d3be29f13">CODE_CORE_PRECONDITIONERSWEEPING_CPP_</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::SparseDirectUMFPACK * <link linkend="_preconditioner_sweeping_8cpp_1ab66dbaf2176efb1ae21d951b760e1f35">solver</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::SparsityPattern <link linkend="_preconditioner_sweeping_8cpp_1a46cc748604d09e3810d8a5e1917a89ab">off_diag_block_lower</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::SparsityPattern <link linkend="_preconditioner_sweeping_8cpp_1a832e3db088e27e801beb606f63e1b399">off_diag_block_upper</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::SolverControl <link linkend="_preconditioner_sweeping_8cpp_1a9827ddc4c510ed892e25397a80e9ba1e">s</link> (
10 , 1.e- 10, false , false )</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Core/PreconditionerSweeping.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">//&#32;Copyright&#32;2018&#32;Pascal&#32;Kraft</emphasis>
2 <emphasis class="preprocessor">#ifndef&#32;CODE_CORE_PRECONDITIONERSWEEPING_CPP_</emphasis>
3 <emphasis class="preprocessor">#define&#32;CODE_CORE_PRECONDITIONERSWEEPING_CPP_</emphasis>
4 
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/utilities.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_solver.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
9 
10 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/solver.h&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/sparse_direct.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/sparse_matrix.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_sparse_matrix.h&gt;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/trilinos_vector.h&gt;</emphasis>
15 
16 <emphasis class="preprocessor">#include&#32;&quot;PreconditionerSweeping.h&quot;</emphasis>
17 
18 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
19 
20 dealii::SolverControl&#32;s(10,&#32;1.e-10,&#32;<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>);
21 dealii::SparseDirectUMFPACK&#32;*solver&#32;=&#32;0;
22 
23 dealii::SparsityPattern&#32;off_diag_block_lower,&#32;off_diag_block_upper;
24 
25 PreconditionerSweeping::~PreconditionerSweeping()&#32;{&#32;<emphasis class="keyword">delete</emphasis>&#32;solver;&#32;}
26 
<link linkend="class_preconditioner_sweeping_1a0c478ccabe57765b5a923b1ef03878af">27 </link><link linkend="class_preconditioner_sweeping_1a0c478ccabe57765b5a923b1ef03878af">PreconditionerSweeping::PreconditionerSweeping</link>(MPI_Comm&#32;in_mpi_comm,&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_own,
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_others,&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_above,
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_bandwidth,
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IndexSet&#32;in_locally_owned_dofs,
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IndexSet&#32;*in_fixed_dofs,
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_rank,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;in_fast)&#32;{
33 &#32;&#32;locally_owned_dofs&#32;=&#32;in_locally_owned_dofs;
34 &#32;&#32;own&#32;=&#32;in_own;
35 &#32;&#32;others&#32;=&#32;in_others;
36 &#32;&#32;IndexSet&#32;elements(own&#32;+&#32;others);
37 &#32;&#32;elements.add_range(0,&#32;own&#32;+&#32;others);
38 &#32;&#32;indices&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>[in_locally_owned_dofs.n_elements()];
39 &#32;&#32;sweepable&#32;=&#32;in_locally_owned_dofs.n_elements();
40 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;sweepable;&#32;i++)&#32;{
41 &#32;&#32;&#32;&#32;indices[i]&#32;=&#32;in_locally_owned_dofs.nth_index_in_set(i);
42 &#32;&#32;}
43 &#32;&#32;fixed_dofs&#32;=&#32;in_fixed_dofs;
44 &#32;&#32;rank&#32;=&#32;in_rank;
45 &#32;&#32;bandwidth&#32;=&#32;in_bandwidth;
46 &#32;&#32;mpi_comm&#32;=&#32;in_mpi_comm;
47 &#32;&#32;above&#32;=&#32;in_above;
48 &#32;&#32;prec_matrix_lower&#32;=&#32;0;
49 &#32;&#32;prec_matrix_upper&#32;=&#32;0;
50 &#32;&#32;matrix&#32;=&#32;0;
51 &#32;&#32;fast&#32;=&#32;in_fast;
52 }
53 
54 <emphasis class="keywordtype">void</emphasis>&#32;PreconditionerSweeping::Prepare(TrilinosWrappers::MPI::BlockVector&#32;&amp;inp)&#32;{
55 &#32;&#32;boundary.reinit(own,&#32;<emphasis class="keyword">false</emphasis>);
56 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
57 &#32;&#32;&#32;&#32;boundary[i]&#32;=&#32;inp[i];
58 &#32;&#32;}
59 &#32;&#32;<emphasis class="keywordflow">return</emphasis>;
60 }
61 
<link linkend="class_preconditioner_sweeping_1aff2e2213fb5cd62f9062d9751e41c776">62 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_preconditioner_sweeping_1aff2e2213fb5cd62f9062d9751e41c776">PreconditionerSweeping::vmult</link>(
63 &#32;&#32;&#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;&amp;dst,
64 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;TrilinosWrappers::MPI::BlockVector&#32;&amp;src)<emphasis class="keyword">&#32;const&#32;</emphasis>{
65 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(fast)&#32;{
66 &#32;&#32;&#32;&#32;this-&gt;vmult_fast(dst,&#32;src);
67 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
68 &#32;&#32;&#32;&#32;this-&gt;vmult_slow(dst,&#32;src);
69 &#32;&#32;}
70 }
71 
<link linkend="class_preconditioner_sweeping_1aa5ca83717ab0de29267b427de5225a53">72 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_preconditioner_sweeping_1aa5ca83717ab0de29267b427de5225a53">PreconditionerSweeping::vmult_fast</link>(
73 &#32;&#32;&#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;&amp;dst,
74 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;TrilinosWrappers::MPI::BlockVector&#32;&amp;src)<emphasis class="keyword">&#32;const&#32;</emphasis>{
75 &#32;&#32;dealii::Vector&lt;double&gt;&#32;recv_buffer_above(above);
76 &#32;&#32;dealii::Vector&lt;double&gt;&#32;recv_buffer_below(others);
77 &#32;&#32;dealii::Vector&lt;double&gt;&#32;temp_own(own);
78 &#32;&#32;dealii::Vector&lt;double&gt;&#32;temp_own_2(own);
79 &#32;&#32;dealii::Vector&lt;double&gt;&#32;input(own);
80 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;sweepable;&#32;i++)&#32;{
81 &#32;&#32;&#32;&#32;input[i]&#32;=&#32;src[indices[i]];
82 &#32;&#32;}
83 
84 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
85 &#32;&#32;&#32;&#32;solver-&gt;solve(input);
86 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
87 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&gt;&#32;0)&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;Hinv(input,&#32;temp_own);
89 &#32;&#32;&#32;&#32;}
90 &#32;&#32;}
91 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
92 &#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;-&#32;1,&#32;0,&#32;mpi_comm);
93 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
94 &#32;&#32;&#32;&#32;MPI_Recv(&amp;recv_buffer_below[0],&#32;others,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_STATUS_IGNORE);
96 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&gt;&#32;0)
97 &#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;temp_own[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;-&#32;1,&#32;0,&#32;mpi_comm);
98 &#32;&#32;}
99 
100 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&lt;&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
101 &#32;&#32;&#32;&#32;UpperProduct(recv_buffer_below,&#32;temp_own);
102 &#32;&#32;&#32;&#32;input&#32;-=&#32;temp_own;
103 &#32;&#32;}
104 
105 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;&lt;&#32;GlobalParams.NumberProcesses&#32;-&#32;1)&#32;{
106 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;temp_own[i]&#32;=&#32;input[i];
108 &#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;Hinv(temp_own,&#32;input);
110 &#32;&#32;}
111 <emphasis class="comment"></emphasis>
112 <emphasis class="comment">&#32;&#32;/**</emphasis>
113 <emphasis class="comment">&#32;&#32;&#32;*&#32;fast&#32;version&#32;starting&#32;here.</emphasis>
114 <emphasis class="comment">&#32;&#32;&#32;&#32;if&#32;(&#32;rank&#32;==&#32;0)&#32;{</emphasis>
115 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm);</emphasis>
116 <emphasis class="comment">&#32;&#32;&#32;&#32;}&#32;else&#32;{</emphasis>
117 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;MPI_Recv(&amp;&#32;recv_buffer_above[0],&#32;above,&#32;MPI_DOUBLE,&#32;rank-1,&#32;0,&#32;mpi_comm,</emphasis>
118 <emphasis class="comment">&#32;&#32;&#32;MPI_STATUS_IGNORE);&#32;if(rank&#32;&lt;&#32;GlobalParams.NumberProcesses-1)</emphasis>
119 <emphasis class="comment">&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm);</emphasis>
120 <emphasis class="comment">&#32;&#32;&#32;&#32;}</emphasis>
121 <emphasis class="comment"></emphasis>
122 <emphasis class="comment">&#32;&#32;&#32;&#32;if(rank&#32;&gt;&#32;0)&#32;{</emphasis>
123 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;LowerProduct(recv_buffer_above,&#32;temp_own);</emphasis>
124 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;if(rank&#32;==&#32;GlobalParams.NumberProcesses-1)&#32;{</emphasis>
125 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;solver-&gt;solve(temp_own);</emphasis>
126 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;-=&#32;temp_own;</emphasis>
127 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;}&#32;else&#32;{</emphasis>
128 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Hinv(temp_own,&#32;temp_own_2);</emphasis>
129 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;-=&#32;temp_own_2;</emphasis>
130 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
131 <emphasis class="comment">&#32;&#32;&#32;&#32;}</emphasis>
132 <emphasis class="comment"></emphasis>
133 <emphasis class="comment">&#32;&#32;&#32;&#32;for(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++&#32;){</emphasis>
134 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;if(!&#32;fixed_dofs-&gt;is_element(indices[i])){</emphasis>
135 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst[indices[i]]&#32;=&#32;input[i];</emphasis>
136 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
137 <emphasis class="comment">&#32;&#32;&#32;&#32;}</emphasis>
138 <emphasis class="comment">&#32;&#32;&#32;&#32;**/</emphasis>
139 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0)&#32;{
140 &#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm);
141 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
142 &#32;&#32;&#32;&#32;MPI_Recv(&amp;recv_buffer_above[0],&#32;above,&#32;MPI_DOUBLE,&#32;rank&#32;-&#32;1,&#32;0,&#32;mpi_comm,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_STATUS_IGNORE);
144 &#32;&#32;&#32;&#32;LowerProduct(recv_buffer_above,&#32;temp_own);
145 &#32;&#32;&#32;&#32;Hinv(temp_own,&#32;temp_own_2);
146 &#32;&#32;&#32;&#32;input&#32;-=&#32;temp_own_2;
147 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)rank&#32;+&#32;1&#32;&lt;&#32;GlobalParams.NumberProcesses)&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm);
149 &#32;&#32;&#32;&#32;}
150 &#32;&#32;}
151 
152 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
153 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!fixed_dofs-&gt;is_element(indices[i]))&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;dst[indices[i]]&#32;=&#32;input[i];
155 &#32;&#32;&#32;&#32;}
156 &#32;&#32;}
157 }
158 
159 <emphasis class="keywordtype">void</emphasis>&#32;PreconditionerSweeping::vmult_slow(
160 &#32;&#32;&#32;&#32;TrilinosWrappers::MPI::BlockVector&#32;&amp;dst,
161 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;TrilinosWrappers::MPI::BlockVector&#32;&amp;src)<emphasis class="keyword">&#32;const&#32;</emphasis>{
162 &#32;&#32;dealii::Vector&lt;double&gt;&#32;recv_buffer_above(above);
163 &#32;&#32;dealii::Vector&lt;double&gt;&#32;recv_buffer_below(others);
164 &#32;&#32;dealii::Vector&lt;double&gt;&#32;temp_own(own);
165 &#32;&#32;dealii::Vector&lt;double&gt;&#32;temp_own_2(own);
166 &#32;&#32;dealii::Vector&lt;double&gt;&#32;input(own);
167 
168 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;sweepable;&#32;i++)&#32;{
169 &#32;&#32;&#32;&#32;input[i]&#32;=&#32;src[indices[i]];
170 &#32;&#32;}
171 
172 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)rank&#32;+&#32;1&#32;==&#32;GlobalParams.NumberProcesses)&#32;{
173 &#32;&#32;&#32;&#32;solver-&gt;solve(input);
174 &#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;-&#32;1,&#32;0,&#32;mpi_comm);
175 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
176 &#32;&#32;&#32;&#32;MPI_Recv(&amp;recv_buffer_below[0],&#32;others,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_STATUS_IGNORE);
178 &#32;&#32;&#32;&#32;UpperProduct(recv_buffer_below,&#32;temp_own);
179 &#32;&#32;&#32;&#32;input&#32;-=&#32;temp_own;
180 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;!=&#32;0)&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;Hinv(input,&#32;temp_own);
182 &#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;temp_own[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;-&#32;1,&#32;0,&#32;mpi_comm);
183 &#32;&#32;&#32;&#32;}
184 &#32;&#32;}
185 
186 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)rank&#32;+&#32;1&#32;!=&#32;GlobalParams.NumberProcesses)&#32;{
187 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;temp_own[i]&#32;=&#32;input[i];
189 &#32;&#32;&#32;&#32;}
190 &#32;&#32;&#32;&#32;Hinv(temp_own,&#32;input);
191 &#32;&#32;}
192 
193 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rank&#32;==&#32;0)&#32;{
194 &#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm);
195 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
196 &#32;&#32;&#32;&#32;MPI_Recv(&amp;recv_buffer_above[0],&#32;above,&#32;MPI_DOUBLE,&#32;rank&#32;-&#32;1,&#32;0,&#32;mpi_comm,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MPI_STATUS_IGNORE);
198 &#32;&#32;&#32;&#32;LowerProduct(recv_buffer_above,&#32;temp_own);
199 &#32;&#32;&#32;&#32;Hinv(temp_own,&#32;temp_own_2);
200 &#32;&#32;&#32;&#32;input&#32;-=&#32;temp_own_2;
201 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)rank&#32;+&#32;1&#32;&lt;&#32;GlobalParams.NumberProcesses)&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;MPI_Send(&amp;input[0],&#32;own,&#32;MPI_DOUBLE,&#32;rank&#32;+&#32;1,&#32;0,&#32;mpi_comm);
203 &#32;&#32;&#32;&#32;}
204 &#32;&#32;}
205 
206 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
207 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!fixed_dofs-&gt;is_element(indices[i]))&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;dst[indices[i]]&#32;=&#32;input[i];
209 &#32;&#32;&#32;&#32;}
210 &#32;&#32;}
211 }
212 
<link linkend="class_preconditioner_sweeping_1a3e8229d9aca0e61ecab03196fe16ab7f">213 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_preconditioner_sweeping_1a3e8229d9aca0e61ecab03196fe16ab7f">PreconditionerSweeping::Hinv</link>(<emphasis class="keyword">const</emphasis>&#32;dealii::Vector&lt;double&gt;&#32;&amp;src,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;&amp;dst)<emphasis class="keyword">&#32;const&#32;</emphasis>{
215 &#32;&#32;dealii::Vector&lt;double&gt;&#32;inputb(own&#32;+&#32;others);
216 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
217 &#32;&#32;&#32;&#32;inputb[i]&#32;=&#32;src(i);
218 &#32;&#32;}
219 
220 &#32;&#32;solver-&gt;solve(inputb);
221 
222 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;own;&#32;i++)&#32;{
223 &#32;&#32;&#32;&#32;dst[i]&#32;=&#32;inputb[i];
224 &#32;&#32;}
225 }
226 
227 <emphasis class="keywordtype">void</emphasis>&#32;PreconditionerSweeping::init(
228 &#32;&#32;&#32;&#32;SolverControl,&#32;TrilinosWrappers::SparseMatrix&#32;*in_prec_upper,
229 &#32;&#32;&#32;&#32;TrilinosWrappers::SparseMatrix&#32;*in_prec_lower)&#32;{
230 &#32;&#32;deallog.push(<emphasis class="stringliteral">&quot;Init&#32;Preconditioner&quot;</emphasis>);
231 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Prepare&#32;Objects&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
232 &#32;&#32;solver&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;SparseDirectUMFPACK();
233 &#32;&#32;IndexSet&#32;local(matrix-&gt;m());
234 &#32;&#32;local.add_range(0,&#32;matrix-&gt;m());
235 &#32;&#32;dealii::SparsityPattern&#32;sparsity_pattern;
236 &#32;&#32;dealii::SparseMatrix&lt;double&gt;&#32;*temp;
237 &#32;&#32;<emphasis class="comment">//&#32;Main&#32;Matrix&#32;Preparation</emphasis>
238 
239 &#32;&#32;sparsity_pattern.reinit(own&#32;+&#32;others,&#32;own&#32;+&#32;others,&#32;bandwidth);
240 &#32;&#32;TrilinosWrappers::SparseMatrix::iterator&#32;it&#32;=&#32;matrix-&gt;begin();
241 &#32;&#32;TrilinosWrappers::SparseMatrix::iterator&#32;end&#32;=&#32;matrix-&gt;end();
242 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;it&#32;!=&#32;end;&#32;it++)&#32;{
243 &#32;&#32;&#32;&#32;sparsity_pattern.add(it-&gt;row(),&#32;it-&gt;column());
244 &#32;&#32;}
245 &#32;&#32;sparsity_pattern.compress();
246 
247 &#32;&#32;temp&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;dealii::SparseMatrix&lt;double&gt;(sparsity_pattern);
248 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Copy&#32;Matrix&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
249 &#32;&#32;temp-&gt;copy_from(*matrix);
250 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Factorize&#32;Matrix&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
251 &#32;&#32;solver-&gt;factorize(*temp);
252 &#32;&#32;std::cout&#32;&lt;&lt;&#32;this-&gt;rank&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;is&#32;done.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
253 &#32;&#32;temp-&gt;clear();
254 &#32;&#32;temp&#32;=&#32;0;
255 &#32;&#32;<emphasis class="comment">//&#32;Prec&#32;Matrix&#32;lower&#32;Preparation</emphasis>
256 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Prepare&#32;Lower&#32;Block&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
257 &#32;&#32;off_diag_block_lower.reinit(own,&#32;above,&#32;bandwidth);
258 
259 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(above&#32;!=&#32;0)&#32;{
260 &#32;&#32;&#32;&#32;it&#32;=&#32;in_prec_lower-&gt;begin();
261 &#32;&#32;&#32;&#32;end&#32;=&#32;in_prec_lower-&gt;end();
262 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;it&#32;!=&#32;end;&#32;it++)&#32;{
263 &#32;&#32;&#32;&#32;&#32;&#32;off_diag_block_lower.add(it-&gt;row(),&#32;it-&gt;column());
264 &#32;&#32;&#32;&#32;}
265 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
266 &#32;&#32;&#32;&#32;off_diag_block_lower.reinit(own,&#32;own,&#32;120);
267 &#32;&#32;&#32;&#32;it&#32;=&#32;in_prec_lower-&gt;begin();
268 &#32;&#32;&#32;&#32;end&#32;=&#32;in_prec_lower-&gt;end();
269 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;it&#32;!=&#32;end;&#32;it++)&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;off_diag_block_lower.add(it-&gt;row(),&#32;it-&gt;column());
271 &#32;&#32;&#32;&#32;}
272 &#32;&#32;}
273 &#32;&#32;off_diag_block_lower.compress();
274 
275 &#32;&#32;prec_matrix_lower&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;dealii::SparseMatrix&lt;double&gt;(off_diag_block_lower);
276 &#32;&#32;prec_matrix_lower-&gt;copy_from(*in_prec_lower);
277 
278 &#32;&#32;<emphasis class="comment">//&#32;Prec&#32;Matrix&#32;upper&#32;Preparation</emphasis>
279 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Prepare&#32;Upper&#32;Block&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
280 &#32;&#32;off_diag_block_upper.reinit(own,&#32;others,&#32;bandwidth);
281 
282 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(others&#32;!=&#32;0)&#32;{
283 &#32;&#32;&#32;&#32;it&#32;=&#32;in_prec_upper-&gt;begin();
284 &#32;&#32;&#32;&#32;end&#32;=&#32;in_prec_upper-&gt;end();
285 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;it&#32;!=&#32;end;&#32;it++)&#32;{
286 &#32;&#32;&#32;&#32;&#32;&#32;off_diag_block_upper.add(it-&gt;row(),&#32;it-&gt;column());
287 &#32;&#32;&#32;&#32;}
288 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
289 &#32;&#32;&#32;&#32;off_diag_block_upper.reinit(own,&#32;own,&#32;120);
290 &#32;&#32;&#32;&#32;it&#32;=&#32;in_prec_upper-&gt;begin();
291 &#32;&#32;&#32;&#32;end&#32;=&#32;in_prec_upper-&gt;end();
292 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;&#32;it&#32;!=&#32;end;&#32;it++)&#32;{
293 &#32;&#32;&#32;&#32;&#32;&#32;off_diag_block_upper.add(it-&gt;row(),&#32;it-&gt;column());
294 &#32;&#32;&#32;&#32;}
295 &#32;&#32;}
296 &#32;&#32;off_diag_block_upper.compress();
297 
298 &#32;&#32;prec_matrix_upper&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;dealii::SparseMatrix&lt;double&gt;(off_diag_block_upper);
299 &#32;&#32;prec_matrix_upper-&gt;copy_from(*in_prec_upper);
300 &#32;&#32;deallog.pop();
301 }
302 
<link linkend="class_preconditioner_sweeping_1a7206a488cc098c6626440571011e8aa5">303 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_preconditioner_sweeping_1a7206a488cc098c6626440571011e8aa5">PreconditionerSweeping::UpperProduct</link>(<emphasis class="keyword">const</emphasis>&#32;dealii::Vector&lt;double&gt;&#32;&amp;src,
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;&amp;dst)<emphasis class="keyword">&#32;const&#32;</emphasis>{
305 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)rank&#32;+&#32;1&#32;==&#32;GlobalParams.NumberProcesses)&#32;{
306 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;ERROR!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
307 &#32;&#32;}
308 
309 &#32;&#32;prec_matrix_upper-&gt;vmult(dst,&#32;src);
310 }
311 
<link linkend="class_preconditioner_sweeping_1aae4ff00d6f71c0cf176172905be08cff">312 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_preconditioner_sweeping_1aae4ff00d6f71c0cf176172905be08cff">PreconditionerSweeping::LowerProduct</link>(<emphasis class="keyword">const</emphasis>&#32;dealii::Vector&lt;double&gt;&#32;&amp;src,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;&amp;dst)<emphasis class="keyword">&#32;const&#32;</emphasis>{
314 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)rank&#32;==&#32;0)&#32;{
315 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;ERROR!&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
316 &#32;&#32;}
317 
318 &#32;&#32;prec_matrix_lower-&gt;vmult(dst,&#32;src);
319 }
320 
321 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
