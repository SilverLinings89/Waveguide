<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_preconditioner_sweeping">
<title>PreconditionerSweeping class Reference</title>
<para>
    <programlisting>#include <link linkend="_preconditioner_sweeping_8h">&lt;PreconditionerSweeping.h&gt;</link></programlisting>
</para>
        <section>
            <title>Public Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::TrilinosWrappers::SparseMatrix * matrix</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::SparseMatrix&lt; double &gt; * prec_matrix_upper</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::SparseMatrix&lt; double &gt; * prec_matrix_lower</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool fast</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int * indices</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int own</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int others</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::TrilinosWrappers::MPI::Vector itmp</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::TrilinosWrappers::MPI::Vector otmp</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::Vector&lt; double &gt; boundary</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>unsigned int sweepable</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::IndexSet locally_owned_dofs</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>dealii::IndexSet * fixed_dofs</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int rank</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int bandwidth</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>MPI_Comm mpi_comm</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int above</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_preconditioner_sweeping_1a0c478ccabe57765b5a923b1ef03878af">PreconditionerSweeping</link> (
MPI_Comm in_mpi_comm, int in_own, int in_others, int in_above, int bandwidth, dealii::IndexSet locally_owned, dealii::IndexSet * in_fixed_dofs, int rank, bool fast)<para><emphasis>This constructor is the only one that should be used at this time.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_preconditioner_sweeping_1a2a909cf562806c00c3ee7da474b88e17">~PreconditionerSweeping</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_preconditioner_sweeping_1a3e8229d9aca0e61ecab03196fe16ab7f">Hinv</link> (
const dealii::Vector&lt; double &gt; &amp; src, dealii::Vector&lt; double &gt; &amp; dst)<para><emphasis>For the application of the preconditioner we require the application of the
inverse of \form#11.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_preconditioner_sweeping_1aae4ff00d6f71c0cf176172905be08cff">LowerProduct</link> (
const dealii::Vector&lt; double &gt; &amp; src, dealii::Vector&lt; double &gt; &amp; dst)<para><emphasis>Cases in which we require multiplications with \form#13, are
where this function is used.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_preconditioner_sweeping_1a7206a488cc098c6626440571011e8aa5">UpperProduct</link> (
const dealii::Vector&lt; double &gt; &amp; src, dealii::Vector&lt; double &gt; &amp; dst)<para><emphasis>Cases in which we require multiplications with \form#14, are
where this function is used.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_preconditioner_sweeping_1aff2e2213fb5cd62f9062d9751e41c776">vmult</link> (
dealii::TrilinosWrappers::MPI::BlockVector &amp; dst, const dealii::TrilinosWrappers::MPI::BlockVector &amp; src)<para><emphasis>In order to be called by the iterative solver, this function has to be
overloaded.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_preconditioner_sweeping_1aa5ca83717ab0de29267b427de5225a53">vmult_fast</link> (
dealii::TrilinosWrappers::MPI::BlockVector &amp; dst, const dealii::TrilinosWrappers::MPI::BlockVector &amp; src)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_preconditioner_sweeping_1a01975d62d5a254d215a19a62077351c0">vmult_slow</link> (
dealii::TrilinosWrappers::MPI::BlockVector &amp; dst, const dealii::TrilinosWrappers::MPI::BlockVector &amp; src)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_preconditioner_sweeping_1a7042b2577f4cf76ec40007825d711390">Prepare</link> (
dealii::TrilinosWrappers::MPI::BlockVector &amp; src)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_preconditioner_sweeping_1a7652519828d361d49e1d703d0f180dd3">init</link> (
dealii::SolverControl in_sc, dealii::TrilinosWrappers::SparseMatrix * , dealii::TrilinosWrappers::SparseMatrix * )</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>This class implements the DealII preconditioner interface and offers a sweeping preconditioning mechanism. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Details can be found in the paper <link xlink:href="http://www.sciencedirect.com/science/article/pii/S0021999112000460">A sweeping preconditioner for time-harmonic Maxwellâ€™s equations with finite elements</link>. The general idea is as follows: Let <equation><title>form_0</title>$\Omega$</equation> be the computational domain (internally) truncated by an absorbing boundary condition. This domain can be split into layers along a direction (in our case <equation><title>form_1</title>$ z $</equation> and triangulated. We therefore have a triangulation spread across multiple processes. We chose the splitting such, that the degrees of freedom are ordered process-wise. Let <equation><title>form_2</title>$ K $</equation> be the number of Layers and <equation><title>form_3</title>$ T_i \quad \imath \in \{1,\ldots,K\} $</equation> the parts of the triangulation. For a PML function <equation><title>form_4</title>\[ \sigma_i (\xi) = \begin{cases} \theta \left(\frac{-1 +(i-1)l - \xi}{l} *\right)^2 \quad &amp;\xi \in [-1 + (i-2)l, -1 +(i-1)l] \\ 0,&amp; \xi \in [-1 + *(i-1)l, 1-l] \\ \Theta\left(\frac{\xi -1 +l}{l}\right)^2, &amp; \xi \in *[1-l,1]\end{cases} \]</equation> we now regard the problem <equation><title>form_5</title>\[ \nabla \times *\tilde{\mu}_{r,i}^{-1}\nabla \times \boldsymbol{E} - *\kappa^2\tilde{\epsilon}_{r,i}\boldsymbol{E} = 0 \quad \text{ in } *\mathrm{int} (\mathrm{T}_{i-1}\cup\mathrm{T}_i \]</equation> where</para>

<para>Described in words: We put a PML into the neighboring block of the block we want to precondition and setup the system matrix for this smaller problem. This matrix we can then invert and name the Operator <equation><title>form_6</title>$H_i^{-1}$</equation>. We then define the operator <equation><title>form_7</title>\[ S(\boldsymbol{v}) = P_{0,n_i}H_i^{-1} (\boldsymbol{v} *, \boldsymbol{0})) \]</equation> where <equation><title>form_8</title>$ P_{0,n_i} $</equation> describes the extraction of the first <equation><title>form_9</title>$ n_i $</equation> components. For the one block which has no neighbor the inverse of the block of the system matrix can be used. The inversion does not have to be performed numerically - a decomposition (performed by UMFPACK or MUMPS) is sufficient.</para>

<para><formalpara><title>Date: </title>

<para>28.11.2016 </para>
</formalpara>
<formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
</para>
                <para>Definition at line 59 of file PreconditionerSweeping.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>PreconditionerSweeping.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_preconditioner_sweeping_1a0c478ccabe57765b5a923b1ef03878af">
                <title>PreconditionerSweeping::PreconditionerSweeping (MPI_Comm in_mpi_comm, int in_own, int in_others, int in_above, int bandwidth, dealii::IndexSet locally_owned, dealii::IndexSet *in_fixed_dofs, int rank, bool fast)</title> <emphasis>This constructor is the only one that should be used at this time.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in_own</entry>
                                <entry>
<para>This is the number of degrees of freedom that the current process has to deal with (owned). </para>
</entry>
                            </row>
                            <row>
                                <entry>in_others</entry>
                                <entry>
<para>This is the number of degrees of freedom that the process below has. Every process has to deal with one other process. The other neighbor only contacts it for a multiplication with its own matrix block - in this case, no objects of unknown size are concerned. However: for the one process that does require more contact needs a vector tp be initialized. This vectors size is this int. </para>
</entry>
                            </row>
                            <row>
                                <entry>bandwidth</entry>
                                <entry>
<para>The number of dofs per line on average is required for the construction of matrices. </para>
</entry>
                            </row>
                            <row>
                                <entry>locally_owned</entry>
                                <entry>
<para>The degrees of freedom associated with the current process. Required for vector and matrix construction. </para>
</entry>
                            </row>
                            <row>
                                <entry>dampening_parameter</entry>
                                <entry>
<para>If set to zero, no dampening is used. Otherwise, dampening according to (3.10) in the sweeping preconditioner paper is used. Thi solves the equation <equation><title>form_10</title>\[ \nabla \times \tilde{\mu}^{-1}\nabla \times \boldsymbol{E} - (\kappa + i \alpha)^2 \tilde{\epsilon}\boldsymbol{E} = 0 \]</equation> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_preconditioner_sweeping_1a2a909cf562806c00c3ee7da474b88e17">
                <title>PreconditionerSweeping::~PreconditionerSweeping ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_preconditioner_sweeping_1a3e8229d9aca0e61ecab03196fe16ab7f">
                <title>void PreconditionerSweeping::Hinv (const dealii::Vector&lt; double &gt; &amp;src, dealii::Vector&lt; double &gt; &amp;dst) const</title> <emphasis>For the application of the preconditioner we require the application of the
inverse of \form#11.</emphasis>
                
<para>This is implemented in this function. (The mathematical usage is included in lines 2, 6 and 13 and indirectly in every use of the Operator <equation><title>form_12</title>$S$</equation>. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>src</entry>
                                <entry>
<para>This is the vector to be multiplied by <equation><title>form_6</title>$H_i^{-1}$</equation>. </para>
</entry>
                            </row>
                            <row>
                                <entry>dst</entry>
                                <entry>
<para>This is the vector to store the result in. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_preconditioner_sweeping_1aae4ff00d6f71c0cf176172905be08cff">
                <title>void PreconditionerSweeping::LowerProduct (const dealii::Vector&lt; double &gt; &amp;src, dealii::Vector&lt; double &gt; &amp;dst) const</title> <emphasis>Cases in which we require multiplications with \form#13, are
where this function is used.</emphasis>
                
<para>See algorithm lines 2 and 4. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>src</entry>
                                <entry>
<para>This is the vector to be multiplied by <equation><title>form_13</title>$A(E_{i+1}, E_i)$</equation>. </para>
</entry>
                            </row>
                            <row>
                                <entry>dst</entry>
                                <entry>
<para>This is the vector to store the result in. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_preconditioner_sweeping_1a7206a488cc098c6626440571011e8aa5">
                <title>void PreconditionerSweeping::UpperProduct (const dealii::Vector&lt; double &gt; &amp;src, dealii::Vector&lt; double &gt; &amp;dst) const</title> <emphasis>Cases in which we require multiplications with \form#14, are
where this function is used.</emphasis>
                
<para>See algorithm lines 11 and 13. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>src</entry>
                                <entry>
<para>This is the vector to be multiplied by <equation><title>form_14</title>$A(E_i, E_{i+1})$</equation>. </para>
</entry>
                            </row>
                            <row>
                                <entry>dst</entry>
                                <entry>
<para>This is the vector to store the result in. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_preconditioner_sweeping_1aff2e2213fb5cd62f9062d9751e41c776">
                <title>void PreconditionerSweeping::vmult (dealii::TrilinosWrappers::MPI::BlockVector &amp;dst, const dealii::TrilinosWrappers::MPI::BlockVector &amp;src) const</title> <emphasis>In order to be called by the iterative solver, this function has to be
overloaded.</emphasis>
                
<para>It gets called from GMRES and is the core function which contains the implementation. For a description of the interface, see the implementation in the base class. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dst</entry>
                                <entry>
<para>The vector to store the result in. </para>
</entry>
                            </row>
                            <row>
                                <entry>src</entry>
                                <entry>
<para>The vector to be multiplied by the approximate inverse. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_preconditioner_sweeping_1aa5ca83717ab0de29267b427de5225a53">
                <title>void PreconditionerSweeping::vmult_fast (dealii::TrilinosWrappers::MPI::BlockVector &amp;dst, const dealii::TrilinosWrappers::MPI::BlockVector &amp;src) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_preconditioner_sweeping_1a01975d62d5a254d215a19a62077351c0">
                <title>void PreconditionerSweeping::vmult_slow (dealii::TrilinosWrappers::MPI::BlockVector &amp;dst, const dealii::TrilinosWrappers::MPI::BlockVector &amp;src) const</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_preconditioner_sweeping_1a7042b2577f4cf76ec40007825d711390">
                <title>void PreconditionerSweeping::Prepare (dealii::TrilinosWrappers::MPI::BlockVector &amp;src)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_preconditioner_sweeping_1a7652519828d361d49e1d703d0f180dd3">
                <title>void PreconditionerSweeping::init (dealii::SolverControl in_sc, dealii::TrilinosWrappers::SparseMatrix *, dealii::TrilinosWrappers::SparseMatrix *)</title> <emphasis></emphasis>
                
            </section>
</section>
