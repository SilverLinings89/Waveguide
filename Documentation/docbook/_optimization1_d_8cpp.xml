<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_optimization1_d_8cpp">
    <title>Optimization1D.cpp File Reference</title>
    <programlisting>#include &quot;Optimization1D.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_optimization1_d_8cpp_1a7697f66033ea7a418c0f1944adb7dba0">OPTIMIZATION_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/OptimizationAlgorithm/Optimization1D.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;OPTIMIZATION_CPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;OPTIMIZATION_CPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;Optimization1D.h&quot;</emphasis>
5 
6 Optimization1D::Optimization1D()&#32;{
7 &#32;&#32;steps_widths&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>[11];
8 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;start&#32;=&#32;0.0001;
9 &#32;&#32;<emphasis class="comment">//&#32;if(STEPS_PER_DOFS&#32;==&#32;1)&#32;{</emphasis>
10 &#32;&#32;<emphasis class="comment">//&#32;&#32;steps_widths[0]&#32;=&#32;start;</emphasis>
11 &#32;&#32;<emphasis class="comment">//}&#32;else&#32;{</emphasis>
12 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;STEPS_PER_DOFS;&#32;i++)&#32;{
13 &#32;&#32;&#32;&#32;steps_widths[i]&#32;=&#32;start&#32;*&#32;pow(2,&#32;i);
14 &#32;&#32;}
15 &#32;&#32;<emphasis class="comment">//&#32;for(int&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;STEPS_PER_DOFS/2;&#32;i++){</emphasis>
16 &#32;&#32;<emphasis class="comment">//&#32;&#32;&#32;&#32;&#32;steps_widths[STEPS_PER_DOFS/2&#32;+&#32;i]&#32;=&#32;-steps_widths[i];</emphasis>
17 &#32;&#32;<emphasis class="comment">//&#32;}</emphasis>
18 &#32;&#32;<emphasis class="comment">//}</emphasis>
19 }
20 
21 Optimization1D::~Optimization1D()&#32;{&#32;<emphasis class="keyword">delete</emphasis>&#32;steps_widths;&#32;}
22 
<link linkend="class_optimization1_d_1ad5dd75f9d24d681050f471fbfb8b74e2">23 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_optimization1_d_1ad5dd75f9d24d681050f471fbfb8b74e2">Optimization1D::perform_small_step_next</link>(<emphasis class="keywordtype">int</emphasis>&#32;small_steps_before)&#32;{
24 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(residuals.size()&#32;==&#32;0&#32;&amp;&amp;&#32;states.size()&#32;==&#32;0)&#32;{
25 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
26 &#32;&#32;}
27 
28 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(small_steps_before&#32;&lt;&#32;STEPS_PER_DOFS)&#32;{
29 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
30 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
31 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
32 &#32;&#32;}
33 }
34 
<link linkend="class_optimization1_d_1ad458c8235115a9a8dac013afe6b8d484">35 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_optimization1_d_1ad458c8235115a9a8dac013afe6b8d484">Optimization1D::get_small_step_step_width</link>(<emphasis class="keywordtype">int</emphasis>&#32;small_steps_before)&#32;{
36 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(small_steps_before&#32;&lt;&#32;STEPS_PER_DOFS&#32;&amp;&amp;&#32;small_steps_before&#32;&gt;=&#32;0)&#32;{
37 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;steps_widths[small_steps_before];
38 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
39 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Warning&#32;in&#32;Optimization1D::get_small_step_step_width(int)&quot;</emphasis>
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
41 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1.0;
42 &#32;&#32;}
43 }
44 
<link linkend="class_optimization1_d_1a2084077506e3b4a7432c74406f6598f1">45 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_optimization1_d_1a2084077506e3b4a7432c74406f6598f1">Optimization1D::perform_big_step_next</link>(<emphasis class="keywordtype">int</emphasis>&#32;small_steps_before)&#32;{
46 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(residuals.size()&#32;==&#32;0&#32;&amp;&amp;&#32;states.size()&#32;==&#32;0)&#32;{
47 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
48 &#32;&#32;}
49 
50 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;(small_steps_before&#32;&gt;=&#32;STEPS_PER_DOFS);
51 }
52 
<link linkend="class_optimization1_d_1ae6a70b42abbe7231ddc7974f3cf42837">53 </link>std::vector&lt;double&gt;&#32;<link linkend="class_optimization1_d_1ae6a70b42abbe7231ddc7974f3cf42837">Optimization1D::get_big_step_configuration</link>()&#32;{
54 &#32;&#32;std::vector&lt;double&gt;&#32;ret;
55 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(residuals.size()&#32;==&#32;0&#32;&amp;&amp;&#32;states.size()&#32;==&#32;0)&#32;{
56 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
57 &#32;&#32;}
58 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;small_step_count&#32;=&#32;states.size();
59 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;big_step_count&#32;=&#32;residuals.size();
60 
61 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(big_step_count&#32;==&#32;0&#32;||
62 &#32;&#32;&#32;&#32;&#32;&#32;(small_step_count&#32;!=&#32;STEPS_PER_DOFS&#32;*&#32;big_step_count))&#32;{
63 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Warning&#32;in&#32;Optimization1D::get_big_step_configuration()&quot;</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
65 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
66 &#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;residual&#32;=&#32;residuals[big_step_count&#32;-&#32;1];
67 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;state_red&#32;=&#32;std::abs(residual);
68 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ndofs&#32;=&#32;states[small_step_count&#32;-&#32;1].size();
69 &#32;&#32;&#32;&#32;ret.resize(ndofs);
70 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;max&#32;=&#32;0;
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;index&#32;=&#32;-1;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;STEPS_PER_DOFS;&#32;j++)&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;magn&#32;=&#32;std::abs(
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;residual&#32;+&#32;states[small_step_count&#32;-&#32;STEPS_PER_DOFS&#32;+&#32;j][i]);
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(magn&#32;&gt;&#32;max&#32;&amp;&amp;&#32;magn&#32;&gt;&#32;state_red)&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max&#32;=&#32;magn;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;=&#32;j;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
80 &#32;&#32;&#32;&#32;&#32;&#32;}
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(index&#32;!=&#32;-1)&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[i]&#32;=&#32;steps_widths[index];
83 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[i]&#32;=&#32;0.0;
85 &#32;&#32;&#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;}
87 &#32;&#32;}
88 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
89 }
90 
91 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
