<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_shape_description_8cpp">
    <title>ShapeDescription.cpp File Reference</title>
    <programlisting>#include &quot;ShapeDescription.h&quot;</programlisting>
    <programlisting>#include &lt;string&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &lt;stdio.h&gt;</programlisting>
    <programlisting>#include &lt;iostream&gt;</programlisting>
    <programlisting>#include &lt;sstream&gt;</programlisting>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Helpers/ShapeDescription.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*</emphasis>
2 <emphasis class="comment">&#32;*&#32;ShapeDescription.cpp</emphasis>
3 <emphasis class="comment">&#32;*</emphasis>
4 <emphasis class="comment">&#32;*&#32;&#32;Created&#32;on:&#32;Feb&#32;9,&#32;2018</emphasis>
5 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;Author:&#32;kraft</emphasis>
6 <emphasis class="comment">&#32;*/</emphasis>
7 
8 <emphasis class="preprocessor">#include&#32;&quot;ShapeDescription.h&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;string&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
14 
15 
16 ShapeDescription::ShapeDescription()
17 {
18 
19 }
20 
21 ShapeDescription::~ShapeDescription()
22 {
23 
24 }
25 
26 <emphasis class="keywordtype">void</emphasis>&#32;ShapeDescription::SetByString(std::string&#32;str)&#32;{
27 &#32;&#32;std::vector&lt;std::string&gt;&#32;ret;
28 &#32;&#32;std::istringstream&#32;iss(str);
29 &#32;&#32;std::string&#32;token;
30 &#32;&#32;std::getline(iss,&#32;token,&#32;<emphasis class="charliteral">&apos;,&apos;</emphasis>);
31 &#32;&#32;Sectors&#32;=&#32;std::stoi(token);
32 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;
33 &#32;&#32;<emphasis class="keywordflow">for</emphasis>(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Sectors;&#32;i++)&#32;{
34 &#32;&#32;&#32;&#32;std::getline(iss,&#32;token,&#32;<emphasis class="charliteral">&apos;,&apos;</emphasis>);
35 &#32;&#32;&#32;&#32;z.push_back(std::stod(token));
36 &#32;&#32;}
37 &#32;&#32;<emphasis class="keywordflow">for</emphasis>(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Sectors;&#32;i++)&#32;{
38 &#32;&#32;&#32;&#32;std::getline(iss,&#32;token,&#32;<emphasis class="charliteral">&apos;,&apos;</emphasis>);
39 &#32;&#32;&#32;&#32;m.push_back(std::stod(token));
40 &#32;&#32;}
41 &#32;&#32;<emphasis class="keywordflow">for</emphasis>(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;Sectors;&#32;i++)&#32;{
42 &#32;&#32;&#32;&#32;std::getline(iss,&#32;token,&#32;<emphasis class="charliteral">&apos;,&apos;</emphasis>);
43 &#32;&#32;&#32;&#32;v.push_back(std::stod(token));
44 &#32;&#32;}
45 }
46 
    </computeroutput></literallayout>
</section>
