<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_homogenous_transformation_circular_8h">
    <title>HomogenousTransformationCircular.h File Reference</title>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &lt;math.h&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &quot;../Core/Sector.h&quot;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
    <programlisting>#include &quot;SpaceTransformation.h&quot;</programlisting>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_homogenous_transformation_circular">HomogenousTransformationCircular</link></para>
<para><emphasis>For this transformation we try to achieve a situation in which
tensorial material properties from the coordinate transformation and
PML-regions dont overlap.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/HomogenousTransformationCircular.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;HomogenousTransformationCircularFlag</emphasis>
2 <emphasis class="preprocessor">#define&#32;HomogenousTransformationCircularFlag</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
9 
10 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
13 <emphasis class="preprocessor">#include&#32;&quot;../Core/Sector.h&quot;</emphasis>
14 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
15 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
16 <emphasis class="preprocessor">#include&#32;&quot;SpaceTransformation.h&quot;</emphasis>
17 
18 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
19 <emphasis class="comment"></emphasis>
20 <emphasis class="comment">/**</emphasis>
21 <emphasis class="comment">&#32;*&#32;\class&#32;HomogenousTransformationCircular</emphasis>
22 <emphasis class="comment">&#32;*&#32;\brief&#32;For&#32;this&#32;transformation&#32;we&#32;try&#32;to&#32;achieve&#32;a&#32;situation&#32;in&#32;which</emphasis>
23 <emphasis class="comment">&#32;*&#32;tensorial&#32;material&#32;properties&#32;from&#32;the&#32;coordinate&#32;transformation&#32;and</emphasis>
24 <emphasis class="comment">&#32;*&#32;PML-regions&#32;dont&#32;overlap.</emphasis>
25 <emphasis class="comment">&#32;*</emphasis>
26 <emphasis class="comment">&#32;*&#32;The&#32;usage&#32;of&#32;a&#32;coordinate&#32;transformation&#32;which&#32;is&#32;identity&#32;on&#32;the&#32;domain</emphasis>
27 <emphasis class="comment">&#32;*&#32;containing&#32;our&#32;PML&#32;is&#32;a&#32;strong&#32;restriction&#32;however&#32;it&#32;ensures&#32;lower&#32;errors</emphasis>
28 <emphasis class="comment">&#32;*&#32;since&#32;the&#32;quality&#32;of&#32;the&#32;PML&#32;is&#32;harder&#32;to&#32;estimate&#32;otherwise.&#32;Also&#32;it&#32;limits</emphasis>
29 <emphasis class="comment">&#32;*&#32;us&#32;in&#32;how&#32;we&#32;model&#32;the&#32;waveguide&#32;essentially&#32;forcing&#32;us&#32;to&#32;have&#32;no&#32;bent</emphasis>
30 <emphasis class="comment">&#32;*&#32;between&#32;the&#32;wavguides-connectors.&#32;\author&#32;Pascal&#32;Kraft&#32;\date&#32;28.11.2016</emphasis>
31 <emphasis class="comment">&#32;*/</emphasis>
32 
<link linkend="class_homogenous_transformation_circular">33 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_homogenous_transformation_circular">HomogenousTransformationCircular</link>&#32;:&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;{
34 &#32;<emphasis class="keyword">public</emphasis>:
35 &#32;&#32;<link linkend="class_homogenous_transformation_circular">HomogenousTransformationCircular</link>(<emphasis class="keywordtype">int</emphasis>);
36 
37 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;~<link linkend="class_homogenous_transformation_circular">HomogenousTransformationCircular</link>();
38 
39 &#32;&#32;Point&lt;3&gt;&#32;math_to_phys(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
40 
41 &#32;&#32;Point&lt;3&gt;&#32;phys_to_math(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
42 
43 &#32;&#32;Point&lt;3&gt;&#32;math_to_phys_hom(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
44 
45 &#32;&#32;Point&lt;3&gt;&#32;phys_to_math_hom(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
46 
47 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;is_identity(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
48 
49 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Tensor(Point&lt;3&gt;&#32;&amp;coordinate)&#32;<emphasis class="keyword">const</emphasis>;
50 
51 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Preconditioner_Tensor(
52 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
53 
54 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor(
55 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;Tensor_input)&#32;<emphasis class="keyword">const</emphasis>;
56 
57 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor_For_Preconditioner(
58 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;Tensor_input,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
59 
60 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;get_Space_Transformation_Tensor(
61 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate)&#32;<emphasis class="keyword">const</emphasis>;
62 
63 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;get_Space_Transformation_Tensor_Homogenized(
64 &#32;&#32;&#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;coordinate)&#32;<emphasis class="keyword">const</emphasis>;
65 
66 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;XMinus,&#32;XPlus,&#32;YMinus,&#32;YPlus,&#32;ZMinus,&#32;ZPlus;
67 <emphasis class="comment"></emphasis>
68 <emphasis class="comment">&#32;&#32;/**</emphasis>
69 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a</emphasis>
70 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the</emphasis>
71 <emphasis class="comment">&#32;&#32;&#32;*&#32;x-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3</emphasis>
72 <emphasis class="comment">&#32;&#32;&#32;*&#32;functions.&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for</emphasis>
73 <emphasis class="comment">&#32;&#32;&#32;*&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
74 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
75 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;PML_in_X(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>;
76 <emphasis class="comment"></emphasis>
77 <emphasis class="comment">&#32;&#32;/**</emphasis>
78 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a</emphasis>
79 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the</emphasis>
80 <emphasis class="comment">&#32;&#32;&#32;*&#32;y-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3</emphasis>
81 <emphasis class="comment">&#32;&#32;&#32;*&#32;functions.&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for</emphasis>
82 <emphasis class="comment">&#32;&#32;&#32;*&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
83 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
84 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;PML_in_Y(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>;
85 <emphasis class="comment"></emphasis>
86 <emphasis class="comment">&#32;&#32;/**</emphasis>
87 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a</emphasis>
88 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the</emphasis>
89 <emphasis class="comment">&#32;&#32;&#32;*&#32;z-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3</emphasis>
90 <emphasis class="comment">&#32;&#32;&#32;*&#32;functions.&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for</emphasis>
91 <emphasis class="comment">&#32;&#32;&#32;*&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
92 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
93 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;PML_in_Z(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>;
94 <emphasis class="comment"></emphasis>
95 <emphasis class="comment">&#32;&#32;/**</emphasis>
96 <emphasis class="comment">&#32;&#32;&#32;*&#32;Similar&#32;to&#32;the&#32;PML_in_Z&#32;only&#32;this&#32;function&#32;is&#32;used&#32;to&#32;generate&#32;the</emphasis>
97 <emphasis class="comment">&#32;&#32;&#32;*&#32;artificial&#32;PML&#32;used&#32;in&#32;the&#32;Preconditioner.&#32;These&#32;Layers&#32;are&#32;not&#32;only</emphasis>
98 <emphasis class="comment">&#32;&#32;&#32;*&#32;situated&#32;at&#32;the&#32;surface&#32;of&#32;the&#32;computational&#32;domain&#32;but&#32;also&#32;inside&#32;it&#32;at</emphasis>
99 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;interfaces&#32;of&#32;Sectors.</emphasis>
100 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
101 &#32;&#32;<emphasis class="comment">//&#32;bool&#32;Preconditioner_PML_in_Z(Point&lt;3&gt;&#32;&amp;p,&#32;unsigned&#32;int&#32;block)&#32;const;</emphasis>
102 <emphasis class="comment"></emphasis>
103 <emphasis class="comment">&#32;&#32;/**</emphasis>
104 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;fulfills&#32;the&#32;same&#32;purpose&#32;as&#32;those&#32;with&#32;similar&#32;names&#32;but&#32;it</emphasis>
105 <emphasis class="comment">&#32;&#32;&#32;*&#32;is&#32;supposed&#32;to&#32;be&#32;used&#32;together&#32;with&#32;Preconditioner_PML_in_Z&#32;instead&#32;of&#32;the</emphasis>
106 <emphasis class="comment">&#32;&#32;&#32;*&#32;versions&#32;without&#32;&quot;Preconditioner&quot;.</emphasis>
107 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
108 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Preconditioner_PML_Z_Distance(Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
109 <emphasis class="comment"></emphasis>
110 <emphasis class="comment">&#32;&#32;/**</emphasis>
111 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary</emphasis>
112 <emphasis class="comment">&#32;&#32;&#32;*&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make</emphasis>
113 <emphasis class="comment">&#32;&#32;&#32;*&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions</emphasis>
114 <emphasis class="comment">&#32;&#32;&#32;*&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the</emphasis>
115 <emphasis class="comment">&#32;&#32;&#32;*&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive</emphasis>
116 <emphasis class="comment">&#32;&#32;&#32;*&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).&#32;\param&#32;position</emphasis>
117 <emphasis class="comment">&#32;&#32;&#32;*&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the</emphasis>
118 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-surface.</emphasis>
119 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
120 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;PML_X_Distance(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>;
121 <emphasis class="comment"></emphasis>
122 <emphasis class="comment">&#32;&#32;/**</emphasis>
123 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary</emphasis>
124 <emphasis class="comment">&#32;&#32;&#32;*&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make</emphasis>
125 <emphasis class="comment">&#32;&#32;&#32;*&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions</emphasis>
126 <emphasis class="comment">&#32;&#32;&#32;*&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the</emphasis>
127 <emphasis class="comment">&#32;&#32;&#32;*&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive</emphasis>
128 <emphasis class="comment">&#32;&#32;&#32;*&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).&#32;\param&#32;position</emphasis>
129 <emphasis class="comment">&#32;&#32;&#32;*&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the</emphasis>
130 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-surface.</emphasis>
131 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
132 
133 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;PML_Y_Distance(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>;<emphasis class="comment"></emphasis>
134 <emphasis class="comment">&#32;&#32;/**</emphasis>
135 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary</emphasis>
136 <emphasis class="comment">&#32;&#32;&#32;*&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make</emphasis>
137 <emphasis class="comment">&#32;&#32;&#32;*&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions</emphasis>
138 <emphasis class="comment">&#32;&#32;&#32;*&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the</emphasis>
139 <emphasis class="comment">&#32;&#32;&#32;*&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive</emphasis>
140 <emphasis class="comment">&#32;&#32;&#32;*&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).&#32;\param&#32;position</emphasis>
141 <emphasis class="comment">&#32;&#32;&#32;*&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the</emphasis>
142 <emphasis class="comment">&#32;&#32;&#32;*&#32;PML-surface.</emphasis>
143 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
144 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;PML_Z_Distance(Point&lt;3&gt;&#32;&amp;position)&#32;<emphasis class="keyword">const</emphasis>;
145 <emphasis class="comment"></emphasis>
146 <emphasis class="comment">&#32;&#32;/**</emphasis>
147 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;contains&#32;all&#32;the&#32;Sectors&#32;who,&#32;as&#32;a&#32;sum,&#32;form&#32;the&#32;complete</emphasis>
148 <emphasis class="comment">&#32;&#32;&#32;*&#32;Waveguide.&#32;These&#32;Sectors&#32;are&#32;a&#32;partition&#32;of&#32;the&#32;simulated&#32;domain.</emphasis>
149 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_circular_1ad3bef3a9732db995720a3329497ad8e9">150 </link>&#32;&#32;std::vector&lt;Sector&lt;3&gt;&gt;&#32;<link linkend="class_homogenous_transformation_circular_1ad3bef3a9732db995720a3329497ad8e9">case_sectors</link>;
151 <emphasis class="comment"></emphasis>
152 <emphasis class="comment">&#32;&#32;/**</emphasis>
153 <emphasis class="comment">&#32;&#32;&#32;*&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and</emphasis>
154 <emphasis class="comment">&#32;&#32;&#32;*&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;inside&#32;the</emphasis>
155 <emphasis class="comment">&#32;&#32;&#32;*&#32;core.</emphasis>
156 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_circular_1aaa4c185a9d44e041229d3f1f399c103b">157 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_homogenous_transformation_circular_1aaa4c185a9d44e041229d3f1f399c103b">epsilon_K</link>;<emphasis class="comment"></emphasis>
158 <emphasis class="comment">&#32;&#32;/**</emphasis>
159 <emphasis class="comment">&#32;&#32;&#32;*&#32;&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and</emphasis>
160 <emphasis class="comment">&#32;&#32;&#32;*&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;outside&#32;the</emphasis>
161 <emphasis class="comment">&#32;&#32;&#32;*&#32;core.</emphasis>
162 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_circular_1ae015570f0cb96cd45404c808952182ac">163 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_homogenous_transformation_circular_1ae015570f0cb96cd45404c808952182ac">epsilon_M</link>;<emphasis class="comment"></emphasis>
164 <emphasis class="comment">&#32;&#32;/**</emphasis>
165 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;the&#32;computational&#32;domain&#32;is&#32;split&#32;into&#32;subdomains&#32;(called&#32;sectors),</emphasis>
166 <emphasis class="comment">&#32;&#32;&#32;*&#32;it&#32;is&#32;important&#32;to&#32;keep&#32;track&#32;of&#32;the&#32;amount&#32;of&#32;subdomains.&#32;This&#32;member</emphasis>
167 <emphasis class="comment">&#32;&#32;&#32;*&#32;stores&#32;the&#32;number&#32;of&#32;Sectors&#32;the&#32;computational&#32;domain&#32;has&#32;been&#32;split&#32;into.</emphasis>
168 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_circular_1ad22b89f3468dd51770855d6a75338dbd">169 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_homogenous_transformation_circular_1ad22b89f3468dd51770855d6a75338dbd">sectors</link>;
170 <emphasis class="comment"></emphasis>
171 <emphasis class="comment">&#32;&#32;/**</emphasis>
172 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;initialized&#32;with&#32;the&#32;value&#32;Delta&#32;from&#32;the&#32;input-file.</emphasis>
173 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_circular_1acbfe8100ec5265c027289dba874d7593">174 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_homogenous_transformation_circular_1acbfe8100ec5265c027289dba874d7593">deltaY</link>;
175 <emphasis class="comment"></emphasis>
176 <emphasis class="comment">&#32;&#32;/**</emphasis>
177 <emphasis class="comment">&#32;&#32;&#32;*&#32;At&#32;the&#32;beginning&#32;(before&#32;the&#32;first&#32;solution&#32;of&#32;a&#32;system)&#32;only&#32;the&#32;boundary</emphasis>
178 <emphasis class="comment">&#32;&#32;&#32;*&#32;conditions&#32;for&#32;the&#32;shape&#32;of&#32;the&#32;waveguide&#32;are&#32;known.&#32;Therefore&#32;the&#32;values</emphasis>
179 <emphasis class="comment">&#32;&#32;&#32;*&#32;for&#32;the&#32;degrees&#32;of&#32;freedom&#32;need&#32;to&#32;be&#32;estimated.&#32;This&#32;function&#32;sets&#32;all</emphasis>
180 <emphasis class="comment">&#32;&#32;&#32;*&#32;variables&#32;to&#32;appropiate&#32;values&#32;and&#32;estimates&#32;an&#32;appropriate&#32;shape&#32;based&#32;on</emphasis>
181 <emphasis class="comment">&#32;&#32;&#32;*&#32;averages&#32;and&#32;a&#32;polynomial&#32;interpolation&#32;of&#32;the&#32;boundary&#32;conditions&#32;on&#32;the</emphasis>
182 <emphasis class="comment">&#32;&#32;&#32;*&#32;shape.</emphasis>
183 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
184 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;estimate_and_initialize();
185 <emphasis class="comment"></emphasis>
186 <emphasis class="comment">&#32;&#32;/**</emphasis>
187 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q1&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.</emphasis>
188 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in</emphasis>
189 <emphasis class="comment">&#32;&#32;&#32;*&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates</emphasis>
190 <emphasis class="comment">&#32;&#32;&#32;*&#32;(physical&#32;field).&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q1&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and</emphasis>
191 <emphasis class="comment">&#32;&#32;&#32;*&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the</emphasis>
192 <emphasis class="comment">&#32;&#32;&#32;*&#32;function.</emphasis>
193 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
194 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_Q1(<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
195 <emphasis class="comment"></emphasis>
196 <emphasis class="comment">&#32;&#32;/**</emphasis>
197 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q2&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.</emphasis>
198 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in</emphasis>
199 <emphasis class="comment">&#32;&#32;&#32;*&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates</emphasis>
200 <emphasis class="comment">&#32;&#32;&#32;*&#32;(physical&#32;field).&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q2&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and</emphasis>
201 <emphasis class="comment">&#32;&#32;&#32;*&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the</emphasis>
202 <emphasis class="comment">&#32;&#32;&#32;*&#32;function.</emphasis>
203 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
204 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_Q2(<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
205 <emphasis class="comment"></emphasis>
206 <emphasis class="comment">&#32;&#32;/**</emphasis>
207 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q3&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.</emphasis>
208 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in</emphasis>
209 <emphasis class="comment">&#32;&#32;&#32;*&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates</emphasis>
210 <emphasis class="comment">&#32;&#32;&#32;*&#32;(physical&#32;field).&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q3&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and</emphasis>
211 <emphasis class="comment">&#32;&#32;&#32;*&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the</emphasis>
212 <emphasis class="comment">&#32;&#32;&#32;*&#32;function.</emphasis>
213 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
214 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_Q3(<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
215 <emphasis class="comment"></emphasis>
216 <emphasis class="comment">&#32;&#32;/**</emphasis>
217 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter</emphasis>
218 <emphasis class="comment">&#32;&#32;&#32;*&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically</emphasis>
219 <emphasis class="comment">&#32;&#32;&#32;*&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from</emphasis>
220 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;domain&#32;of&#32;possible&#32;cases.&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom</emphasis>
221 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.&#32;\return&#32;This</emphasis>
222 <emphasis class="comment">&#32;&#32;&#32;*&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this</emphasis>
223 <emphasis class="comment">&#32;&#32;&#32;*&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
224 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
225 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>;
226 <emphasis class="comment"></emphasis>
227 <emphasis class="comment">&#32;&#32;/**</emphasis>
228 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is</emphasis>
229 <emphasis class="comment">&#32;&#32;&#32;*&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of</emphasis>
230 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the</emphasis>
231 <emphasis class="comment">&#32;&#32;&#32;*&#32;input-connector&#32;cannot&#32;be&#32;changed).&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter</emphasis>
232 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;changed.&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
233 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
234 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;set_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value);
235 <emphasis class="comment"></emphasis>
236 <emphasis class="comment">&#32;&#32;/**</emphasis>
237 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter</emphasis>
238 <emphasis class="comment">&#32;&#32;&#32;*&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically</emphasis>
239 <emphasis class="comment">&#32;&#32;&#32;*&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from</emphasis>
240 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;domain&#32;of&#32;possible&#32;cases.&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom</emphasis>
241 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.&#32;\return&#32;This</emphasis>
242 <emphasis class="comment">&#32;&#32;&#32;*&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this</emphasis>
243 <emphasis class="comment">&#32;&#32;&#32;*&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
244 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
245 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_free_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>;
246 <emphasis class="comment"></emphasis>
247 <emphasis class="comment">&#32;&#32;/**</emphasis>
248 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is</emphasis>
249 <emphasis class="comment">&#32;&#32;&#32;*&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of</emphasis>
250 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the</emphasis>
251 <emphasis class="comment">&#32;&#32;&#32;*&#32;input-connector&#32;cannot&#32;be&#32;changed).&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter</emphasis>
252 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;be&#32;changed.&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
253 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
254 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;set_free_dof(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value);
255 <emphasis class="comment"></emphasis>
256 <emphasis class="comment">&#32;&#32;/**</emphasis>
257 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;complete&#32;length&#32;of&#32;the&#32;computational&#32;domain.</emphasis>
258 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
259 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;System_Length()&#32;<emphasis class="keyword">const</emphasis>;
260 <emphasis class="comment"></emphasis>
261 <emphasis class="comment">&#32;&#32;/**</emphasis>
262 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;sector</emphasis>
263 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
264 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Sector_Length()&#32;<emphasis class="keyword">const</emphasis>;
265 <emphasis class="comment"></emphasis>
266 <emphasis class="comment">&#32;&#32;/**</emphasis>
267 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;layer</emphasis>
268 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
269 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Layer_Length()&#32;<emphasis class="keyword">const</emphasis>;
270 <emphasis class="comment"></emphasis>
271 <emphasis class="comment">&#32;&#32;/**</emphasis>
272 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;radius&#32;for&#32;a&#32;system-coordinate;</emphasis>
273 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
274 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_r(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
275 <emphasis class="comment"></emphasis>
276 <emphasis class="comment">&#32;&#32;/**</emphasis>
277 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;shift&#32;for&#32;a&#32;system-coordinate;</emphasis>
278 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
279 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_m(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
280 <emphasis class="comment"></emphasis>
281 <emphasis class="comment">&#32;&#32;/**</emphasis>
282 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;tilt&#32;for&#32;a&#32;system-coordinate;</emphasis>
283 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
284 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_v(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
285 <emphasis class="comment"></emphasis>
286 <emphasis class="comment">&#32;&#32;/**</emphasis>
287 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;vector&#32;of&#32;values&#32;saves&#32;the&#32;initial&#32;configuration</emphasis>
288 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_circular_1a04a1d660016c123007eca13f255b183b">289 </link>&#32;&#32;Vector&lt;double&gt;&#32;<link linkend="class_homogenous_transformation_circular_1a04a1d660016c123007eca13f255b183b">InitialDofs</link>;
290 <emphasis class="comment"></emphasis>
291 <emphasis class="comment">&#32;&#32;/**</emphasis>
292 <emphasis class="comment">&#32;&#32;&#32;*&#32;Other&#32;objects&#32;can&#32;use&#32;this&#32;function&#32;to&#32;retrieve&#32;an&#32;array&#32;of&#32;the&#32;current</emphasis>
293 <emphasis class="comment">&#32;&#32;&#32;*&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;of&#32;the&#32;functional&#32;we&#32;are&#32;optimizing.&#32;This</emphasis>
294 <emphasis class="comment">&#32;&#32;&#32;*&#32;also&#32;includes&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;and&#32;other&#32;functions&#32;can&#32;be&#32;used</emphasis>
295 <emphasis class="comment">&#32;&#32;&#32;*&#32;to&#32;determine&#32;this&#32;property.&#32;This&#32;has&#32;to&#32;be&#32;done&#32;because&#32;in&#32;different&#32;cases</emphasis>
296 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;number&#32;of&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;can&#32;vary&#32;and&#32;we&#32;want&#32;no&#32;logic</emphasis>
297 <emphasis class="comment">&#32;&#32;&#32;*&#32;about&#32;this&#32;in&#32;other&#32;functions.</emphasis>
298 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
299 &#32;&#32;Vector&lt;double&gt;&#32;Dofs()&#32;<emphasis class="keyword">const</emphasis>;
300 <emphasis class="comment"></emphasis>
301 <emphasis class="comment">&#32;&#32;/**</emphasis>
302 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;number&#32;of&#32;unrestrained&#32;degrees&#32;of&#32;freedom&#32;of&#32;the</emphasis>
303 <emphasis class="comment">&#32;&#32;&#32;*&#32;current&#32;optimization&#32;run.</emphasis>
304 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
305 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NFreeDofs()&#32;<emphasis class="keyword">const</emphasis>;
306 <emphasis class="comment"></emphasis>
307 <emphasis class="comment">&#32;&#32;/**</emphasis>
308 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;total&#32;number&#32;of&#32;DOFs&#32;including&#32;restrained&#32;ones.</emphasis>
309 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;the&#32;lenght&#32;of&#32;the&#32;array&#32;returned&#32;by&#32;Dofs().</emphasis>
310 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
311 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NDofs()&#32;<emphasis class="keyword">const</emphasis>;
312 <emphasis class="comment"></emphasis>
313 <emphasis class="comment">&#32;&#32;/**</emphasis>
314 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;Dofs()&#32;also&#32;returns&#32;restrained&#32;degrees&#32;of&#32;freedom,&#32;this&#32;function&#32;can</emphasis>
315 <emphasis class="comment">&#32;&#32;&#32;*&#32;be&#32;applied&#32;to&#32;determine&#32;if&#32;a&#32;degree&#32;of&#32;freedom&#32;is&#32;indeed&#32;free&#32;or</emphasis>
316 <emphasis class="comment">&#32;&#32;&#32;*&#32;restrained.&#32;&quot;restrained&quot;&#32;means&#32;that&#32;for&#32;example&#32;the&#32;DOF&#32;represents&#32;the</emphasis>
317 <emphasis class="comment">&#32;&#32;&#32;*&#32;radius&#32;at&#32;one&#32;of&#32;the&#32;connectors&#32;(input&#32;or&#32;output)&#32;and&#32;therefore&#32;we&#32;forbid</emphasis>
318 <emphasis class="comment">&#32;&#32;&#32;*&#32;the&#32;optimization&#32;scheme&#32;to&#32;vary&#32;this&#32;value.</emphasis>
319 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
320 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;IsDofFree(<emphasis class="keywordtype">int</emphasis>)&#32;<emphasis class="keyword">const</emphasis>;
321 <emphasis class="comment"></emphasis>
322 <emphasis class="comment">&#32;&#32;/**</emphasis>
323 <emphasis class="comment">&#32;&#32;&#32;*&#32;Console&#32;output&#32;of&#32;the&#32;current&#32;Waveguide&#32;Structure.</emphasis>
324 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
325 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;Print()&#32;<emphasis class="keyword">const</emphasis>;
326 
327 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z(<emphasis class="keywordtype">double</emphasis>&#32;z_in,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
328 
329 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z_with_sum(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
330 
331 &#32;&#32;std::complex&lt;double&gt;&#32;gauss_product_2D_sphere_primal(<emphasis class="keywordtype">double</emphasis>&#32;z,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n,&#32;<emphasis class="keywordtype">double</emphasis>&#32;R,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Xc,&#32;<emphasis class="keywordtype">double</emphasis>&#32;Yc,
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*in_w);
334 };
335 
336 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
