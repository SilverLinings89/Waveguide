<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_parameter_reader">
<title>ParameterReader class Reference</title>
<para>
    <programlisting>#include <link linkend="_parameter_reader_8h">&lt;ParameterReader.h&gt;</link></programlisting>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>ParameterHandler &amp; prm</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_parameter_reader_1aa48ec0eb9614ac9aa76b8d6146015c6b">ParameterReader</link> (
ParameterHandler &amp; prmhandler)<para><emphasis>Deal Offers the ParameterHandler object wich contains all of the parsing-functionality.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_parameter_reader_1ab9462a51546741d97e9dbca7d3dee7a2">read_parameters</link> (
const std::string inputfile)<para><emphasis>This member calls the read_input_from_xml()-function of the contained ParameterHandler and this replaces the default values with the values in the input file.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_parameter_reader_1a1cb311d600af9927d6466c046b730ad5">declare_parameters</link> (
)<para><emphasis>In this function, we add all values descriptions to the parameter-handler.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>This class is used to gather all the information from the input file and store it in a static object available to all processes. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>The <link linkend="class_parameter_reader">ParameterReader</link> is a very useful tool. It uses a deal-function to read a xml-file and parse the contents to specific variables. These variables have default values used in their declaration. The members of this class do two things:<orderedlist>
<listitem>
<para>declare the variables. This includes setting a data-type for them and a default value should none be provided in the input file. Furthermore there can be restrictions like maximum or minimum values etc.</para>
</listitem><listitem>
<para>call an external function to parse an input-file.</para>
</listitem></orderedlist>
</para>

<para>After creating an object of this type and calling both declare() and read(), this object contains all the information from the input file and can be used in the code without dealing with persistence.</para>

<para><formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
<formalpara><title>Date: </title>

<para>23.11.2015 </para>
</formalpara>
</para>
                <para>Definition at line 22 of file ParameterReader.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>ParameterReader.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_parameter_reader_1aa48ec0eb9614ac9aa76b8d6146015c6b">
                <title>ParameterReader::ParameterReader (ParameterHandler &amp;prmhandler)</title> <emphasis>Deal Offers the ParameterHandler object wich contains all of the parsing-functionality.</emphasis>
                
<para>An object of that type is included in this one. This constructor simply uses a copy-constructor to initialize it. </para>

            </section>
            <section xml:id="class_parameter_reader_1ab9462a51546741d97e9dbca7d3dee7a2">
                <title>void ParameterReader::read_parameters (const std::string inputfile)</title> <emphasis>This member calls the read_input_from_xml()-function of the contained ParameterHandler and this replaces the default values with the values in the input file.</emphasis>
                
            </section>
            <section xml:id="class_parameter_reader_1a1cb311d600af9927d6466c046b730ad5">
                <title>void ParameterReader::declare_parameters ()</title> <emphasis>In this function, we add all values descriptions to the parameter-handler.</emphasis>
                
<para>This includes<orderedlist>
<listitem>
<para>a default value,</para>
</listitem><listitem>
<para>a data-type,</para>
</listitem><listitem>
<para>possible restrictions (greater than zero etc.),</para>
</listitem><listitem>
<para>a description, which is displayed in deals ParameterGUI-tool,</para>
</listitem><listitem>
<para>a hierarchical structure to order the variables.</para>
</listitem></orderedlist>
</para>

<para>Deals Parameter-GUI can be installed at build-time of the library and offers a great and easy way to edit the input file. It displays appropriate input-methods depending on the type, so, for example, in case of a selection from three different values (i.e. the name of a solver that has to either be GMRES, MINRES or UMFPACK) it displays a dropdown containing all the options. </para>

            </section>
</section>
