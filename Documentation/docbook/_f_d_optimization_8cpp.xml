<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_f_d_optimization_8cpp">
    <title>FDOptimization.cpp File Reference</title>
    <programlisting>#include &quot;FDOptimization.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;complex&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &quot;../MeshGenerators/MeshGenerator.h&quot;</programlisting>
    <programlisting>#include &quot;../OptimizationAlgorithm/OptimizationAlgorithm.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/SpaceTransformation.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_f_d_optimization_8cpp_1a86a3dcac4b98d9867fe5dd81f13634ad">FDOptimization_CPP_</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/OptimizationStrategies/FDOptimization.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;FDOptimization_CPP_</emphasis>
2 <emphasis class="preprocessor">#define&#32;FDOptimization_CPP_</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;FDOptimization.h&quot;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;complex&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&quot;../MeshGenerators/MeshGenerator.h&quot;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;../OptimizationAlgorithm/OptimizationAlgorithm.h&quot;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/SpaceTransformation.h&quot;</emphasis>
12 
13 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
14 
15 FDOptimization::FDOptimization(<link linkend="class_waveguide">Waveguide</link>*&#32;in_waveguide,&#32;<link linkend="class_mesh_generator">MeshGenerator</link>*&#32;in_mg,
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_space_transformation">SpaceTransformation</link>*&#32;in_st,
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_optimization_algorithm">OptimizationAlgorithm&lt;double&gt;</link>*&#32;in_Oa)&#32;{
18 &#32;&#32;waveguide&#32;=&#32;in_waveguide;
19 &#32;&#32;st&#32;=&#32;in_st;
20 &#32;&#32;oa&#32;=&#32;in_Oa;
21 &#32;&#32;mg&#32;=&#32;in_mg;
22 }
23 
24 FDOptimization::~FDOptimization()&#32;{}
25 
26 <emphasis class="keywordtype">double</emphasis>&#32;FDOptimization::evaluate()&#32;{
27 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;quality&#32;=&#32;0;
28 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;q_in&#32;=
29 &#32;&#32;&#32;&#32;&#32;&#32;std::abs(st-&gt;evaluate_for_z(-GlobalParams.M_R_ZLength&#32;/&#32;2.0,&#32;waveguide));
30 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;q_out&#32;=&#32;std::abs(
31 &#32;&#32;&#32;&#32;&#32;&#32;st-&gt;evaluate_for_z(GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;-&#32;0.0001,&#32;waveguide));
32 &#32;&#32;quality&#32;=&#32;q_out&#32;/&#32;q_in;
33 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;quality;
34 }
35 
36 std::vector&lt;double&gt;&#32;FDOptimization::compute_small_step(<emphasis class="keywordtype">double</emphasis>&#32;step)&#32;{
37 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ndofs&#32;=&#32;st-&gt;NDofs();
38 &#32;&#32;std::complex&lt;double&gt;&#32;global_a_out&#32;=
39 &#32;&#32;&#32;&#32;&#32;&#32;st-&gt;evaluate_for_z(GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;-&#32;0.0001,&#32;waveguide);
40 &#32;&#32;std::vector&lt;double&gt;&#32;ret;
41 &#32;&#32;ret.resize(ndofs);
42 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;q_old&#32;=&#32;evaluate();
43 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;ndofs;&#32;i++)&#32;{
44 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;old_dof_value&#32;=&#32;st-&gt;get_dof(i);
45 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(st-&gt;IsDofFree(i))&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;st-&gt;set_dof(i,&#32;old_dof_value&#32;+&#32;step);
47 &#32;&#32;&#32;&#32;&#32;&#32;waveguide-&gt;run();
48 &#32;&#32;&#32;&#32;&#32;&#32;ret[i]&#32;=&#32;(evaluate()&#32;-&#32;q_old)&#32;/&#32;step;
49 
50 &#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;a_in&#32;=
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;evaluate_for_z(-GlobalParams.M_R_ZLength&#32;/&#32;2.0,&#32;waveguide);
52 &#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;a_out&#32;=&#32;st-&gt;evaluate_for_z(
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;-&#32;0.0001,&#32;waveguide);
54 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Phase&#32;in:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;a_in;
55 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;Phase&#32;out:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;a_out;
56 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;Quality&#32;derivative:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;ret[i];
57 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;Step:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;step;
58 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;Phase&#32;derivative:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(a_out&#32;-&#32;global_a_out)&#32;/&#32;step
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
60 &#32;&#32;&#32;&#32;&#32;&#32;st-&gt;set_dof(i,&#32;old_dof_value);
61 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
62 &#32;&#32;&#32;&#32;&#32;&#32;ret[i]&#32;=&#32;0.0;
63 &#32;&#32;&#32;&#32;}
64 &#32;&#32;}
65 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
66 }
67 
68 <emphasis class="keywordtype">double</emphasis>&#32;FDOptimization::compute_big_step(std::vector&lt;double&gt;&#32;step)&#32;{
69 &#32;&#32;Vector&lt;double&gt;&#32;current_config&#32;=&#32;st-&gt;Dofs();
70 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;step.size();&#32;i++)&#32;{
71 &#32;&#32;&#32;&#32;st-&gt;set_dof(i,&#32;current_config[i]&#32;+&#32;step[i]);
72 &#32;&#32;}
73 &#32;&#32;MPI_Barrier(MPI_COMM_WORLD);
74 &#32;&#32;waveguide-&gt;switch_to_primal(st);
75 &#32;&#32;waveguide-&gt;run();
76 &#32;&#32;MPI_Barrier(MPI_COMM_WORLD);
77 
78 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;evaluate();
79 }
80 
81 <emphasis class="keywordtype">void</emphasis>&#32;FDOptimization::run()&#32;{
82 &#32;&#32;Convergence_Table.set_auto_fill_mode(<emphasis class="keyword">true</emphasis>);
83 
84 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;run&#32;=&#32;<emphasis class="keyword">true</emphasis>;
85 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;counter&#32;=&#32;0;
86 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;quality&#32;=&#32;0;
87 
88 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(run)&#32;{
89 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;small_steps&#32;=&#32;0;
90 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(oa-&gt;perform_small_step_next(small_steps))&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Performing&#32;a&#32;small&#32;step.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;temp_step_width&#32;=&#32;oa-&gt;get_small_step_step_width(small_steps);
93 &#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;pass_result_small_step(compute_small_step(temp_step_width));
94 &#32;&#32;&#32;&#32;&#32;&#32;small_steps++;
95 &#32;&#32;&#32;&#32;}
96 
97 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(oa-&gt;perform_big_step_next(small_steps))&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Performing&#32;a&#32;big&#32;step.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
99 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;double&gt;&#32;step&#32;=&#32;oa-&gt;get_big_step_configuration();
100 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Got&#32;the&#32;following&#32;big&#32;step&#32;configuration:&#32;&quot;</emphasis>;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;step.size();&#32;i++)&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;step[i]&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;,&#32;&quot;</emphasis>;
103 &#32;&#32;&#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;std::endl;
105 &#32;&#32;&#32;&#32;&#32;&#32;quality&#32;=&#32;compute_big_step(step);
106 &#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;pass_result_big_step(quality);
107 &#32;&#32;&#32;&#32;}
108 
109 &#32;&#32;&#32;&#32;counter++;
110 
111 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(counter&#32;&gt;=&#32;GlobalParams.Sc_OptimizationSteps&#32;||&#32;quality&#32;&gt;&#32;1.0)&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;run&#32;=&#32;<emphasis class="keyword">false</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;The&#32;optimization&#32;is&#32;shutting&#32;down&#32;after&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;counter
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;steps.&#32;Last&#32;quality:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;100&#32;*&#32;quality&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;%&quot;</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
116 &#32;&#32;&#32;&#32;}
117 
118 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((GlobalParams.O_C_D_ConvergenceFirst&#32;||
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.O_C_D_ConvergenceAll)&#32;&amp;&amp;
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.MPI_Rank&#32;==&#32;0))&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;std::ofstream&#32;result_file;
122 &#32;&#32;&#32;&#32;&#32;&#32;result_file.open((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/convergence_rates.dat&quot;</emphasis>).c_str(),
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::openmode::_S_trunc);
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.write_text(
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result_file,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dealii::TableHandler::TextOutputFormat::table_with_headers);
128 &#32;&#32;&#32;&#32;&#32;&#32;result_file.close();
129 &#32;&#32;&#32;&#32;&#32;&#32;result_file.open((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/convergence_rates.tex&quot;</emphasis>).c_str(),
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::openmode::_S_trunc);
131 &#32;&#32;&#32;&#32;&#32;&#32;Convergence_Table.write_tex(result_file);
132 &#32;&#32;&#32;&#32;&#32;&#32;result_file.close();
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;result_file.open((solutionpath&#32;+&#32;<emphasis class="stringliteral">&quot;/steps.dat&quot;</emphasis>).c_str(),
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::openmode::_S_trunc);
136 &#32;&#32;&#32;&#32;&#32;&#32;oa-&gt;WriteStepsOut(result_file);
137 &#32;&#32;&#32;&#32;&#32;&#32;result_file.close();
138 &#32;&#32;&#32;&#32;}
139 &#32;&#32;}
140 }
141 
142 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
