<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_homogenous_transformation_rectangular_8h">
    <title>HomogenousTransformationRectangular.h File Reference</title>
    <programlisting>#include &lt;math.h&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &quot;../Core/Sector.h&quot;</programlisting>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_homogenous_transformation_rectangular">HomogenousTransformationRectangular</link></para>
<para><emphasis>For this transformation we try to achieve a situation in which tensorial material properties from the coordinate transformation and PML-regions dont overlap.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/HomogenousTransformationRectangular.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;HomogenousTransformationRectangularFlag</emphasis>
2 <emphasis class="preprocessor">#define&#32;HomogenousTransformationRectangularFlag</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
9 
10 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;../Core/Sector.h&quot;</emphasis>
12 
13 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
14 <emphasis class="comment"></emphasis>
15 <emphasis class="comment">/**</emphasis>
16 <emphasis class="comment">&#32;*&#32;\class&#32;HomogenousTransformationRectangular</emphasis>
17 <emphasis class="comment">&#32;*&#32;\brief&#32;For&#32;this&#32;transformation&#32;we&#32;try&#32;to&#32;achieve&#32;a&#32;situation&#32;in&#32;which&#32;tensorial&#32;material&#32;properties&#32;from&#32;the&#32;coordinate&#32;transformation&#32;and&#32;PML-regions&#32;dont&#32;overlap.</emphasis>
18 <emphasis class="comment">&#32;*</emphasis>
19 <emphasis class="comment">&#32;*&#32;The&#32;usage&#32;of&#32;a&#32;coordinate&#32;transformation&#32;which&#32;is&#32;identity&#32;on&#32;the&#32;domain&#32;containing&#32;our&#32;PML&#32;is&#32;a&#32;strong&#32;restriction&#32;however&#32;it&#32;ensures&#32;lower&#32;errors&#32;since&#32;the&#32;quality&#32;of&#32;the&#32;PML&#32;is&#32;harder&#32;to&#32;estimate&#32;otherwise.&#32;Also&#32;it&#32;limits&#32;us&#32;in&#32;how&#32;we&#32;model&#32;the&#32;waveguide&#32;essentially&#32;forcing&#32;us&#32;to&#32;have&#32;no&#32;bent&#32;between&#32;the&#32;wavguides-connectors.</emphasis>
20 <emphasis class="comment">&#32;*&#32;\author&#32;Pascal&#32;Kraft</emphasis>
21 <emphasis class="comment">&#32;*&#32;\date&#32;28.11.2016</emphasis>
22 <emphasis class="comment">&#32;*/</emphasis>
23 
<link linkend="class_homogenous_transformation_rectangular">24 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_homogenous_transformation_rectangular">HomogenousTransformationRectangular</link>&#32;:&#32;<emphasis class="keyword">public</emphasis>&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;{
25 
26 <emphasis class="keyword">public</emphasis>:
27 &#32;&#32;<link linkend="class_homogenous_transformation_rectangular">HomogenousTransformationRectangular</link>(<emphasis class="keywordtype">int</emphasis>);
28 
29 &#32;&#32;<emphasis class="keyword">virtual</emphasis>&#32;~<link linkend="class_homogenous_transformation_rectangular">HomogenousTransformationRectangular</link>();
30 
31 &#32;&#32;Point&lt;3&gt;&#32;math_to_phys(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
32 
33 &#32;&#32;Point&lt;3&gt;&#32;phys_to_math(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
34 
35 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;is_identity(Point&lt;3&gt;&#32;coord)&#32;<emphasis class="keyword">const</emphasis>;
36 
37 &#32;&#32;Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Tensor(Point&lt;3&gt;&#32;&amp;&#32;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;;
38 
39 &#32;&#32;Tensor&lt;2,3,&#32;std::complex&lt;double&gt;&gt;&#32;get_Preconditioner_Tensor(Point&lt;3&gt;&#32;&amp;&#32;coordinate,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
40 
41 &#32;&#32;Tensor&lt;2,3,std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate,&#32;Tensor&lt;2,3,double&gt;&#32;Tensor_input)&#32;<emphasis class="keyword">const</emphasis>;
42 
43 &#32;&#32;Tensor&lt;2,3,std::complex&lt;double&gt;&gt;&#32;Apply_PML_To_Tensor_For_Preconditioner&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate,&#32;Tensor&lt;2,3,double&gt;&#32;Tensor_input,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
44 
45 &#32;&#32;Tensor&lt;2,3,double&gt;&#32;get_Space_Transformation_Tensor&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate)&#32;<emphasis class="keyword">const</emphasis>;
46 
47 &#32;&#32;Tensor&lt;2,3,double&gt;&#32;get_Space_Transformation_Tensor_Homogenized&#32;(Point&lt;3&gt;&#32;&amp;&#32;coordinate)&#32;<emphasis class="keyword">const</emphasis>&#32;;
48 
49 
50 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;XMinus,&#32;XPlus,&#32;YMinus,&#32;YPlus,&#32;ZMinus,&#32;ZPlus;
51 <emphasis class="comment"></emphasis>
52 <emphasis class="comment">&#32;&#32;/**</emphasis>
53 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the&#32;x-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3&#32;functions.</emphasis>
54 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
55 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
56 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;&#32;PML_in_X(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
57 <emphasis class="comment"></emphasis>
58 <emphasis class="comment">&#32;&#32;/**</emphasis>
59 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the&#32;y-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3&#32;functions.</emphasis>
60 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
61 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
62 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;&#32;PML_in_Y(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
63 <emphasis class="comment"></emphasis>
64 <emphasis class="comment">&#32;&#32;/**</emphasis>
65 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;is&#32;used&#32;to&#32;determine,&#32;if&#32;a&#32;system-coordinate&#32;belongs&#32;to&#32;a&#32;PML-region&#32;for&#32;the&#32;PML&#32;that&#32;limits&#32;the&#32;computational&#32;domain&#32;along&#32;the&#32;z-axis.&#32;Since&#32;there&#32;are&#32;3&#32;blocks&#32;of&#32;PML-type&#32;material,&#32;there&#32;are&#32;3&#32;functions.</emphasis>
66 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;in&#32;which&#32;to&#32;test&#32;for&#32;presence&#32;of&#32;a&#32;PML-Material.</emphasis>
67 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
68 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;&#32;PML_in_Z(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
69 <emphasis class="comment"></emphasis>
70 <emphasis class="comment">&#32;&#32;/**</emphasis>
71 <emphasis class="comment">&#32;&#32;&#32;*&#32;Similar&#32;to&#32;the&#32;PML_in_Z&#32;only&#32;this&#32;function&#32;is&#32;used&#32;to&#32;generate&#32;the&#32;artificial&#32;PML&#32;used&#32;in&#32;the&#32;Preconditioner.&#32;These&#32;Layers&#32;are&#32;not&#32;only&#32;situated&#32;at&#32;the&#32;surface&#32;of&#32;the&#32;computational&#32;domain&#32;but&#32;also&#32;inside&#32;it&#32;at&#32;the&#32;interfaces&#32;of&#32;Sectors.</emphasis>
72 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
73 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;Preconditioner_PML_in_Z(Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)&#32;<emphasis class="keyword">const</emphasis>;
74 <emphasis class="comment"></emphasis>
75 <emphasis class="comment">&#32;&#32;/**</emphasis>
76 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;fulfills&#32;the&#32;same&#32;purpose&#32;as&#32;those&#32;with&#32;similar&#32;names&#32;but&#32;it&#32;is&#32;supposed&#32;to&#32;be&#32;used&#32;together&#32;with&#32;Preconditioner_PML_in_Z&#32;instead&#32;of&#32;the&#32;versions&#32;without&#32;&quot;Preconditioner&quot;.</emphasis>
77 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
78 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Preconditioner_PML_Z_Distance(Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block&#32;)&#32;<emphasis class="keyword">const</emphasis>;
79 <emphasis class="comment"></emphasis>
80 <emphasis class="comment">&#32;&#32;/**</emphasis>
81 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).</emphasis>
82 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the&#32;PML-surface.</emphasis>
83 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
84 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;PML_X_Distance(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
85 <emphasis class="comment"></emphasis>
86 <emphasis class="comment">&#32;&#32;/**</emphasis>
87 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).</emphasis>
88 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the&#32;PML-surface.</emphasis>
89 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
90 
91 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;PML_Y_Distance(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;<emphasis class="comment"></emphasis>
92 <emphasis class="comment">&#32;&#32;/**</emphasis>
93 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;calculates&#32;for&#32;a&#32;given&#32;point,&#32;its&#32;distance&#32;to&#32;a&#32;PML-boundary&#32;limiting&#32;the&#32;computational&#32;domain.&#32;This&#32;function&#32;is&#32;used&#32;merely&#32;to&#32;make&#32;code&#32;more&#32;readable.&#32;There&#32;is&#32;a&#32;function&#32;for&#32;every&#32;one&#32;of&#32;the&#32;dimensions&#32;since&#32;the&#32;normal&#32;vectors&#32;of&#32;PML-regions&#32;in&#32;this&#32;implementation&#32;are&#32;the&#32;coordinate-axis.&#32;This&#32;value&#32;is&#32;set&#32;to&#32;zero&#32;outside&#32;the&#32;PML&#32;and&#32;positive&#32;inside&#32;both&#32;PML-domains&#32;(only&#32;one&#32;for&#32;the&#32;z-direction).</emphasis>
94 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;position&#32;Stores&#32;the&#32;position&#32;from&#32;which&#32;to&#32;calculate&#32;the&#32;distance&#32;to&#32;the&#32;PML-surface.</emphasis>
95 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
96 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;PML_Z_Distance(Point&lt;3&gt;&#32;&amp;&#32;position)&#32;<emphasis class="keyword">const</emphasis>;
97 <emphasis class="comment"></emphasis>
98 <emphasis class="comment">&#32;&#32;/**</emphasis>
99 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;contains&#32;all&#32;the&#32;Sectors&#32;who,&#32;as&#32;a&#32;sum,&#32;form&#32;the&#32;complete&#32;Waveguide.&#32;These&#32;Sectors&#32;are&#32;a&#32;partition&#32;of&#32;the&#32;simulated&#32;domain.</emphasis>
100 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">101 </link>&#32;&#32;std::vector&lt;Sector&lt;2&gt;&gt;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>;
102 <emphasis class="comment"></emphasis>
103 <emphasis class="comment">&#32;&#32;/**</emphasis>
104 <emphasis class="comment">&#32;&#32;&#32;*&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;inside&#32;the&#32;core.</emphasis>
105 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_rectangular_1a24e8b0c9190f89e46bd7974b23d02a79">106 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1a24e8b0c9190f89e46bd7974b23d02a79">epsilon_K</link>;<emphasis class="comment"></emphasis>
107 <emphasis class="comment">&#32;&#32;/**</emphasis>
108 <emphasis class="comment">&#32;&#32;&#32;*&#32;&#32;The&#32;material-property&#32;\f$\epsilon_r\f$&#32;has&#32;a&#32;different&#32;value&#32;inside&#32;and&#32;outside&#32;of&#32;the&#32;waveguides&#32;core.&#32;This&#32;variable&#32;stores&#32;its&#32;value&#32;outside&#32;the&#32;core.</emphasis>
109 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_rectangular_1aaa0aa84503cc3c095fc9205fb67b797f">110 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1aaa0aa84503cc3c095fc9205fb67b797f">epsilon_M</link>;<emphasis class="comment"></emphasis>
111 <emphasis class="comment">&#32;&#32;/**</emphasis>
112 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;the&#32;computational&#32;domain&#32;is&#32;split&#32;into&#32;subdomains&#32;(called&#32;sectors),&#32;it&#32;is&#32;important&#32;to&#32;keep&#32;track&#32;of&#32;the&#32;amount&#32;of&#32;subdomains.&#32;This&#32;member&#32;stores&#32;the&#32;number&#32;of&#32;Sectors&#32;the&#32;computational&#32;domain&#32;has&#32;been&#32;split&#32;into.</emphasis>
113 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">114 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>;
115 <emphasis class="comment"></emphasis>
116 <emphasis class="comment">&#32;&#32;/**</emphasis>
117 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;value&#32;is&#32;initialized&#32;with&#32;the&#32;value&#32;Delta&#32;from&#32;the&#32;input-file.</emphasis>
118 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_rectangular_1a48f8055d365067e3660f70114b5dc614">119 </link>&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1a48f8055d365067e3660f70114b5dc614">deltaY</link>;
120 <emphasis class="comment"></emphasis>
121 <emphasis class="comment">&#32;&#32;/**</emphasis>
122 <emphasis class="comment">&#32;&#32;&#32;*&#32;At&#32;the&#32;beginning&#32;(before&#32;the&#32;first&#32;solution&#32;of&#32;a&#32;system)&#32;only&#32;the&#32;boundary&#32;conditions&#32;for&#32;the&#32;shape&#32;of&#32;the&#32;waveguide&#32;are&#32;known.&#32;Therefore&#32;the&#32;values&#32;for&#32;the&#32;degrees&#32;of&#32;freedom&#32;need&#32;to&#32;be&#32;estimated.&#32;This&#32;function&#32;sets&#32;all&#32;variables&#32;to&#32;appropiate&#32;values&#32;and&#32;estimates&#32;an&#32;appropriate&#32;shape&#32;based&#32;on&#32;averages&#32;and&#32;a&#32;polynomial&#32;interpolation&#32;of&#32;the&#32;boundary&#32;conditions&#32;on&#32;the&#32;shape.</emphasis>
123 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
124 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;estimate_and_initialize();
125 <emphasis class="comment"></emphasis>
126 <emphasis class="comment">&#32;&#32;/**</emphasis>
127 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q1&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates&#32;(physical&#32;field).</emphasis>
128 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q1&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the&#32;function.</emphasis>
129 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
130 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_Q1&#32;(&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
131 <emphasis class="comment"></emphasis>
132 <emphasis class="comment">&#32;&#32;/**</emphasis>
133 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q2&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates&#32;(physical&#32;field).</emphasis>
134 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q2&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the&#32;function.</emphasis>
135 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
136 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_Q2&#32;(&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
137 <emphasis class="comment"></emphasis>
138 <emphasis class="comment">&#32;&#32;/**</emphasis>
139 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;member&#32;calculates&#32;the&#32;value&#32;of&#32;Q3&#32;for&#32;a&#32;provided&#32;\f$z\f$-coordinate.&#32;This&#32;value&#32;is&#32;used&#32;in&#32;the&#32;transformation&#32;of&#32;the&#32;solution-vector&#32;in&#32;transformed&#32;coordinates&#32;(solution&#32;of&#32;the&#32;system-matrix)&#32;to&#32;real&#32;coordinates&#32;(physical&#32;field).</emphasis>
140 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;z&#32;The&#32;value&#32;of&#32;Q3&#32;is&#32;independent&#32;of&#32;\f$x\f$&#32;and&#32;\f$y\f$.&#32;Therefore&#32;only&#32;a&#32;\f$z\f$-coordinate&#32;is&#32;provided&#32;in&#32;a&#32;call&#32;to&#32;the&#32;function.</emphasis>
141 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
142 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_Q3&#32;(&#32;<emphasis class="keywordtype">double</emphasis>&#32;z)&#32;<emphasis class="keyword">const</emphasis>;
143 
144 <emphasis class="comment"></emphasis>
145 <emphasis class="comment">&#32;&#32;/**</emphasis>
146 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from&#32;the&#32;domain&#32;of&#32;possible&#32;cases.</emphasis>
147 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.</emphasis>
148 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;This&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
149 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
150 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>;
151 <emphasis class="comment"></emphasis>
152 <emphasis class="comment">&#32;&#32;/**</emphasis>
153 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the&#32;input-connector&#32;cannot&#32;be&#32;changed).</emphasis>
154 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter&#32;to&#32;be&#32;changed.</emphasis>
155 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
156 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
157 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;set_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value&#32;);
158 <emphasis class="comment"></emphasis>
159 <emphasis class="comment">&#32;&#32;/**</emphasis>
160 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;is&#32;a&#32;getter&#32;for&#32;the&#32;values&#32;of&#32;degrees&#32;of&#32;freedom.&#32;A&#32;getter-setter&#32;interface&#32;was&#32;introduced&#32;since&#32;the&#32;values&#32;are&#32;estimated&#32;automatically&#32;during&#32;the&#32;optimization&#32;and&#32;non-physical&#32;systems&#32;should&#32;be&#32;excluded&#32;from&#32;the&#32;domain&#32;of&#32;possible&#32;cases.</emphasis>
161 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;degree&#32;of&#32;freedom&#32;to&#32;be&#32;retrieved&#32;from&#32;the&#32;structure&#32;of&#32;the&#32;modelled&#32;waveguide.</emphasis>
162 <emphasis class="comment">&#32;&#32;&#32;*&#32;\return&#32;This&#32;function&#32;returns&#32;the&#32;value&#32;of&#32;the&#32;requested&#32;degree&#32;of&#32;freedom.&#32;Should&#32;this&#32;dof&#32;not&#32;exist,&#32;0&#32;will&#32;be&#32;returnd.</emphasis>
163 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
164 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;&#32;get_free_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof)&#32;<emphasis class="keyword">const</emphasis>;
165 <emphasis class="comment"></emphasis>
166 <emphasis class="comment">&#32;&#32;/**</emphasis>
167 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;sets&#32;the&#32;value&#32;of&#32;the&#32;dof&#32;provided&#32;to&#32;the&#32;given&#32;value.&#32;It&#32;is&#32;important&#32;to&#32;consider,&#32;that&#32;some&#32;dofs&#32;are&#32;non-writable&#32;(i.e.&#32;the&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;on&#32;the&#32;boundary,&#32;like&#32;the&#32;radius&#32;of&#32;the&#32;input-connector&#32;cannot&#32;be&#32;changed).</emphasis>
168 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;dof&#32;The&#32;index&#32;of&#32;the&#32;parameter&#32;to&#32;be&#32;changed.</emphasis>
169 <emphasis class="comment">&#32;&#32;&#32;*&#32;\param&#32;value&#32;The&#32;value,&#32;the&#32;dof&#32;should&#32;be&#32;set&#32;to.</emphasis>
170 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
171 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;&#32;set_free_dof&#32;(<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;,&#32;<emphasis class="keywordtype">double</emphasis>&#32;value&#32;);
172 <emphasis class="comment"></emphasis>
173 <emphasis class="comment">&#32;&#32;/**</emphasis>
174 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;complete&#32;length&#32;of&#32;the&#32;computational&#32;domain.</emphasis>
175 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
176 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;System_Length()&#32;<emphasis class="keyword">const</emphasis>;
177 <emphasis class="comment"></emphasis>
178 <emphasis class="comment">&#32;&#32;/**</emphasis>
179 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;sector</emphasis>
180 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
181 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Sector_Length()&#32;<emphasis class="keyword">const</emphasis>;
182 <emphasis class="comment"></emphasis>
183 <emphasis class="comment">&#32;&#32;/**</emphasis>
184 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;length&#32;of&#32;one&#32;layer</emphasis>
185 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
186 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Layer_Length()&#32;<emphasis class="keyword">const</emphasis>;
187 <emphasis class="comment"></emphasis>
188 <emphasis class="comment">&#32;&#32;/**</emphasis>
189 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;radius&#32;for&#32;a&#32;system-coordinate;</emphasis>
190 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
191 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_r(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
192 <emphasis class="comment"></emphasis>
193 <emphasis class="comment">&#32;&#32;/**</emphasis>
194 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;shift&#32;for&#32;a&#32;system-coordinate;</emphasis>
195 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
196 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_m(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
197 <emphasis class="comment"></emphasis>
198 <emphasis class="comment">&#32;&#32;/**</emphasis>
199 <emphasis class="comment">&#32;&#32;&#32;*&#32;Returns&#32;the&#32;tilt&#32;for&#32;a&#32;system-coordinate;</emphasis>
200 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
201 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;get_v(<emphasis class="keywordtype">double</emphasis>&#32;in_z)&#32;<emphasis class="keyword">const</emphasis>;
202 
203 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;Z_to_Layer(<emphasis class="keywordtype">double</emphasis>)&#32;<emphasis class="keyword">const</emphasis>;
204 <emphasis class="comment"></emphasis>
205 <emphasis class="comment">&#32;&#32;/**</emphasis>
206 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;vector&#32;of&#32;values&#32;saves&#32;the&#32;initial&#32;configuration</emphasis>
207 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
<link linkend="class_homogenous_transformation_rectangular_1a3709fade2ba8ef406ef627c7e07670f8">208 </link>&#32;&#32;Vector&lt;double&gt;&#32;<link linkend="class_homogenous_transformation_rectangular_1a3709fade2ba8ef406ef627c7e07670f8">InitialDofs</link>;
209 <emphasis class="comment"></emphasis>
210 <emphasis class="comment">&#32;&#32;/**</emphasis>
211 <emphasis class="comment">&#32;&#32;&#32;*&#32;Other&#32;objects&#32;can&#32;use&#32;this&#32;function&#32;to&#32;retrieve&#32;an&#32;array&#32;of&#32;the&#32;current&#32;values&#32;of&#32;the&#32;degrees&#32;of&#32;freedom&#32;of&#32;the&#32;functional&#32;we&#32;are&#32;optimizing.&#32;This&#32;also&#32;includes&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;and&#32;other&#32;functions&#32;can&#32;be&#32;used&#32;to&#32;determine&#32;this&#32;property.&#32;This&#32;has&#32;to&#32;be&#32;done&#32;because&#32;in&#32;different&#32;cases&#32;the&#32;number&#32;of&#32;restrained&#32;degrees&#32;of&#32;freedom&#32;can&#32;vary&#32;and&#32;we&#32;want&#32;no&#32;logic&#32;about&#32;this&#32;in&#32;other&#32;functions.</emphasis>
212 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
213 &#32;&#32;Vector&lt;double&gt;&#32;Dofs()&#32;<emphasis class="keyword">const</emphasis>;
214 <emphasis class="comment"></emphasis>
215 <emphasis class="comment">&#32;&#32;/**</emphasis>
216 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;number&#32;of&#32;unrestrained&#32;degrees&#32;of&#32;freedom&#32;of&#32;the&#32;current&#32;optimization&#32;run.</emphasis>
217 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
218 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NFreeDofs()&#32;<emphasis class="keyword">const</emphasis>;
219 <emphasis class="comment"></emphasis>
220 <emphasis class="comment">&#32;&#32;/**</emphasis>
221 <emphasis class="comment">&#32;&#32;&#32;*&#32;This&#32;function&#32;returns&#32;the&#32;total&#32;number&#32;of&#32;DOFs&#32;including&#32;restrained&#32;ones.&#32;This&#32;is&#32;the&#32;lenght&#32;of&#32;the&#32;array&#32;returned&#32;by&#32;Dofs().</emphasis>
222 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
223 &#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;NDofs()&#32;<emphasis class="keyword">const</emphasis>;
224 <emphasis class="comment"></emphasis>
225 <emphasis class="comment">&#32;&#32;/**</emphasis>
226 <emphasis class="comment">&#32;&#32;&#32;*&#32;Since&#32;Dofs()&#32;also&#32;returns&#32;restrained&#32;degrees&#32;of&#32;freedom,&#32;this&#32;function&#32;can&#32;be&#32;applied&#32;to&#32;determine&#32;if&#32;a&#32;degree&#32;of&#32;freedom&#32;is&#32;indeed&#32;free&#32;or&#32;restrained.&#32;&quot;restrained&quot;&#32;means&#32;that&#32;for&#32;example&#32;the&#32;DOF&#32;represents&#32;the&#32;radius&#32;at&#32;one&#32;of&#32;the&#32;connectors&#32;(input&#32;or&#32;output)&#32;and&#32;therefore&#32;we&#32;forbid&#32;the&#32;optimization&#32;scheme&#32;to&#32;vary&#32;this&#32;value.</emphasis>
227 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
228 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;IsDofFree(<emphasis class="keywordtype">int</emphasis>&#32;)&#32;<emphasis class="keyword">const</emphasis>;
229 <emphasis class="comment"></emphasis>
230 <emphasis class="comment">&#32;&#32;/**</emphasis>
231 <emphasis class="comment">&#32;&#32;&#32;*&#32;Console&#32;output&#32;of&#32;the&#32;current&#32;Waveguide&#32;Structure.</emphasis>
232 <emphasis class="comment">&#32;&#32;&#32;*/</emphasis>
233 &#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;Print()&#32;<emphasis class="keyword">const</emphasis>;
234 
235 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z(<emphasis class="keywordtype">double</emphasis>&#32;z_in,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
236 
237 &#32;&#32;std::complex&lt;double&gt;&#32;evaluate_for_z_with_sum(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*);
238 
239 };
240 
241 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
