<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_optimization_c_g">
<title>OptimizationCG class Reference</title>
<para>
    <programlisting>#include <link linkend="_optimization_c_g_8h">&lt;OptimizationCG.h&gt;</link></programlisting>
</para>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_optimization_c_g_1ab0172eb6d8681e9cd06a19fb873aa0b1">OptimizationCG</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_optimization_c_g_1a4ce8c173bc29e196b7d2b8557518fae4">~OptimizationCG</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_optimization_c_g_1a9b0d0c44baea9c922a787525811259ad">pass_result_small_step</link> (
std::vector&lt; double &gt; vec)<para><emphasis>A function to pass a vector of values, computed by performing a single or
multiple steps with short step-width.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual void <link linkend="class_optimization_c_g_1a7b55765b281b623f9c8ef93e7ad00aa7">pass_result_big_step</link> (
double input)<para><emphasis>Similar to pass_result_small_step but for the results of big steps.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_optimization_c_g_1ae779e5bee6aaee38999e4705c72e11dc">perform_small_step_next</link> (
int small_steps_before)<para><emphasis>The optimization is mainly split into two kinds of steps: Full and small
steps.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual double <link linkend="class_optimization_c_g_1a670ceaf08732728cf8e949fddd037787">get_small_step_step_width</link> (
int small_steps_before)<para><emphasis>For the optimization scheme to know, which step size is appropriate, this
function was included.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual bool <link linkend="class_optimization_c_g_1a5ad38004f2848c1e77613d5c6d69bdcd">perform_big_step_next</link> (
int small_steps_before)<para><emphasis>This functions returns true, if enough steps were performed to compute the
next state to compute a full solution on.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>virtual std::vector&lt; double &gt; <link linkend="class_optimization_c_g_1a91574337c2111756126703e7f414e7ff">get_big_step_configuration</link> (
)<para><emphasis>This function computes the states that should be computed next.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>This class implements the computation of an optimization step via a CG-method. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Objects of the Type <link linkend="class_optimization_algorithm">OptimizationAlgorithm</link> are used by the class OptimizationStrategy to compute the next viable configuration based on former results. Its is encapsulated in it&apos;s own class to offer comparison and easy changing between differenct schemes. <formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
<formalpara><title>Date: </title>

<para>29.11.2016 </para>
</formalpara>
</para>
                <para>Definition at line 17 of file OptimizationCG.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>OptimizationCG.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="class_optimization_c_g_1ab0172eb6d8681e9cd06a19fb873aa0b1">
                <title>OptimizationCG::OptimizationCG ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_optimization_c_g_1a4ce8c173bc29e196b7d2b8557518fae4">
                <title>OptimizationCG::~OptimizationCG ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_optimization_c_g_1a9b0d0c44baea9c922a787525811259ad">
                <title>void OptimizationCG::pass_result_small_step (std::vector&lt; double &gt;)</title> <emphasis>A function to pass a vector of values, computed by performing a single or
multiple steps with short step-width.</emphasis>
                
<para>&quot;small&quot; in the name references the fact, that the step width is small. In gerneral this is done whenever an accurat approximation of a gradient is saught based on linearization. This computation (especially in finite difference based approaches) can be much more costly than a big step. In a big step, one forward problem has to be solved. A small step computation based on finite differences requires <equation><title>form_40</title>$NDofs$</equation> forward problems to be solved. This function has the purpose of passing the result of such computations to the optimization algorithm which will store it and use it to compute optimization steps in the future. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>vec</entry>
                                <entry>
<para>This parameter is a vector of changes of the target functional based on a change in the individual component. The components belonging to restrained degrees of freedom are set to zero. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_optimization_c_g_1a7b55765b281b623f9c8ef93e7ad00aa7">
                <title>void OptimizationCG::pass_result_big_step (double)</title> <emphasis>Similar to pass_result_small_step but for the results of big steps.</emphasis>
                
<para>Since for a big step we always only perform the solution of one forward problem we also only get one change of the target functional. Therefore in this case we only pass a value, not a vector of the like. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>input</entry>
                                <entry>
<para>This is the value describing how much the target functional has changed upon performing the step last computed by this optimization algorithm. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_optimization_c_g_1ae779e5bee6aaee38999e4705c72e11dc">
                <title>bool OptimizationCG::perform_small_step_next (int small_steps_before)</title> <emphasis>The optimization is mainly split into two kinds of steps: Full and small
steps.</emphasis>
                
<para>For FD based schemes, a small step is a computation of finite differences for all degrees of freedom which entails a lot of computation. Small here refers to the norm of the step width - not necessarily to the amount of computation required. In general this function is supposed to gather information about the target functional around the current state. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>small_steps_before</entry>
                                <entry>
<para>this number tells the scheme how many small steps were performed before the current request. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>this is true, if the <link linkend="class_optimization">Optimization</link> Scheme requires more small steps before a big step can be performed. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_optimization_c_g_1a670ceaf08732728cf8e949fddd037787">
                <title>double OptimizationCG::get_small_step_step_width (int small_steps_before)</title> <emphasis>For the optimization scheme to know, which step size is appropriate, this
function was included.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>small_steps_before</entry>
                                <entry>
<para>similar to perform_small_step_next this is the number of small steps before the current one. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>double this is how much the values of the degrees of freedom should be adapted. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_optimization_c_g_1a5ad38004f2848c1e77613d5c6d69bdcd">
                <title>bool OptimizationCG::perform_big_step_next (int small_steps_before)</title> <emphasis>This functions returns true, if enough steps were performed to compute the
next state to compute a full solution on.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>small_steps_before</entry>
                                <entry>
<para>number of small steps performed before this call. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>true, if the next computation should be a big step - otherwise false. </para>
</formalpara>
</para>

            </section>
            <section xml:id="class_optimization_c_g_1a91574337c2111756126703e7f414e7ff">
                <title>std::vector&lt; double &gt; OptimizationCG::get_big_step_configuration ()</title> <emphasis>This function computes the states that should be computed next.</emphasis>
                
<para>If the next step will be a small step the update can be done by simply updating all dofs with a step width (or only one depending on the pattern) so this function is only used when a big step will be computed next and therefore all dofs could change differently. <formalpara><title>Returns: </title>

<para>This is a vector of degrees of freedom which can be used by the <link linkend="class_optimization">Optimization</link> Strategy to update the Space Transformation. </para>
</formalpara>
</para>

            </section>
</section>
