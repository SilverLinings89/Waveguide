<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_inhomogenous_transformation_circular_8cpp">
    <title>InhomogenousTransformationCircular.cpp File Reference</title>
    <programlisting>#include &quot;InhomogenousTransformationCircular.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/vector.h&gt;</programlisting>
    <programlisting>#include &quot;../Core/Sector.h&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/QuadratureFormulaCircle.cpp&quot;</programlisting>
    <programlisting>#include &quot;../Helpers/staticfunctions.h&quot;</programlisting>
    <programlisting>#include &quot;SpaceTransformation.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_inhomogenous_transformation_circular_8cpp_1ada06de9fcbd722366909404f4a3f885e">INHOMOGENOUS_TRANSFORMATION_CIRCULAR_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/SpaceTransformations/InhomogenousTransformationCircular.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;INHOMOGENOUS_TRANSFORMATION_CIRCULAR_CPP</emphasis>
2 <emphasis class="preprocessor">#define&#32;INHOMOGENOUS_TRANSFORMATION_CIRCULAR_CPP</emphasis>
3 
4 <emphasis class="preprocessor">#include&#32;&quot;InhomogenousTransformationCircular.h&quot;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/vector.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&quot;../Core/Sector.h&quot;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/QuadratureFormulaCircle.cpp&quot;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;../Helpers/staticfunctions.h&quot;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;SpaceTransformation.h&quot;</emphasis>
12 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
13 
14 InhomogenousTransformationCircular::InhomogenousTransformationCircular(
15 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_rank)
16 &#32;&#32;&#32;&#32;:&#32;<link linkend="class_space_transformation">SpaceTransformation</link>(3,&#32;in_rank),
17 &#32;&#32;&#32;&#32;&#32;&#32;XMinus(-(GlobalParams.M_R_XLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_XMinus)),
18 &#32;&#32;&#32;&#32;&#32;&#32;XPlus(GlobalParams.M_R_XLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_XPlus),
19 &#32;&#32;&#32;&#32;&#32;&#32;YMinus(-(GlobalParams.M_R_YLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_YMinus)),
20 &#32;&#32;&#32;&#32;&#32;&#32;YPlus(GlobalParams.M_R_YLength&#32;*&#32;0.5&#32;-&#32;GlobalParams.M_BC_YPlus),
21 &#32;&#32;&#32;&#32;&#32;&#32;ZMinus(-GlobalParams.M_R_ZLength&#32;*&#32;0.5),
22 &#32;&#32;&#32;&#32;&#32;&#32;ZPlus(GlobalParams.M_R_ZLength&#32;*&#32;0.5),
23 &#32;&#32;&#32;&#32;&#32;&#32;epsilon_K(GlobalParams.M_W_epsilonin),
24 &#32;&#32;&#32;&#32;&#32;&#32;epsilon_M(GlobalParams.M_W_epsilonout),
25 &#32;&#32;&#32;&#32;&#32;&#32;sectors(GlobalParams.M_W_Sectors),
26 &#32;&#32;&#32;&#32;&#32;&#32;deltaY(GlobalParams.M_W_Delta)&#32;{
27 &#32;&#32;homogenized&#32;=&#32;<emphasis class="keyword">false</emphasis>;
28 }
29 
30 InhomogenousTransformationCircular::~InhomogenousTransformationCircular()&#32;{}
31 
32 Point&lt;3&gt;&#32;InhomogenousTransformationCircular::math_to_phys(
33 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;coord)<emphasis class="keyword">&#32;const&#32;</emphasis>{
34 &#32;&#32;Point&lt;3&gt;&#32;ret;
35 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(coord[2]&#32;&lt;&#32;GlobalParams.M_R_ZLength&#32;/&#32;(-2.0))&#32;{
36 &#32;&#32;&#32;&#32;ret[0]&#32;=&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1In)&#32;*&#32;coord[0]&#32;/
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out);
38 &#32;&#32;&#32;&#32;ret[1]&#32;=&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1In)&#32;*&#32;coord[1]&#32;/
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out);
40 &#32;&#32;&#32;&#32;ret[2]&#32;=&#32;coord[2];
41 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(coord[2]&#32;&gt;=&#32;GlobalParams.M_R_ZLength&#32;/&#32;(-2.0)&#32;&amp;&amp;
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coord[2]&#32;&lt;&#32;GlobalParams.M_R_ZLength&#32;/&#32;(2.0))&#32;{
43 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;TODO:&#32;Use&#32;sectors&#32;here.</emphasis>
44 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
45 &#32;&#32;&#32;&#32;ret[0]&#32;=&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1Out)&#32;*&#32;coord[0]&#32;/
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out);
47 &#32;&#32;&#32;&#32;ret[1]&#32;=&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1Out)&#32;*&#32;coord[1]&#32;/
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out);
49 &#32;&#32;&#32;&#32;ret[2]&#32;=&#32;coord[2];
50 &#32;&#32;}
51 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
52 }
53 
54 Point&lt;3&gt;&#32;InhomogenousTransformationCircular::phys_to_math(
55 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;coord)<emphasis class="keyword">&#32;const&#32;</emphasis>{
56 &#32;&#32;Point&lt;3&gt;&#32;ret;
57 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(coord[2]&#32;&lt;&#32;GlobalParams.M_R_ZLength&#32;/&#32;(-2.0))&#32;{
58 &#32;&#32;&#32;&#32;ret[0]&#32;=&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;*&#32;coord[0]&#32;/
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1In);
60 &#32;&#32;&#32;&#32;ret[1]&#32;=&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;*&#32;coord[1]&#32;/
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1In);
62 &#32;&#32;&#32;&#32;ret[2]&#32;=&#32;coord[2];
63 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(coord[2]&#32;&gt;=&#32;GlobalParams.M_R_ZLength&#32;/&#32;(-2.0)&#32;&amp;&amp;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;coord[2]&#32;&lt;&#32;GlobalParams.M_R_ZLength&#32;/&#32;(2.0))&#32;{
65 &#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;TODO:&#32;Use&#32;sectors&#32;here.</emphasis>
66 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
67 &#32;&#32;&#32;&#32;ret[0]&#32;=&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;*&#32;coord[0]&#32;/
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1In);
69 &#32;&#32;&#32;&#32;ret[1]&#32;=&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;*&#32;coord[1]&#32;/
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(2&#32;*&#32;GlobalParams.M_C_Dim1In);
71 &#32;&#32;&#32;&#32;ret[2]&#32;=&#32;coord[2];
72 &#32;&#32;}
73 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
74 }
75 
<link linkend="class_inhomogenous_transformation_circular_1a9cd5164ad5e81222d84ccae959e09ed9">76 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a9cd5164ad5e81222d84ccae959e09ed9">InhomogenousTransformationCircular::PML_in_X</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
77 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(0)&#32;&lt;&#32;XMinus&#32;||&#32;p(0)&#32;&gt;&#32;XPlus;
78 }
79 
<link linkend="class_inhomogenous_transformation_circular_1a37c2ebdba9a6bfb45410c4c525328e84">80 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a37c2ebdba9a6bfb45410c4c525328e84">InhomogenousTransformationCircular::PML_in_Y</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
81 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(1)&#32;&lt;&#32;YMinus&#32;||&#32;p(1)&#32;&gt;&#32;YPlus;
82 }
83 
<link linkend="class_inhomogenous_transformation_circular_1a9876ac78c5c2ec3524ca331cba9466e5">84 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a9876ac78c5c2ec3524ca331cba9466e5">InhomogenousTransformationCircular::PML_in_Z</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
85 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;&gt;&#32;ZPlus;
86 }
87 
<link linkend="class_inhomogenous_transformation_circular_1a660bcd33bfadfeff68a1cd9c845f6f4f">88 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a660bcd33bfadfeff68a1cd9c845f6f4f">InhomogenousTransformationCircular::Preconditioner_PML_in_Z</link>(
89 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
90 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)block&#32;==&#32;GlobalParams.NumberProcesses&#32;-&#32;2)&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
91 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((<emphasis class="keywordtype">int</emphasis>)block&#32;==&#32;(<emphasis class="keywordtype">int</emphasis>)GlobalParams.MPI_Rank&#32;-&#32;1)&#32;{
92 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">true</emphasis>;
93 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
94 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="keyword">false</emphasis>;
95 &#32;&#32;}
96 }
97 
<link linkend="class_inhomogenous_transformation_circular_1aba258d6b34408aaf252fed22497f54f8">98 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1aba258d6b34408aaf252fed22497f54f8">InhomogenousTransformationCircular::Preconditioner_PML_Z_Distance</link>(
99 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;p,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
100 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;width&#32;=&#32;GlobalParams.LayerThickness;
101 &#32;&#32;<emphasis class="comment">//&#32;TODO&#32;fix&#32;this.</emphasis>
102 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;+&#32;GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;-&#32;((double)block&#32;+&#32;1)&#32;*&#32;width;
103 }
104 
<link linkend="class_inhomogenous_transformation_circular_1a95ca00c40d36fafd09c941ce338a5f06">105 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a95ca00c40d36fafd09c941ce338a5f06">InhomogenousTransformationCircular::PML_X_Distance</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
106 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p(0)&#32;&gt;&#32;0)&#32;{
107 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(0)&#32;-&#32;XPlus;
108 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
109 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-p(0)&#32;-&#32;XMinus;
110 &#32;&#32;}
111 }
112 
<link linkend="class_inhomogenous_transformation_circular_1aca704212b3f0ab894d7aa43706dba5ba">113 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1aca704212b3f0ab894d7aa43706dba5ba">InhomogenousTransformationCircular::PML_Y_Distance</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
114 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p(1)&#32;&gt;&#32;0)&#32;{
115 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(1)&#32;-&#32;YMinus;
116 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
117 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;-p(1)&#32;-&#32;YPlus;
118 &#32;&#32;}
119 }
120 
<link linkend="class_inhomogenous_transformation_circular_1abf499ff100ae388c4b819f0db3717e9f">121 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1abf499ff100ae388c4b819f0db3717e9f">InhomogenousTransformationCircular::PML_Z_Distance</link>(Point&lt;3&gt;&#32;&amp;p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
122 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p(2)&#32;&lt;&#32;0)&#32;{
123 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
124 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
125 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;p(2)&#32;-&#32;(GlobalParams.M_R_ZLength&#32;/&#32;2.0);
126 &#32;&#32;}
127 }
128 
129 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
130 InhomogenousTransformationCircular::get_Tensor(Point&lt;3&gt;&#32;&amp;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
131 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transform&#32;=&#32;get_Space_Transformation_Tensor(position);
132 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Apply_PML_To_Tensor(position,&#32;transform);
133 }
134 
135 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
136 InhomogenousTransformationCircular::get_Preconditioner_Tensor(
137 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
138 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transform&#32;=&#32;get_Space_Transformation_Tensor(position);
139 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;Apply_PML_To_Tensor_For_Preconditioner(position,&#32;transform,&#32;block);
140 }
141 
142 Tensor&lt;2,&#32;3,&#32;double&gt;
143 InhomogenousTransformationCircular::get_Space_Transformation_Tensor_Homogenized(
144 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
145 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sector_z&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(position[2]);
146 
147 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation&#32;=
148 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector_z.first].TransformationTensorInternal(
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position[0],&#32;position[1],&#32;sector_z.second);
150 
151 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;dist&#32;=&#32;position[0]&#32;*&#32;position[0]&#32;+&#32;position[1]&#32;*&#32;position[1];
152 
153 &#32;&#32;dist&#32;=&#32;sqrt(dist);
154 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;v1&#32;=&#32;GlobalParams.M_R_XLength&#32;/&#32;2.0&#32;-
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(GlobalParams.M_BC_XMinus,&#32;GlobalParams.M_BC_XPlus);
156 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;v2&#32;=&#32;GlobalParams.M_R_YLength&#32;/&#32;2.0&#32;-
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(GlobalParams.M_BC_YMinus,&#32;GlobalParams.M_BC_YPlus);
158 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;maxdist&#32;=&#32;std::min(v1,&#32;v2);
159 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;mindist&#32;=&#32;(GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out)&#32;/&#32;2.0;
160 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;sig&#32;=&#32;sigma(dist,&#32;mindist,&#32;maxdist);
161 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;factor&#32;=&#32;InterpolationPolynomialZeroDerivative(sig,&#32;1,&#32;0);
162 &#32;&#32;transformation&#32;*=&#32;factor;
163 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
164 &#32;&#32;&#32;&#32;transformation[i][i]&#32;+=&#32;1&#32;-&#32;factor;
165 &#32;&#32;}
166 
167 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;transformation;
168 }
169 
170 Tensor&lt;2,&#32;3,&#32;double&gt;
171 InhomogenousTransformationCircular::get_Space_Transformation_Tensor(
172 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position)<emphasis class="keyword">&#32;const&#32;</emphasis>{
173 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;sector_z&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(position[2]);
174 
175 &#32;&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation&#32;=
176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector_z.first].TransformationTensorInternal(
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;position[0],&#32;position[1],&#32;sector_z.second);
178 
179 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;transformation;
180 }
181 
182 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
183 InhomogenousTransformationCircular::Apply_PML_To_Tensor(
184 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation)<emphasis class="keyword">&#32;const&#32;</emphasis>{
185 &#32;&#32;std::complex&lt;double&gt;&#32;S1(1.0,&#32;0.0),&#32;S2(1.0,&#32;0.0),&#32;S3(1.0,&#32;0.0);
186 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
187 
188 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;omegaepsilon0&#32;=&#32;GlobalParams.C_omega;
189 &#32;&#32;<emphasis class="comment">//&#32;*&#32;((System_Coordinate_in_Waveguide(position))?GlobalParams.M_W_epsilonin&#32;:</emphasis>
190 &#32;&#32;<emphasis class="comment">//&#32;GlobalParams.M_W_epsilonout);</emphasis>
191 &#32;&#32;std::complex&lt;double&gt;&#32;sx(1.0,&#32;0.0),&#32;sy(1.0,&#32;0.0),&#32;sz(1.0,&#32;0.0);
192 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a334838f6301d536104444359dd7e8fe6">PML_in_X</link>(position))&#32;{
193 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmax;
194 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1ae9b78461ebb9e788aacb47522076d3b5">PML_X_Distance</link>(position);
195 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[0]&#32;&lt;&#32;0)&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XMinus;
197 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XPlus;
199 &#32;&#32;&#32;&#32;}
200 &#32;&#32;&#32;&#32;sigmax&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaXMax;
202 &#32;&#32;&#32;&#32;sx.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaXMax);
204 &#32;&#32;&#32;&#32;sx.imag(sigmax&#32;/&#32;(omegaepsilon0));
205 &#32;&#32;&#32;&#32;S1&#32;/=&#32;sx;
206 &#32;&#32;&#32;&#32;S2&#32;*=&#32;sx;
207 &#32;&#32;&#32;&#32;S3&#32;*=&#32;sx;
208 &#32;&#32;}
209 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a8dbc61c674d9f04f6569ba5106d3a8cc">PML_in_Y</link>(position))&#32;{
210 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmay;
211 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1a125305f07aeb0d86e34eb2e06377be68">PML_Y_Distance</link>(position);
212 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[1]&#32;&lt;&#32;0)&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YMinus;
214 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YPlus;
216 &#32;&#32;&#32;&#32;}
217 &#32;&#32;&#32;&#32;sigmay&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaYMax;
219 &#32;&#32;&#32;&#32;sy.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaYMax);
221 &#32;&#32;&#32;&#32;sy.imag(sigmay&#32;/&#32;(omegaepsilon0));
222 &#32;&#32;&#32;&#32;S1&#32;*=&#32;sy;
223 &#32;&#32;&#32;&#32;S2&#32;/=&#32;sy;
224 &#32;&#32;&#32;&#32;S3&#32;*=&#32;sy;
225 &#32;&#32;}
226 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a1d1b67c2ab4c738f83293f9fddda8119">PML_in_Z</link>(position))&#32;{
227 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmaz;
228 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1a608043303e86a44dfae8f36baf963d86">PML_Z_Distance</link>(position);
229 &#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zplus;
230 &#32;&#32;&#32;&#32;sigmaz&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax;
232 &#32;&#32;&#32;&#32;sz.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax);
234 &#32;&#32;&#32;&#32;sz.imag(sigmaz&#32;/&#32;omegaepsilon0);
235 &#32;&#32;&#32;&#32;S1&#32;*=&#32;sz;
236 &#32;&#32;&#32;&#32;S2&#32;*=&#32;sz;
237 &#32;&#32;&#32;&#32;S3&#32;/=&#32;sz;
238 &#32;&#32;}
239 
240 &#32;&#32;ret[0][0]&#32;=&#32;S1;
241 &#32;&#32;ret[1][1]&#32;=&#32;S2;
242 &#32;&#32;ret[2][2]&#32;=&#32;S3;
243 
244 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret2;
245 
246 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
247 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;ret2[i][j]&#32;=&#32;transformation[i][j]&#32;*&#32;std::complex&lt;double&gt;(1.0,&#32;0.0);
249 &#32;&#32;&#32;&#32;}
250 &#32;&#32;}
251 
252 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret3;
253 
254 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
255 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;ret3[i][j]&#32;=&#32;std::complex&lt;double&gt;(0.0,&#32;0.0);
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;k&#32;=&#32;0;&#32;k&#32;&lt;&#32;3;&#32;k++)&#32;{
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret3[i][j]&#32;+=&#32;ret[i][k]&#32;*&#32;ret2[k][j];
259 &#32;&#32;&#32;&#32;&#32;&#32;}
260 &#32;&#32;&#32;&#32;}
261 &#32;&#32;}
262 
263 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret3;
264 }
265 
266 Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;
267 InhomogenousTransformationCircular::Apply_PML_To_Tensor_For_Preconditioner(
268 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;&amp;position,&#32;Tensor&lt;2,&#32;3,&#32;double&gt;&#32;transformation,&#32;<emphasis class="keywordtype">int</emphasis>&#32;block)<emphasis class="keyword">&#32;const&#32;</emphasis>{
269 &#32;&#32;std::complex&lt;double&gt;&#32;S1(1.0,&#32;0.0),&#32;S2(1.0,&#32;0.0),&#32;S3(1.0,&#32;0.0);
270 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
271 
272 &#32;&#32;Tensor&lt;2,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;MaterialTensor;
273 
274 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;3;&#32;i++)&#32;{
275 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;3;&#32;j++)&#32;{
276 &#32;&#32;&#32;&#32;&#32;&#32;MaterialTensor[i][j]&#32;=
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;transformation[i][j]&#32;*&#32;std::complex&lt;double&gt;(1.0,&#32;0.0);
278 &#32;&#32;&#32;&#32;}
279 &#32;&#32;}
280 
281 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;omegaepsilon0&#32;=&#32;GlobalParams.C_omega;
282 &#32;&#32;std::complex&lt;double&gt;&#32;sx(1.0,&#32;0.0),&#32;sy(1.0,&#32;0.0),&#32;sz(1.0,&#32;0.0),&#32;sz_p(0.0,&#32;0.0);
283 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a334838f6301d536104444359dd7e8fe6">PML_in_X</link>(position))&#32;{
284 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmax;
285 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1ae9b78461ebb9e788aacb47522076d3b5">PML_X_Distance</link>(position);
286 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[0]&#32;&lt;&#32;0)&#32;{
287 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XMinus;
288 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_XPlus;
290 &#32;&#32;&#32;&#32;}
291 &#32;&#32;&#32;&#32;sigmax&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaXMax;
293 &#32;&#32;&#32;&#32;sx.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaXMax);
295 &#32;&#32;&#32;&#32;sx.imag(sigmax&#32;/&#32;(omegaepsilon0));
296 &#32;&#32;}
297 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a8dbc61c674d9f04f6569ba5106d3a8cc">PML_in_Y</link>(position))&#32;{
298 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmay;
299 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1a125305f07aeb0d86e34eb2e06377be68">PML_Y_Distance</link>(position);
300 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(position[1]&#32;&lt;&#32;0)&#32;{
301 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YMinus;
302 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_YPlus;
304 &#32;&#32;&#32;&#32;}
305 &#32;&#32;&#32;&#32;sigmay&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaYMax;
307 &#32;&#32;&#32;&#32;sy.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaYMax);
309 &#32;&#32;&#32;&#32;sy.imag(sigmay&#32;/&#32;(omegaepsilon0));
310 &#32;&#32;}
311 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a4d44b84bc02139e3f22f871c8688c3c9">Preconditioner_PML_in_Z</link>(position,&#32;block))&#32;{
312 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmaz;
313 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1ab5cc5b32d443c2d8ceead062480bab00">Preconditioner_PML_Z_Distance</link>(position,&#32;block);
314 &#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.LayerThickness;
315 &#32;&#32;&#32;&#32;sigmaz&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax;
317 &#32;&#32;&#32;&#32;sz_p.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaZMax);
319 &#32;&#32;&#32;&#32;sz_p.imag(sigmaz&#32;/&#32;omegaepsilon0);
320 &#32;&#32;}
321 
322 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a1d1b67c2ab4c738f83293f9fddda8119">PML_in_Z</link>(position))&#32;{
323 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r,&#32;d,&#32;sigmaz;
324 &#32;&#32;&#32;&#32;r&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1a608043303e86a44dfae8f36baf963d86">PML_Z_Distance</link>(position);
325 &#32;&#32;&#32;&#32;d&#32;=&#32;GlobalParams.M_BC_Zplus;
326 &#32;&#32;&#32;&#32;sigmaz&#32;=&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_SigmaZMax;
328 &#32;&#32;&#32;&#32;sz.real(1&#32;+&#32;pow(r&#32;/&#32;d,&#32;GlobalParams.M_BC_DampeningExponent)&#32;*
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_BC_KappaZMax);
330 &#32;&#32;&#32;&#32;sz.imag(sigmaz&#32;/&#32;omegaepsilon0);
331 &#32;&#32;}
332 
333 &#32;&#32;sz&#32;+=&#32;sz_p;
334 
335 &#32;&#32;MaterialTensor[0][0]&#32;*=&#32;sy&#32;*&#32;sz&#32;/&#32;sx;
336 &#32;&#32;MaterialTensor[0][1]&#32;*=&#32;sz;
337 &#32;&#32;MaterialTensor[0][2]&#32;*=&#32;sy;
338 
339 &#32;&#32;MaterialTensor[1][0]&#32;*=&#32;sz;
340 &#32;&#32;MaterialTensor[1][1]&#32;*=&#32;sx&#32;*&#32;sz&#32;/&#32;sy;
341 &#32;&#32;MaterialTensor[1][2]&#32;*=&#32;sx;
342 
343 &#32;&#32;MaterialTensor[2][0]&#32;*=&#32;sy;
344 &#32;&#32;MaterialTensor[2][1]&#32;*=&#32;sx;
345 &#32;&#32;MaterialTensor[2][2]&#32;*=&#32;sx&#32;*&#32;sy&#32;/&#32;sz;
346 
347 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;MaterialTensor;
348 }
349 
350 std::complex&lt;double&gt;
351 InhomogenousTransformationCircular::gauss_product_2D_sphere(<emphasis class="keywordtype">double</emphasis>&#32;z,&#32;<emphasis class="keywordtype">int</emphasis>&#32;n,
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;R,&#32;<emphasis class="keywordtype">double</emphasis>&#32;Xc,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;Yc,
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*in_w)&#32;{
355 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*r&#32;=&#32;NULL;
356 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*t&#32;=&#32;NULL;
357 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*q&#32;=&#32;NULL;
358 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;*A&#32;=&#32;NULL;
359 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;B;
360 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;x,&#32;y;
361 &#32;&#32;std::complex&lt;double&gt;&#32;s(0.0,&#32;0.0);
362 
363 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;i,&#32;j;
364 
365 &#32;&#32;<emphasis class="comment">/*&#32;Load&#32;appropriate&#32;predefined&#32;table&#32;*/</emphasis>
366 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;GSPHERESIZE;&#32;i++)&#32;{
367 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(n&#32;==&#32;gsphere[i].n)&#32;{
368 &#32;&#32;&#32;&#32;&#32;&#32;r&#32;=&#32;gsphere[i].r;
369 &#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;gsphere[i].t;
370 &#32;&#32;&#32;&#32;&#32;&#32;q&#32;=&#32;gsphere[i].q;
371 &#32;&#32;&#32;&#32;&#32;&#32;A&#32;=&#32;gsphere[i].A;
372 &#32;&#32;&#32;&#32;&#32;&#32;B&#32;=&#32;gsphere[i].B;
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
374 &#32;&#32;&#32;&#32;}
375 &#32;&#32;}
376 
377 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(NULL&#32;==&#32;r)&#32;<emphasis class="keywordflow">return</emphasis>&#32;-1.0;
378 
379 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;n;&#32;i++)&#32;{
380 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(j&#32;=&#32;0;&#32;j&#32;&lt;&#32;n;&#32;j++)&#32;{
381 &#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;r[j]&#32;*&#32;q[i];
382 &#32;&#32;&#32;&#32;&#32;&#32;y&#32;=&#32;r[j]&#32;*&#32;t[i];
383 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;A[j]&#32;*&#32;in_w-&gt;<link linkend="class_waveguide_1a79986c7554f0cd73cb13a3494caf6eab">evaluate_for_Position</link>(R&#32;*&#32;x&#32;-&#32;Xc,&#32;R&#32;*&#32;y&#32;-&#32;Yc,&#32;z);
384 &#32;&#32;&#32;&#32;}
385 &#32;&#32;}
386 
387 &#32;&#32;s&#32;*=&#32;R&#32;*&#32;R&#32;*&#32;B;
388 
389 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;s;
390 }
391 
<link linkend="class_inhomogenous_transformation_circular_1a72926c2aabf7eb3c8b56aed37a439cb6">392 </link>std::complex&lt;double&gt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a72926c2aabf7eb3c8b56aed37a439cb6">InhomogenousTransformationCircular::evaluate_for_z</link>(
393 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_z,&#32;<link linkend="class_waveguide">Waveguide</link>&#32;*in_w)&#32;{
394 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r&#32;=&#32;GlobalParams.M_C_Dim1In&#32;+&#32;GlobalParams.M_C_Dim1Out;
395 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;gauss_product_2D_sphere(in_z,&#32;10,&#32;r,&#32;0,&#32;0,&#32;in_w);
396 }
397 
<link linkend="class_inhomogenous_transformation_circular_1a47af0c99415a86b9d14f85560b8c37d1">398 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a47af0c99415a86b9d14f85560b8c37d1">InhomogenousTransformationCircular::get_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;dof)<emphasis class="keyword">&#32;const&#32;</emphasis>{
399 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>()&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
400 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;3);
401 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>)&#32;{
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;3];
403 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;3];
405 &#32;&#32;&#32;&#32;}
406 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
407 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;HomogenousTransformationCircular::get_dof!&quot;</emphasis>
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
410 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
411 &#32;&#32;}
412 }
413 
<link linkend="class_inhomogenous_transformation_circular_1a5237ae50c525178bf178aa8bbd39851b">414 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a5237ae50c525178bf178aa8bbd39851b">InhomogenousTransformationCircular::get_free_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;in_dof)<emphasis class="keyword">&#32;const&#32;</emphasis>{
415 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;=&#32;in_dof&#32;+&#32;3;
416 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>()&#32;-&#32;3&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
417 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;3);
418 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>)&#32;{
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;3];
420 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;3];
422 &#32;&#32;&#32;&#32;}
423 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
424 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;HomogenousTransformationCircular::get_free_dof!&quot;</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
427 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
428 &#32;&#32;}
429 }
430 
<link linkend="class_inhomogenous_transformation_circular_1a32a2a00f0f97fe31e17a4e51e9bd5086">431 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a32a2a00f0f97fe31e17a4e51e9bd5086">InhomogenousTransformationCircular::set_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;dof,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_val)&#32;{
432 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>()&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
433 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;3);
434 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>)&#32;{
435 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;3]&#32;=&#32;in_val;
436 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;0)&#32;{
437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[0].dofs_l[dof&#32;%&#32;3]&#32;=&#32;in_val;
438 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
439 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;3]&#32;=&#32;in_val;
440 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;3]&#32;=&#32;in_val;
441 &#32;&#32;&#32;&#32;}
442 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
443 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;HomogenousTransformationCircular::set_dof!&quot;</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
446 &#32;&#32;}
447 }
448 
<link linkend="class_inhomogenous_transformation_circular_1a36465b5c3ea82329c2186f7cf4b75044">449 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a36465b5c3ea82329c2186f7cf4b75044">InhomogenousTransformationCircular::set_free_dof</link>(<emphasis class="keywordtype">int</emphasis>&#32;in_dof,
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_val)&#32;{
451 &#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;dof&#32;=&#32;in_dof&#32;+&#32;3;
452 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(dof&#32;&lt;&#32;(<emphasis class="keywordtype">int</emphasis>)<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>()&#32;-&#32;3&#32;&amp;&amp;&#32;dof&#32;&gt;=&#32;0)&#32;{
453 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;sector&#32;=&#32;floor(dof&#32;/&#32;3);
454 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>)&#32;{
455 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;3]&#32;=&#32;in_val;
456 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(sector&#32;==&#32;0)&#32;{
457 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[0].dofs_l[dof&#32;%&#32;3]&#32;=&#32;in_val;
458 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector].dofs_l[dof&#32;%&#32;3]&#32;=&#32;in_val;
460 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[sector&#32;-&#32;1].dofs_r[dof&#32;%&#32;3]&#32;=&#32;in_val;
461 &#32;&#32;&#32;&#32;}
462 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
463 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Critical:&#32;DOF-index&#32;out&#32;of&#32;bounds&#32;in&#32;&quot;</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;HomogenousTransformationCircular::set_free_dof!&quot;</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
466 &#32;&#32;}
467 }
468 
<link linkend="class_inhomogenous_transformation_circular_1a07a16c6e19f6727a5dea930da36b75ad">469 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a07a16c6e19f6727a5dea930da36b75ad">InhomogenousTransformationCircular::Sector_Length</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
470 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;GlobalParams.M_R_ZLength&#32;/&#32;(double)GlobalParams.M_W_Sectors;
471 }
472 
<link linkend="class_inhomogenous_transformation_circular_1afa3cb42cd9f1aff1c55c314292f8210f">473 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1afa3cb42cd9f1aff1c55c314292f8210f">InhomogenousTransformationCircular::estimate_and_initialize</link>()&#32;{
474 &#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>.reserve(<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>);
475 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m_0&#32;=&#32;GlobalParams.M_W_Delta&#32;/&#32;2.0;
476 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m_1&#32;=&#32;-GlobalParams.M_W_Delta&#32;/&#32;2.0;
477 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r_0&#32;=&#32;GlobalParams.M_C_Dim1In;
478 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;r_1&#32;=&#32;GlobalParams.M_C_Dim1Out;
479 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>&#32;==&#32;1)&#32;{
480 &#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;3&gt;</link>&#32;temp12(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">true</emphasis>,&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2,
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_R_ZLength&#32;/&#32;2);
482 &#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>.push_back(temp12);
483 &#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[0].set_properties_force(
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_W_Delta&#32;/&#32;2.0,&#32;-GlobalParams.M_W_Delta&#32;/&#32;2.0,
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GlobalParams.M_C_Dim1In,&#32;GlobalParams.M_C_Dim1Out,&#32;0,&#32;0);
486 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
487 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;length&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1aa43e78f29f12ce9f6361f95e0a49ee7d">Sector_Length</link>();
488 &#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;3&gt;</link>&#32;temp(<emphasis class="keyword">true</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,&#32;-GlobalParams.M_R_ZLength&#32;/&#32;(2.0),
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;2.0&#32;+&#32;length);
490 &#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>.push_back(temp);
491 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>;&#32;i++)&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_sector">Sector&lt;3&gt;</link>&#32;temp2(<emphasis class="keyword">false</emphasis>,&#32;<emphasis class="keyword">false</emphasis>,
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;(2.0)&#32;+&#32;length&#32;*&#32;(1.0&#32;*&#32;i),
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-GlobalParams.M_R_ZLength&#32;/&#32;(2.0)&#32;+&#32;length&#32;*&#32;(i&#32;+&#32;1.0));
495 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>.push_back(temp2);
496 &#32;&#32;&#32;&#32;}
497 
498 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;length_rel&#32;=&#32;1.0&#32;/&#32;((double)(sectors));
499 &#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[0].set_properties_force(
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_0,&#32;InterpolationPolynomialZeroDerivative(length_rel,&#32;m_0,&#32;m_1),&#32;r_0,
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(length_rel,&#32;r_0,&#32;r_1),&#32;0,
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(length_rel,&#32;m_0,&#32;m_1,&#32;0,&#32;0));
503 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>;&#32;i++)&#32;{
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z_l&#32;=&#32;i&#32;*&#32;length_rel;
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;z_r&#32;=&#32;(i&#32;+&#32;1)&#32;*&#32;length_rel;
506 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[i].set_properties_force(
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_l,&#32;m_0,&#32;m_1),
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_r,&#32;m_0,&#32;m_1),
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_l,&#32;r_0,&#32;r_1),
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialZeroDerivative(z_r,&#32;r_0,&#32;r_1),
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(z_l,&#32;m_0,&#32;m_1,&#32;0,&#32;0),
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InterpolationPolynomialDerivative(z_r,&#32;m_0,&#32;m_1,&#32;0,&#32;0));
513 &#32;&#32;&#32;&#32;}
514 &#32;&#32;}
515 
516 &#32;&#32;<emphasis class="comment">//&#32;for&#32;(unsigned&#32;int&#32;i&#32;=&#32;0;&#32;&#32;i&#32;&lt;&#32;NFreeDofs();&#32;++&#32;i)&#32;{</emphasis>
517 &#32;&#32;<emphasis class="comment">//&#32;&#32;InitialDofs[i]&#32;=&#32;this-&gt;get_dof(i,&#32;true);</emphasis>
518 &#32;&#32;<emphasis class="comment">//}</emphasis>
519 }
520 
<link linkend="class_inhomogenous_transformation_circular_1a8d10e2f3dd9a9d388f752afc90adb3e5">521 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a8d10e2f3dd9a9d388f752afc90adb3e5">InhomogenousTransformationCircular::get_r</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
522 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
523 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[two.first].get_r(two.second);
524 }
525 
<link linkend="class_inhomogenous_transformation_circular_1a0965c1dd67106af6b91d7ef82bf6d27b">526 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a0965c1dd67106af6b91d7ef82bf6d27b">InhomogenousTransformationCircular::get_m</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
527 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
528 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[two.first].get_m(two.second);
529 }
530 
<link linkend="class_inhomogenous_transformation_circular_1abc26eb4fee67b8e7baf48dc607f0b8d1">531 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1abc26eb4fee67b8e7baf48dc607f0b8d1">InhomogenousTransformationCircular::get_v</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
532 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
533 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[two.first].get_v(two.second);
534 }
535 
<link linkend="class_inhomogenous_transformation_circular_1a561d8bc7277ec12f14f5ad08a455e207">536 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a561d8bc7277ec12f14f5ad08a455e207">InhomogenousTransformationCircular::get_Q1</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
537 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
538 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[two.first].getQ1(two.second);
539 }
540 
<link linkend="class_inhomogenous_transformation_circular_1a4ce74da5ef6e98d7f59e2e8579f13df8">541 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a4ce74da5ef6e98d7f59e2e8579f13df8">InhomogenousTransformationCircular::get_Q2</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
542 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
543 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[two.first].getQ2(two.second);
544 }
545 
<link linkend="class_inhomogenous_transformation_circular_1a51184fd504be95826363f3522b1d82e1">546 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a51184fd504be95826363f3522b1d82e1">InhomogenousTransformationCircular::get_Q3</link>(<emphasis class="keywordtype">double</emphasis>&#32;z_in)<emphasis class="keyword">&#32;const&#32;</emphasis>{
547 &#32;&#32;std::pair&lt;int,&#32;double&gt;&#32;two&#32;=&#32;<link linkend="class_space_transformation_1af9803c5e0dc6947ae08e428d3953e914">Z_to_Sector_and_local_z</link>(z_in);
548 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1adf379e3803394edf08b26e5e4211bef6">case_sectors</link>[two.first].getQ3(two.second);
549 }
550 
<link linkend="class_inhomogenous_transformation_circular_1a471f574ec6e6e567dd6909ba387b1166">551 </link>Vector&lt;double&gt;&#32;<link linkend="class_inhomogenous_transformation_circular_1a471f574ec6e6e567dd6909ba387b1166">InhomogenousTransformationCircular::Dofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
552 &#32;&#32;Vector&lt;double&gt;&#32;ret;
553 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;total&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>();
554 &#32;&#32;ret.reinit(total);
555 &#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;total;&#32;i++)&#32;{
556 &#32;&#32;&#32;&#32;ret[i]&#32;=&#32;<link linkend="class_homogenous_transformation_rectangular_1aee91e2e47daaceb2553c21d321f94802">get_dof</link>(i);
557 &#32;&#32;}
558 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
559 }
560 
<link linkend="class_inhomogenous_transformation_circular_1aca05178f5abd01fea3336ba7b6e3685f">561 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1aca05178f5abd01fea3336ba7b6e3685f">InhomogenousTransformationCircular::NFreeDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
562 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>()&#32;-&#32;6;
563 }
564 
<link linkend="class_inhomogenous_transformation_circular_1ac5ecd2e9c068eeb1483669606321ad6d">565 </link><emphasis class="keywordtype">bool</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1ac5ecd2e9c068eeb1483669606321ad6d">InhomogenousTransformationCircular::IsDofFree</link>(<emphasis class="keywordtype">int</emphasis>&#32;index)<emphasis class="keyword">&#32;const&#32;</emphasis>{
566 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;index&#32;&gt;&#32;2&#32;&amp;&amp;&#32;index&#32;&lt;&#32;(int)<link linkend="class_homogenous_transformation_rectangular_1a4460090bfb1dcd2ab2c44f2f4561a0d0">NDofs</link>()&#32;-&#32;3;
567 }
568 
<link linkend="class_inhomogenous_transformation_circular_1a7f1220326d89857f5de36e8bbcca2b53">569 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a7f1220326d89857f5de36e8bbcca2b53">InhomogenousTransformationCircular::Print</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
570 &#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Printing&#32;is&#32;not&#32;yet&#32;implemented.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
571 }
572 
<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">573 </link><emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;<link linkend="class_inhomogenous_transformation_circular_1a9a6e0c656aa21a476e608d1e54dd456b">InhomogenousTransformationCircular::NDofs</link>()<emphasis class="keyword">&#32;const&#32;</emphasis>{
574 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="class_homogenous_transformation_rectangular_1a5ac833552cd9a92d383883f7f5966540">sectors</link>&#32;*&#32;3&#32;+&#32;3;
575 }
576 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
