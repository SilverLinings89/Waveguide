<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_exact_solution_8cpp">
    <title>ExactSolution.cpp File Reference</title>
    <programlisting>#include &quot;ExactSolution.h&quot;</programlisting>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;complex&gt;</programlisting>
    <programlisting>#include &lt;string&gt;</programlisting>
    <programlisting>#include &lt;vector&gt;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &quot;PointVal.h&quot;</programlisting>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="_exact_solution_8cpp_1aee9d9ab71b84d22a6028152f3258f341">ExactSolutionFlag_CPP</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="_exact_solution_8cpp_1a17e21330588883bdeae365730d1347e6">scientific_string_to_double</link> (
std::string inp)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Helpers/ExactSolution.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 
2 <emphasis class="preprocessor">#ifndef&#32;ExactSolutionFlag_CPP</emphasis>
3 <emphasis class="preprocessor">#define&#32;ExactSolutionFlag_CPP</emphasis>
4 <emphasis class="preprocessor">#include&#32;&quot;ExactSolution.h&quot;</emphasis>
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;complex&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;string&gt;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;PointVal.h&quot;</emphasis>
12 
<link linkend="class_exact_solution_1ae34a7cff183d6299852f404eecee0ac5">13 </link><emphasis class="keywordtype">double</emphasis>&#32;<link linkend="class_exact_solution_1ae34a7cff183d6299852f404eecee0ac5">ExactSolution::value</link>(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3&gt;&#32;&amp;in_p,
14 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;component)<emphasis class="keyword">&#32;const&#32;</emphasis>{
15 &#32;&#32;Point&lt;3,&#32;double&gt;&#32;p&#32;=&#32;in_p;
16 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_dual)&#32;p[2]&#32;=&#32;-in_p[2];
17 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;zero&#32;=&#32;<emphasis class="keyword">false</emphasis>;
18 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[0]&#32;&gt;&#32;GlobalParams.M_R_XLength&#32;/&#32;2.0&#32;-&#32;GlobalParams.M_BC_XPlus)
19 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
20 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[0]&#32;&lt;&#32;-GlobalParams.M_R_XLength&#32;/&#32;2.0&#32;+&#32;GlobalParams.M_BC_XMinus)
21 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
22 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[1]&#32;&gt;&#32;GlobalParams.M_R_YLength&#32;/&#32;2.0&#32;-&#32;GlobalParams.M_BC_YPlus)
23 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
24 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[1]&#32;&lt;&#32;-GlobalParams.M_R_YLength&#32;/&#32;2.0&#32;+&#32;GlobalParams.M_BC_YMinus)
25 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
26 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[2]&#32;&gt;&#32;GlobalParams.M_R_ZLength&#32;/&#32;2.0)&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
27 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(zero)&#32;{
28 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
29 &#32;&#32;}
30 
31 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_rectangular)&#32;{
32 &#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;ret_val(0.0,&#32;0.0);
33 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;delta&#32;=&#32;abs(mesh_points[0]&#32;-&#32;mesh_points[1]);
34 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;mesh_number&#32;=&#32;mesh_points.size();
35 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!(abs(p(1))&#32;&gt;=&#32;mesh_points[0]&#32;||&#32;abs(p(0))&#32;&gt;=&#32;mesh_points[0]))&#32;{
36 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ix&#32;=&#32;0;
37 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;iy&#32;=&#32;0;
38 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(mesh_points[ix]&#32;&gt;&#32;p(0)&#32;&amp;&amp;&#32;ix&#32;&lt;&#32;mesh_number)&#32;ix++;
39 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(mesh_points[iy]&#32;&gt;&#32;p(1)&#32;&amp;&amp;&#32;iy&#32;&lt;&#32;mesh_number)&#32;iy++;
40 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ix&#32;==&#32;0&#32;||&#32;iy&#32;==&#32;0&#32;||&#32;ix&#32;==&#32;mesh_number&#32;||&#32;iy&#32;==&#32;mesh_number)&#32;{
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
42 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;dx&#32;=&#32;(p(0)&#32;-&#32;mesh_points[ix])&#32;/&#32;delta;
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;dy&#32;=&#32;(p(1)&#32;-&#32;mesh_points[iy])&#32;/&#32;delta;
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m1m1&#32;=&#32;dx&#32;*&#32;dy;
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m1p1&#32;=&#32;dx&#32;*&#32;(1.0&#32;-&#32;dy);
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1p1&#32;=&#32;(1.0&#32;-&#32;dx)&#32;*&#32;(1.0&#32;-&#32;dy);
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1m1&#32;=&#32;(1.0&#32;-&#32;dx)&#32;*&#32;dy;
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>&#32;(component&#32;%&#32;3)&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;0:
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.real(p1p1&#32;*&#32;vals[ix][iy].Ex.real()&#32;+
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ex.real()&#32;+
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ex.real()&#32;+
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ex.real());
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.imag(p1p1&#32;*&#32;vals[ix][iy].Ex.imag()&#32;+
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ex.imag()&#32;+
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ex.imag()&#32;+
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ex.imag());
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;ret_val&#32;*=&#32;-1.0;</emphasis>
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;1:
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.real(p1p1&#32;*&#32;vals[ix][iy].Ey.real()&#32;+
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ey.real()&#32;+
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ey.real()&#32;+
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ey.real());
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.imag(p1p1&#32;*&#32;vals[ix][iy].Ey.imag()&#32;+
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ey.imag()&#32;+
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ey.imag()&#32;+
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ey.imag());
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;2:
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.real(p1p1&#32;*&#32;vals[ix][iy].Ez.real()&#32;+
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ez.real()&#32;+
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ez.real()&#32;+
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ez.real());
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.imag(p1p1&#32;*&#32;vals[ix][iy].Ez.imag()&#32;+
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ez.imag()&#32;+
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ez.imag()&#32;+
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ez.imag());
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>:
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.real(0.0);
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret_val.imag(0.0);
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
86 &#32;&#32;&#32;&#32;&#32;&#32;}
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(abs(p(0))&#32;&lt;=&#32;GlobalParams.M_C_Dim1In&#32;/&#32;2.0&#32;&amp;&amp;
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abs(p(1))&#32;&lt;=&#32;GlobalParams.M_C_Dim2In&#32;/&#32;2.0)&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;std::sqrt(GlobalParams.M_W_epsilonin);
91 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;std::sqrt(GlobalParams.M_W_epsilonout);
93 &#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;k&#32;=&#32;n&#32;*&#32;2&#32;*&#32;GlobalParams.C_Pi&#32;/&#32;GlobalParams.M_W_Lambda;
95 &#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;phase(0.0,&#32;(p(2)&#32;-&#32;GlobalParams.Minimum_Z)&#32;*&#32;k);
96 &#32;&#32;&#32;&#32;&#32;&#32;ret_val&#32;*=&#32;std::exp(phase);
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(component&#32;&gt;&#32;2)&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret_val.imag();
99 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret_val.real();
101 &#32;&#32;&#32;&#32;&#32;&#32;}
102 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0.0;
104 &#32;&#32;&#32;&#32;}
105 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
106 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ModeMan.get_input_component(component,&#32;p,&#32;0);
107 &#32;&#32;}
108 }
109 
<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">110 </link><emphasis class="keywordtype">void</emphasis>&#32;<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">ExactSolution::vector_value</link>(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3&gt;&#32;&amp;in_p,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector&lt;double&gt;&#32;&amp;values)<emphasis class="keyword">&#32;const&#32;</emphasis>{
112 &#32;&#32;Point&lt;3,&#32;double&gt;&#32;p&#32;=&#32;in_p;
113 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_dual)&#32;p[2]&#32;=&#32;-in_p[2];
114 &#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;zero&#32;=&#32;<emphasis class="keyword">false</emphasis>;
115 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[0]&#32;&gt;&#32;GlobalParams.M_R_XLength&#32;/&#32;2.0&#32;-&#32;GlobalParams.M_BC_XPlus)
116 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
117 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[0]&#32;&lt;&#32;-GlobalParams.M_R_XLength&#32;/&#32;2.0&#32;+&#32;GlobalParams.M_BC_XMinus)
118 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
119 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[1]&#32;&gt;&#32;GlobalParams.M_R_YLength&#32;/&#32;2.0&#32;-&#32;GlobalParams.M_BC_YPlus)
120 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
121 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[1]&#32;&lt;&#32;-GlobalParams.M_R_YLength&#32;/&#32;2.0&#32;+&#32;GlobalParams.M_BC_YMinus)
122 &#32;&#32;&#32;&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
123 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(p[2]&#32;&gt;&#32;GlobalParams.M_R_ZLength&#32;/&#32;2.0)&#32;zero&#32;=&#32;<emphasis class="keyword">true</emphasis>;
124 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(zero)&#32;{
125 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;values.size();&#32;i++)&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;values[i]&#32;=&#32;0.0;
127 &#32;&#32;&#32;&#32;}
128 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
129 &#32;&#32;}
130 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_rectangular)&#32;{
131 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;delta&#32;=&#32;abs(mesh_points[0]&#32;-&#32;mesh_points[1]);
132 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;mesh_number&#32;=&#32;mesh_points.size();
133 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(!(abs(p(1))&#32;&gt;=&#32;mesh_points[0]&#32;||&#32;abs(p(0))&#32;&gt;=&#32;mesh_points[0]))&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ix&#32;=&#32;0;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;iy&#32;=&#32;0;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(mesh_points[ix]&#32;&gt;&#32;p(0)&#32;&amp;&amp;&#32;ix&#32;&lt;&#32;mesh_number)&#32;ix++;
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(mesh_points[iy]&#32;&gt;&#32;p(1)&#32;&amp;&amp;&#32;iy&#32;&lt;&#32;mesh_number)&#32;iy++;
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ix&#32;==&#32;0&#32;||&#32;iy&#32;==&#32;0&#32;||&#32;ix&#32;==&#32;mesh_number&#32;||&#32;iy&#32;==&#32;mesh_number)&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;values.size();&#32;i++)&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[i]&#32;=&#32;0.0;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
143 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;dx&#32;=&#32;(p(0)&#32;-&#32;mesh_points[ix])&#32;/&#32;delta;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;dy&#32;=&#32;(p(1)&#32;-&#32;mesh_points[iy])&#32;/&#32;delta;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m1m1&#32;=&#32;dx&#32;*&#32;dy;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;m1p1&#32;=&#32;dx&#32;*&#32;(1.0&#32;-&#32;dy);
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1p1&#32;=&#32;(1.0&#32;-&#32;dx)&#32;*&#32;(1.0&#32;-&#32;dy);
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;p1m1&#32;=&#32;(1.0&#32;-&#32;dx)&#32;*&#32;dy;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[0]&#32;=&#32;p1p1&#32;*&#32;vals[ix][iy].Ex.real()&#32;+
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ex.real()&#32;+
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ex.real()&#32;+
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ex.real();
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[1]&#32;=&#32;p1p1&#32;*&#32;vals[ix][iy].Ey.real()&#32;+
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ey.real()&#32;+
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ey.real()&#32;+
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ey.real();
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[2]&#32;=&#32;p1p1&#32;*&#32;vals[ix][iy].Ez.real()&#32;+
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ez.real()&#32;+
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ez.real()&#32;+
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ez.real();
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[3]&#32;=&#32;p1p1&#32;*&#32;vals[ix][iy].Ex.imag()&#32;+
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ex.imag()&#32;+
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ex.imag()&#32;+
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ex.imag();
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[4]&#32;=&#32;p1p1&#32;*&#32;vals[ix][iy].Ey.imag()&#32;+
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ey.imag()&#32;+
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ey.imag()&#32;+
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ey.imag();
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[5]&#32;=&#32;p1p1&#32;*&#32;vals[ix][iy].Ez.imag()&#32;+
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p1m1&#32;*&#32;vals[ix][iy&#32;-&#32;1].Ez.imag()&#32;+
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1m1&#32;*&#32;vals[ix&#32;-&#32;1][iy&#32;-&#32;1].Ez.imag()&#32;+
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m1p1&#32;*&#32;vals[ix&#32;-&#32;1][iy].Ez.imag();
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;n;
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(abs(p(0))&#32;&lt;=&#32;GlobalParams.M_C_Dim1In&#32;/&#32;2.0&#32;&amp;&amp;
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abs(p(1))&#32;&lt;=&#32;GlobalParams.M_C_Dim2In&#32;/&#32;2.0)&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;std::sqrt(GlobalParams.M_W_epsilonin);
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;std::sqrt(GlobalParams.M_W_epsilonout);
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;k&#32;=&#32;n&#32;*&#32;2&#32;*&#32;GlobalParams.C_Pi&#32;/&#32;GlobalParams.M_W_Lambda;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;phase(
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.0,&#32;-(p(2)&#32;+&#32;GlobalParams.M_R_ZLength&#32;/&#32;2.0)&#32;*&#32;k);
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;phase&#32;=&#32;std::exp(phase);
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;komp&#32;=&#32;0;&#32;komp&#32;&lt;&#32;3;&#32;komp++)&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::complex&lt;double&gt;&#32;entr(values[0&#32;+&#32;komp],&#32;values[3&#32;+&#32;komp]);
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;entr&#32;*=&#32;phase;
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[0&#32;+&#32;komp]&#32;=&#32;entr.real();
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[3&#32;+&#32;komp]&#32;=&#32;entr.imag();
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;values[0]&#32;*=&#32;-1.0;</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//&#32;values[3]&#32;*=&#32;-1.0;</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
194 &#32;&#32;&#32;&#32;&#32;&#32;}
195 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;values.size();&#32;i++)&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;values[i]&#32;=&#32;0.0;
198 &#32;&#32;&#32;&#32;&#32;&#32;}
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>;
200 &#32;&#32;&#32;&#32;}
201 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
202 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;c&#32;=&#32;0;&#32;c&#32;&lt;&#32;6;&#32;++c)
203 &#32;&#32;&#32;&#32;&#32;&#32;values[c]&#32;=&#32;ModeMan.get_input_component(c,&#32;p,&#32;0);
204 &#32;&#32;}
205 }
206 
207 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ExactSolution::curl(
208 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;Point&lt;3&gt;&#32;&amp;in_p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
209 &#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">double</emphasis>&#32;h&#32;=&#32;0.0001;
210 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
211 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_rectangular)&#32;{
212 &#32;&#32;&#32;&#32;Vector&lt;double&gt;&#32;dxF,&#32;dyF,&#32;dzF,&#32;val;
213 &#32;&#32;&#32;&#32;dxF.reinit(6,&#32;<emphasis class="keyword">false</emphasis>);
214 &#32;&#32;&#32;&#32;dyF.reinit(6,&#32;<emphasis class="keyword">false</emphasis>);
215 &#32;&#32;&#32;&#32;dzF.reinit(6,&#32;<emphasis class="keyword">false</emphasis>);
216 &#32;&#32;&#32;&#32;val.reinit(6,&#32;<emphasis class="keyword">false</emphasis>);
217 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(in_p,&#32;val);
218 &#32;&#32;&#32;&#32;Point&lt;3&gt;&#32;deltap&#32;=&#32;in_p;
219 &#32;&#32;&#32;&#32;deltap[0]&#32;=&#32;deltap[0]&#32;+&#32;h;
220 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(deltap,&#32;dxF);
221 &#32;&#32;&#32;&#32;deltap&#32;=&#32;in_p;
222 &#32;&#32;&#32;&#32;deltap[1]&#32;=&#32;deltap[1]&#32;+&#32;h;
223 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(deltap,&#32;dyF);
224 &#32;&#32;&#32;&#32;deltap&#32;=&#32;in_p;
225 &#32;&#32;&#32;&#32;deltap[1]&#32;=&#32;deltap[1]&#32;+&#32;h;
226 &#32;&#32;&#32;&#32;this-&gt;<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(deltap,&#32;dzF);
227 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;dxF[i]&#32;=&#32;(dxF[i]&#32;-&#32;val[i])&#32;/&#32;h;
229 &#32;&#32;&#32;&#32;&#32;&#32;dyF[i]&#32;=&#32;(dyF[i]&#32;-&#32;val[i])&#32;/&#32;h;
230 &#32;&#32;&#32;&#32;&#32;&#32;dzF[i]&#32;=&#32;(dzF[i]&#32;-&#32;val[i])&#32;/&#32;h;
231 &#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;ret[0].real(dyF[2]&#32;-&#32;dzF[1]);
233 &#32;&#32;&#32;&#32;ret[0].imag(dyF[5]&#32;-&#32;dzF[4]);
234 &#32;&#32;&#32;&#32;ret[1].real(dzF[0]&#32;-&#32;dxF[2]);
235 &#32;&#32;&#32;&#32;ret[1].imag(dzF[3]&#32;-&#32;dxF[5]);
236 &#32;&#32;&#32;&#32;ret[2].real(dxF[1]&#32;-&#32;dyF[0]);
237 &#32;&#32;&#32;&#32;ret[2].imag(dxF[4]&#32;-&#32;dyF[3]);
238 &#32;&#32;}
239 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
240 }
241 
242 Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ExactSolution::val(
243 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;Point&lt;3&gt;&#32;&amp;in_p)<emphasis class="keyword">&#32;const&#32;</emphasis>{
244 &#32;&#32;Tensor&lt;1,&#32;3,&#32;std::complex&lt;double&gt;&gt;&#32;ret;
245 &#32;&#32;Vector&lt;double&gt;&#32;temp;
246 &#32;&#32;temp.reinit(6,&#32;<emphasis class="keyword">false</emphasis>);
247 &#32;&#32;<link linkend="class_exact_solution_1a1cafd1cf8d7f91d178c87a210c4800b2">vector_value</link>(in_p,&#32;temp);
248 &#32;&#32;ret[0].real(temp[0]);
249 &#32;&#32;ret[0].imag(temp[3]);
250 &#32;&#32;ret[1].real(temp[1]);
251 &#32;&#32;ret[1].imag(temp[4]);
252 &#32;&#32;ret[2].real(temp[2]);
253 &#32;&#32;ret[2].imag(temp[5]);
254 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
255 }
256 
257 std::vector&lt;std::string&gt;&#32;ExactSolution::split(std::string&#32;str)<emphasis class="keyword">&#32;const&#32;</emphasis>{
258 &#32;&#32;std::vector&lt;std::string&gt;&#32;ret;
259 &#32;&#32;std::istringstream&#32;iss(str);
260 &#32;&#32;std::string&#32;token;
261 &#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(std::getline(iss,&#32;token,&#32;<emphasis class="charliteral">&apos;\t&apos;</emphasis>))&#32;ret.push_back(token);
262 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;ret;
263 }
264 
265 <emphasis class="keywordtype">double</emphasis>&#32;scientific_string_to_double(std::string&#32;inp)&#32;{
266 &#32;&#32;std::istringstream&#32;os(inp);
267 &#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;d;
268 &#32;&#32;os&#32;&gt;&gt;&#32;d;
269 &#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;d;
270 }
271 
272 ExactSolution::ExactSolution(<emphasis class="keywordtype">bool</emphasis>&#32;in_rectangular,&#32;<emphasis class="keywordtype">bool</emphasis>&#32;in_dual)
273 &#32;&#32;&#32;&#32;:&#32;Function&lt;3&gt;(6)&#32;{
274 &#32;&#32;is_dual&#32;=&#32;in_dual;
275 &#32;&#32;is_rectangular&#32;=&#32;in_rectangular;
276 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_rectangular)&#32;{
277 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Preparing&#32;exact&#32;solution&#32;for&#32;rectangular&#32;waveguide.&quot;</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
279 &#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;{
280 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Preparing&#32;exact&#32;solution&#32;for&#32;circular&#32;waveguide.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
281 &#32;&#32;}
282 &#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(is_rectangular)&#32;{
283 &#32;&#32;&#32;&#32;std::ifstream&#32;input(<emphasis class="stringliteral">&quot;Modes/mode_1550nm.dat&quot;</emphasis>);
284 &#32;&#32;&#32;&#32;std::string&#32;line;
285 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;l_val&#32;=&#32;3.0;
286 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;cnt_a&#32;=&#32;0;
287 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(std::getline(input,&#32;line))&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;ls&#32;=&#32;split(line);
289 &#32;&#32;&#32;&#32;&#32;&#32;std::istringstream&#32;iss(ls[2]);
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;x;
291 &#32;&#32;&#32;&#32;&#32;&#32;iss&#32;&gt;&gt;&#32;x;
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(x&#32;&lt;&#32;l_val)&#32;{
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mesh_points.push_back(x);
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l_val&#32;=&#32;x;
295 &#32;&#32;&#32;&#32;&#32;&#32;}
296 &#32;&#32;&#32;&#32;&#32;&#32;cnt_a++;
297 &#32;&#32;&#32;&#32;}
298 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;cnt_a&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;-&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;mesh_points.size()&#32;&lt;&lt;&#32;std::endl;
299 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;mesh_points.size();
300 &#32;&#32;&#32;&#32;vals&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="class_point_val">PointVal</link>&#32;*[cnt];
301 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;cnt;&#32;i++)&#32;{
302 &#32;&#32;&#32;&#32;&#32;&#32;vals[i]&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="class_point_val">PointVal</link>[cnt];
303 &#32;&#32;&#32;&#32;}
304 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;cnt&#32;&lt;&lt;&#32;std::endl;
305 &#32;&#32;&#32;&#32;std::ifstream&#32;input2(<emphasis class="stringliteral">&quot;Modes/mode_1550nm.dat&quot;</emphasis>);
306 &#32;&#32;&#32;&#32;std::string&#32;line2;
307 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;max&#32;=&#32;0.0;
308 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;cnt;&#32;++i)&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;cnt;&#32;++j)&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getline(input2,&#32;line2);
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;ls&#32;=&#32;split(line2);
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;d1,&#32;d2,&#32;d3,&#32;d4,&#32;d5,&#32;d6;
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d1&#32;=&#32;scientific_string_to_double(ls[4]);
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d2&#32;=&#32;scientific_string_to_double(ls[5]);
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d3&#32;=&#32;scientific_string_to_double(ls[3]);
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d4&#32;=&#32;scientific_string_to_double(ls[7]);
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d5&#32;=&#32;scientific_string_to_double(ls[8]);
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d6&#32;=&#32;scientific_string_to_double(ls[6]);
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(d1&#32;&gt;&#32;max)&#32;max&#32;=&#32;d1;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(d2&#32;&gt;&#32;max)&#32;max&#32;=&#32;d2;
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(d3&#32;&gt;&#32;max)&#32;max&#32;=&#32;d3;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(d4&#32;&gt;&#32;max)&#32;max&#32;=&#32;d4;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(d5&#32;&gt;&#32;max)&#32;max&#32;=&#32;d5;
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(d6&#32;&gt;&#32;max)&#32;max&#32;=&#32;d6;
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vals[i][j].set(d1,&#32;d2,&#32;d3,&#32;d4,&#32;d5,&#32;d6);
326 &#32;&#32;&#32;&#32;&#32;&#32;}
327 &#32;&#32;&#32;&#32;}
328 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;cnt;&#32;++i)&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;cnt;&#32;++j)&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vals[j][i].rescale(1.0&#32;/&#32;max);
331 &#32;&#32;&#32;&#32;&#32;&#32;}
332 &#32;&#32;&#32;&#32;}
333 
334 &#32;&#32;&#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;&#32;Mesh&#32;constant:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;abs(mesh_points[0]&#32;-&#32;mesh_points[1])
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::endl;
336 &#32;&#32;}
337 &#32;&#32;deallog&#32;&lt;&lt;&#32;<emphasis class="stringliteral">&quot;Done&#32;Preparing&#32;exact&#32;solution.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
338 }
339 
340 <emphasis class="preprocessor">#endif</emphasis>
    </computeroutput></literallayout>
</section>
