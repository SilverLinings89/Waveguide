<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="class_round_mesh_generator">
<title>RoundMeshGenerator class Reference</title>
<para>
    <programlisting>#include <link linkend="_round_mesh_generator_8h">&lt;RoundMeshGenerator.h&gt;</link></programlisting>
</para>
        <section>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>parallel::distributed::Triangulation&lt; 3 &gt;::active_cell_iterator cell</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>parallel::distributed::Triangulation&lt; 3 &gt;::active_cell_iterator endc</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>SpaceTransformation * ct</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>unsigned int Layers</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3 &gt; origin</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std_cxx11::array&lt; Tensor&lt; 1, 3 &gt;, 3 &gt; edges</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; unsigned int &gt; subs</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double MaxDistX</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const double MaxDistY</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_round_mesh_generator_1aeb71db26cf3eeca62c5c867b0cf8b558">RoundMeshGenerator</link> (
<link linkend="class_space_transformation">SpaceTransformation</link> * in_ct)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="class_round_mesh_generator_1a07ee2011d802b9a190d11d56eebb76d3">~RoundMeshGenerator</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_round_mesh_generator_1a6853ef55471fb74a7e4a7c3a3b0f2649">refine_global</link> (
parallel::distributed::Triangulation&lt; 3 &gt; * in_tria, unsigned int times)<para><emphasis>This function is intended to execute a global refinement of the mesh.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_round_mesh_generator_1ae2a55c58cfe3c69479237921e284e0b8">refine_internal</link> (
parallel::distributed::Triangulation&lt; 3 &gt; * in_tria, unsigned int times)<para><emphasis>This function is intended to execute an internal refinement of the mesh.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_round_mesh_generator_1a9bdb7b90cc1988eb80c441ee8f85b0a0">refine_proximity</link> (
parallel::distributed::Triangulation&lt; 3 &gt; * in_tria, unsigned int times, double factor)<para><emphasis>This function is intended to execute a refinement inside and near the waveguide boundary.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_round_mesh_generator_1ae28b3d9461233b9de1ce366c0f2458bd">math_coordinate_in_waveguide</link> (
Point&lt; 3 &gt; position)<para><emphasis>This function checks if the given coordinate is inside the waveguide or not.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="class_round_mesh_generator_1aba31fbd62ab56899c0cd06c5257420c7">phys_coordinate_in_waveguide</link> (
Point&lt; 3 &gt; position)<para><emphasis>This function checks if the given coordinate is inside the waveguide or not.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_round_mesh_generator_1accafc85e0b02823ef5cd12c384080aad">set_boundary_ids</link> (
parallel::distributed::Triangulation&lt; 3 &gt; &amp; tria)<para><emphasis>This function is a helper during distributed mesh generation.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="class_round_mesh_generator_1a7940ac54d22af156b3cc10d490264171">prepare_triangulation</link> (
parallel::distributed::Triangulation&lt; 3 &gt; * in_tria)<para><emphasis>This function takes a triangulation object and prepares it for the further computations.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>

<para>This class generates meshes, that are used to discretize a rectangular <link linkend="class_waveguide">Waveguide</link>. </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>It is derived from <link linkend="class_mesh_generator">MeshGenerator</link>.</para>

<para>This Generator creates a mesh around a cylindrical waveguide. It should be used in conjunction with a <link linkend="class_space_transformation">SpaceTransformation</link>, which uses a circular shape of the waveguide and an appropriate distribution of the DOFs. <formalpara><title>Author: </title>

<para>Pascal Kraft </para>
</formalpara>
<formalpara><title>Date: </title>

<para>28.11.2016 </para>
</formalpara>
</para>
                <para>Definition at line 19 of file RoundMeshGenerator.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>RoundMeshGenerator.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Member Data Documentation</title>
        </section>
            <section xml:id="class_round_mesh_generator_1aeb71db26cf3eeca62c5c867b0cf8b558">
                <title>RoundMeshGenerator::RoundMeshGenerator (SpaceTransformation *in_ct)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_round_mesh_generator_1a07ee2011d802b9a190d11d56eebb76d3">
                <title>RoundMeshGenerator::~RoundMeshGenerator ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="class_round_mesh_generator_1a6853ef55471fb74a7e4a7c3a3b0f2649">
                <title>void RoundMeshGenerator::refine_global (parallel::distributed::Triangulation&lt; 3 &gt; *in_tria, unsigned int times)</title> <emphasis>This function is intended to execute a global refinement of the mesh.</emphasis>
                
<para>This means that every cell will be refined in every direction (effectively multiplying the number of DOFs by 8). This version is the most expensive refinement possible and should be used with caution. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>times</entry>
                                <entry>
<para>Number of refinement steps to be performed (gives us a multiplication of the number of degrees of freedom by <equation><title>form_35</title>$8^{times}$</equation>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_round_mesh_generator_1ae2a55c58cfe3c69479237921e284e0b8">
                <title>void RoundMeshGenerator::refine_internal (parallel::distributed::Triangulation&lt; 3 &gt; *in_tria, unsigned int times)</title> <emphasis>This function is intended to execute an internal refinement of the mesh.</emphasis>
                
<para>This means that every cell inside the waveguide will be refined in every direction. This method is rather cheap and only refines where the field is strong, however, the mesh outside the waveguide should not be too coarse to reduce numerical errors. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>times</entry>
                                <entry>
<para>Number of refinement steps to be performed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_round_mesh_generator_1a9bdb7b90cc1988eb80c441ee8f85b0a0">
                <title>void RoundMeshGenerator::refine_proximity (parallel::distributed::Triangulation&lt; 3 &gt; *in_tria, unsigned int times, double factor)</title> <emphasis>This function is intended to execute a refinement inside and near the waveguide boundary.</emphasis>
                
<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>times</entry>
                                <entry>
<para>Number of refinement steps to be performed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="class_round_mesh_generator_1ae28b3d9461233b9de1ce366c0f2458bd">
                <title>bool RoundMeshGenerator::math_coordinate_in_waveguide (Point&lt; 3 &gt; position) const</title> <emphasis>This function checks if the given coordinate is inside the waveguide or not.</emphasis>
                
<para>The naming convention of physical and mathematical system find application. In this version, the waveguide has been transformed and the check for a tubal waveguide for example only checks if the radius of a given vector is below the average of input and output radius.  position This value gives us the location to check for. </para>

            </section>
            <section xml:id="class_round_mesh_generator_1aba31fbd62ab56899c0cd06c5257420c7">
                <title>bool RoundMeshGenerator::phys_coordinate_in_waveguide (Point&lt; 3 &gt; position) const</title> <emphasis>This function checks if the given coordinate is inside the waveguide or not.</emphasis>
                
<para>The naming convention of physical and mathematical system find application. In this version, the waveguide is bent. If we are using a space transformation <equation><title>form_36</title>$f$</equation> then this function is equal to math_coordinate_in_waveguide(f(x,y,z)).  position This value gives us the location to check for. </para>

            </section>
            <section xml:id="class_round_mesh_generator_1accafc85e0b02823ef5cd12c384080aad">
                <title>void RoundMeshGenerator::set_boundary_ids (parallel::distributed::Triangulation&lt; 3 &gt; &amp;tria) const</title> <emphasis>This function is a helper during distributed mesh generation.</emphasis>
                
            </section>
            <section xml:id="class_round_mesh_generator_1a7940ac54d22af156b3cc10d490264171">
                <title>void RoundMeshGenerator::prepare_triangulation (parallel::distributed::Triangulation&lt; 3 &gt; *in_tria)</title> <emphasis>This function takes a triangulation object and prepares it for the further computations.</emphasis>
                
<para>It is intended to encapsulate all related work and is explicitely not const. 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters                        </title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in_tria</entry>
                                <entry>
<para>The triangulation that is supposed to be prepared. All further information is derived from the parameter file and not given by parameters. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
</section>
