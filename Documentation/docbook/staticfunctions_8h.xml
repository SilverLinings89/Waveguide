<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="staticfunctions_8h">
    <title>staticfunctions.h File Reference</title>
    <programlisting>#include &lt;deal.II/base/point.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/base/tensor.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/distributed/tria.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/dofs/dof_handler.h&gt;</programlisting>
    <programlisting>#include &lt;deal.II/lac/constraint_matrix.h&gt;</programlisting>
    <programlisting>#include &lt;fstream&gt;</programlisting>
    <programlisting>#include &quot;../Core/Waveguide.h&quot;</programlisting>
    <programlisting>#include &quot;../SpaceTransformations/SpaceTransformation.h&quot;</programlisting>
        <section>
            <title>Variables</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1a504d6a14baf75d82bf36172d563e9aaa">solutionpath</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::ofstream <link linkend="staticfunctions_8h_1af678d48f7f731407dfe04737a7d05c1c">log_stream</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1a997b87a062e0363e07cdb6491c6e4d83">constraints_filename</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1a91af4a27d58f2832946c17ea7273d620">assemble_filename</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1a092da0d2865013830263360e2acd1e92">precondition_filename</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1a9fce772c6d958e182540c1383eedfaaa">solver_filename</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1ab7808f76e63dad3d01efb7623d7103f6">total_filename</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="staticfunctions_8h_1a46c3a8e999412707dac450d203233a79">StepsR</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="staticfunctions_8h_1a4b15026e451966cd92ed0e406b4d0406">StepsPhi</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="staticfunctions_8h_1a6d3000de08a427a9a8cc4f5de079e226">alert_counter</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string <link linkend="staticfunctions_8h_1a4d9dd9b40bcd7809b1f75a9b6b142603">input_file_name</link></para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="class_space_transformation">SpaceTransformation</link> * <link linkend="staticfunctions_8h_1a47132873361eb077c199f202c02e10c9">the_st</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Tensor&lt; 1, 3, double &gt; <link linkend="staticfunctions_8h_1ac1c83faaeeed5e2e4728f579acaa29a6">crossproduct</link> (
Tensor&lt; 1, 3, double &gt; , Tensor&lt; 1, 3, double &gt; )<para><emphasis>For given vectors \form#33, this
function calculates the following crossproduct: \form#34@_fakenl@_fakenl.</emphasis></para>
</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::complex&lt; double &gt; <link linkend="staticfunctions_8h_1a8ff836a6d1fdc521e2259282ec1eaab5">matrixD</link> (
int in_row, int in_column, double in_k0)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="staticfunctions_8h_1aa04147c236adef2673e2ecaf14bdfaaa">set_the_st</link> (
<link linkend="class_space_transformation">SpaceTransformation</link> * )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a1dfd63115b3f7b92c5ca7ae94184eba8">dotproduct</link> (
Tensor&lt; 1, 3, double &gt; , Tensor&lt; 1, 3, double &gt; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="staticfunctions_8h_1afc653d950057e699b0dee19351e88fde">mesh_info</link> (
const parallel::distributed::Triangulation&lt; dim &gt; , const std::string )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="staticfunctions_8h_1ad3ff20561720ee9648ecb3c8ea3230ab">mesh_info</link> (
const parallel::distributed::Triangulation&lt; dim &gt; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a95e350f86de6ec2390b7ef79f3a9cb2c">my_inter</link> (
double , double , double )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para><link linkend="struct_parameters">Parameters</link> <link linkend="staticfunctions_8h_1accf2f43d3d0e677830f87582b1b29de5">GetParameters</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1ae3eb7e4041116adf81a60b610def45fb">Triangulation_Stretch_X</link> (
const Point&lt; 3, double &gt; &amp; p)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1ac07275eebe3294183a2dfebb47eb0b32">Triangulation_Stretch_Y</link> (
const Point&lt; 3, double &gt; &amp; p)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1ae3f33fe70dee8b05e896a41842d4b356">Triangulation_Stretch_Z</link> (
const Point&lt; 3, double &gt; &amp; p)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="staticfunctions_8h_1a21c316078b61e50c3a0037a7aaa6b3bf">file_exists</link> (
const std::string &amp; name)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a39e54c09d3e79550e74042527c1b6e14">TEMode00</link> (
dealii::Point&lt; 3, double &gt; , int )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a0ffa75ba7d8cbe4683a7cdf0d2214205">sigma</link> (
double , double , double )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a153e772573bb74b6beedc0c8903ec984">InterpolationPolynomial</link> (
double , double , double , double , double )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a142d9fd0c34dcd315b1a134ed0707b4f">InterpolationPolynomialDerivative</link> (
double , double , double , double , double )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a1b76c703348a7732912d8e8b392f25ee">InterpolationPolynomialZeroDerivative</link> (
double , double , double )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="staticfunctions_8h_1a767352fd796820847bd58080782aafe6">PrepareStreams</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>double <link linkend="staticfunctions_8h_1a7ba13e021ea3052462713a3ba921e5f0">Distance2D</link> (
Point&lt; 3, double &gt; , Point&lt; 3, double &gt; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1ab68ae5570f25c1d23f55ee0b5bc69731">Triangulation_Stretch_to_circle</link> (
const Point&lt; 3, double &gt; &amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1a9cac907decb4d26d664aa3c68d0b72ff">Triangulation_Shift_Z</link> (
const Point&lt; 3, double &gt; &amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1ac3be30b3cbb14d8f6fb367d241530296">Triangulation_Stretch_Computational_Radius</link> (
const Point&lt; 3, double &gt; &amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1a352f152523799f0a3440c193b5710fa4">Triangulation_Stretch_Computational_Rectangle</link> (
const Point&lt; 3, double &gt; &amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Point&lt; 3, double &gt; <link linkend="staticfunctions_8h_1ab72a5e886108ac6717a3b1f7e921a792">Triangulation_Transform_to_physical</link> (
const Point&lt; 3, double &gt; &amp; )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::vector&lt; types::global_dof_index &gt; <link linkend="staticfunctions_8h_1ac3f7f6220c1089d2ec21ecff645f8e8f">Add_Zero_Restraint</link> (
dealii::ConstraintMatrix * , dealii::DoFHandler&lt; 3 &gt;::active_cell_iterator &amp; , unsigned int, unsigned int, unsigned int, bool , dealii::IndexSet )</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="staticfunctions_8h_1ac80c0610c9ee9b6fe5948420ccbb9086">add_vector_of_indices</link> (
dealii::IndexSet * , std::vector&lt; types::global_dof_index &gt; )</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/Helpers/staticfunctions.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 
2 <emphasis class="preprocessor">#ifndef&#32;STATICFUNCTIONS_H_</emphasis>
3 <emphasis class="preprocessor">#define&#32;STATICFUNCTIONS_H_</emphasis>
4 
5 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/point.h&gt;</emphasis>
6 <emphasis class="preprocessor">#include&#32;&lt;deal.II/base/tensor.h&gt;</emphasis>
7 <emphasis class="preprocessor">#include&#32;&lt;deal.II/distributed/tria.h&gt;</emphasis>
8 <emphasis class="preprocessor">#include&#32;&lt;deal.II/dofs/dof_handler.h&gt;</emphasis>
9 <emphasis class="preprocessor">#include&#32;&lt;deal.II/lac/constraint_matrix.h&gt;</emphasis>
10 <emphasis class="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
11 <emphasis class="preprocessor">#include&#32;&quot;../Core/Waveguide.h&quot;</emphasis>
12 <emphasis class="preprocessor">#include&#32;&quot;../SpaceTransformations/SpaceTransformation.h&quot;</emphasis>
13 <emphasis class="keyword">using&#32;namespace&#32;</emphasis><link linkend="namespacedealii">dealii</link>;
14 
15 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;solutionpath;
16 <emphasis class="keyword">extern</emphasis>&#32;std::ofstream&#32;log_stream;
17 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;constraints_filename;
18 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;assemble_filename;
19 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;precondition_filename;
20 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;solver_filename;
21 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;total_filename;
22 <emphasis class="keyword">extern</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;StepsR;
23 <emphasis class="keyword">extern</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;StepsPhi;
24 <emphasis class="keyword">extern</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;alert_counter;
25 <emphasis class="keyword">extern</emphasis>&#32;std::string&#32;input_file_name;
26 <emphasis class="keyword">extern</emphasis>&#32;<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*the_st;<emphasis class="comment"></emphasis>
27 <emphasis class="comment">/**</emphasis>
28 <emphasis class="comment">&#32;*&#32;For&#32;given&#32;vectors&#32;\f$\boldsymbol{a},\boldsymbol{b}&#32;\in&#32;\mathbb{R}^3\f$,&#32;this</emphasis>
29 <emphasis class="comment">&#32;*&#32;function&#32;calculates&#32;the&#32;following&#32;crossproduct:&#32;\f[\boldsymbol{a}&#32;\&#32;times</emphasis>
30 <emphasis class="comment">&#32;*&#32;\boldsymbol{b}&#32;=&#32;\begin{pmatrix}&#32;a_2&#32;b_3&#32;-&#32;a_3b_2&#32;\\&#32;a_3b_1&#32;-&#32;a_1b_3&#32;\\</emphasis>
31 <emphasis class="comment">&#32;*&#32;a_1b_2&#32;-&#32;a_2b_1\end{pmatrix}\f]</emphasis>
32 <emphasis class="comment">&#32;*/</emphasis>
33 Tensor&lt;1,&#32;3,&#32;double&gt;&#32;crossproduct(Tensor&lt;1,&#32;3,&#32;double&gt;,&#32;Tensor&lt;1,&#32;3,&#32;double&gt;);
34 
35 std::complex&lt;double&gt;&#32;matrixD(<emphasis class="keywordtype">int</emphasis>&#32;in_row,&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_column,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_k0);
36 
37 <emphasis class="keywordtype">void</emphasis>&#32;set_the_st(<link linkend="class_space_transformation">SpaceTransformation</link>&#32;*);
38 
39 <emphasis class="keywordtype">double</emphasis>&#32;dotproduct(Tensor&lt;1,&#32;3,&#32;double&gt;,&#32;Tensor&lt;1,&#32;3,&#32;double&gt;);
40 
41 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">int</emphasis>&#32;dim&gt;
42 <emphasis class="keywordtype">void</emphasis>&#32;mesh_info(<emphasis class="keyword">const</emphasis>&#32;parallel::distributed::Triangulation&lt;dim&gt;,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;std::string);
44 
45 <emphasis class="keyword">template</emphasis>&#32;&lt;<emphasis class="keywordtype">int</emphasis>&#32;dim&gt;
46 <emphasis class="keywordtype">void</emphasis>&#32;mesh_info(<emphasis class="keyword">const</emphasis>&#32;parallel::distributed::Triangulation&lt;dim&gt;);
47 
48 <emphasis class="keywordtype">double</emphasis>&#32;my_inter(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>);
49 
50 <link linkend="struct_parameters">Parameters</link>&#32;GetParameters();
51 
52 Point&lt;3,&#32;double&gt;&#32;Triangulation_Stretch_X(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;p);
53 
54 Point&lt;3,&#32;double&gt;&#32;Triangulation_Stretch_Y(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;p);
55 
56 Point&lt;3,&#32;double&gt;&#32;Triangulation_Stretch_Z(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;p);
57 
58 <emphasis class="keyword">inline</emphasis>&#32;<emphasis class="keywordtype">bool</emphasis>&#32;file_exists(<emphasis class="keyword">const</emphasis>&#32;std::string&#32;&amp;name);
59 
60 <emphasis class="keywordtype">double</emphasis>&#32;TEMode00(dealii::Point&lt;3,&#32;double&gt;,&#32;<emphasis class="keywordtype">int</emphasis>);
61 
62 <emphasis class="keywordtype">double</emphasis>&#32;sigma(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>);
63 
64 <emphasis class="keywordtype">double</emphasis>&#32;InterpolationPolynomial(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>);
65 
66 <emphasis class="keywordtype">double</emphasis>&#32;InterpolationPolynomialDerivative(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>);
68 
69 <emphasis class="keywordtype">double</emphasis>&#32;InterpolationPolynomialZeroDerivative(<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>,&#32;<emphasis class="keywordtype">double</emphasis>);
70 
71 <emphasis class="keywordtype">void</emphasis>&#32;PrepareStreams();
72 
73 <emphasis class="keywordtype">double</emphasis>&#32;Distance2D(Point&lt;3,&#32;double&gt;,&#32;Point&lt;3,&#32;double&gt;&#32;=&#32;Point&lt;3,&#32;double&gt;());
74 
75 Point&lt;3,&#32;double&gt;&#32;Triangulation_Stretch_to_circle(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;);
76 
77 Point&lt;3,&#32;double&gt;&#32;Triangulation_Shift_Z(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;);
78 
79 Point&lt;3,&#32;double&gt;&#32;Triangulation_Stretch_Computational_Radius(
80 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;);
81 
82 Point&lt;3,&#32;double&gt;&#32;Triangulation_Stretch_Computational_Rectangle(
83 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;);
84 
85 Point&lt;3,&#32;double&gt;&#32;Triangulation_Transform_to_physical(<emphasis class="keyword">const</emphasis>&#32;Point&lt;3,&#32;double&gt;&#32;&amp;);
86 
87 std::vector&lt;types::global_dof_index&gt;&#32;Add_Zero_Restraint(
88 &#32;&#32;&#32;&#32;dealii::ConstraintMatrix&#32;*,&#32;dealii::DoFHandler&lt;3&gt;::active_cell_iterator&#32;&amp;,
89 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>,&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>,&#32;<emphasis class="keywordtype">bool</emphasis>,&#32;dealii::IndexSet);
90 
91 <emphasis class="keywordtype">void</emphasis>&#32;add_vector_of_indices(dealii::IndexSet&#32;*,
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;types::global_dof_index&gt;);
93 
94 <emphasis class="preprocessor">#endif&#32;</emphasis><emphasis class="comment">/*&#32;STATICFUNCTIONS_H_&#32;*/</emphasis><emphasis class="preprocessor"></emphasis>
    </computeroutput></literallayout>
</section>
