<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_gradient_table_8h">
    <title>GradientTable.h File Reference</title>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="class_gradient_table">GradientTable</link></para>
<para><emphasis>The Gradient Table is an OutputGenerator, intended to write information about the shape gradient to the console upon its computation.</emphasis></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /home/kraft/workspace/waveguideproblem/Code/OutputGenerators/Console/GradientTable.h</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#ifndef&#32;GRADIENTTABLE_H_</emphasis>
2 <emphasis class="preprocessor">#define&#32;GRADIENTTABLE_H_</emphasis>
3 <emphasis class="comment"></emphasis>
4 <emphasis class="comment">/**</emphasis>
5 <emphasis class="comment">&#32;*&#32;\class&#32;GradientTable</emphasis>
6 <emphasis class="comment">&#32;*&#32;\brief&#32;The&#32;Gradient&#32;Table&#32;is&#32;an&#32;OutputGenerator,&#32;intended&#32;to&#32;write&#32;information&#32;about&#32;the&#32;shape&#32;gradient&#32;to&#32;the&#32;console&#32;upon&#32;its&#32;computation.</emphasis>
7 <emphasis class="comment">&#32;*</emphasis>
8 <emphasis class="comment">&#32;*&#32;\date&#32;28.11.2016</emphasis>
9 <emphasis class="comment">&#32;*&#32;\author&#32;Pascal&#32;Kraft</emphasis>
10 <emphasis class="comment">&#32;**/</emphasis>
<link linkend="class_gradient_table">11 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="class_gradient_table">GradientTable</link>&#32;{
12 
13 <emphasis class="keyword">private</emphasis>:
14 
15 &#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;steps;
16 &#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;qualities;
17 &#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;grad_step;
18 &#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;ref_configuration;
19 &#32;&#32;&#32;&#32;dealii::Vector&lt;double&gt;&#32;last_configuration;
20 
21 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;final_quality;
22 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;initial_quality;
23 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">double</emphasis>&#32;last_quality;
24 <emphasis class="keyword">public</emphasis>:
25 &#32;&#32;&#32;&#32;<link linkend="class_gradient_table">GradientTable</link>(&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;in_step&#32;,&#32;dealii::Vector&lt;double&gt;&#32;in_configuration,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_quality,&#32;dealii::Vector&lt;double&gt;&#32;in_last_configuration,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_last_quality);
26 
27 &#32;&#32;&#32;&#32;~<link linkend="class_gradient_table">GradientTable</link>&#32;();
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
29 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;ndofs;
30 
31 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;nfreedofs;
32 
33 &#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">int</emphasis>&#32;GlobalStep;
34 
35 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;SetInitialQuality(<emphasis class="keywordtype">double</emphasis>&#32;in_quality);
36 
37 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;AddComputationResult(<emphasis class="keywordtype">int</emphasis>&#32;in_component,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_step,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_quality);
38 
39 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;AddFullStepResult(dealii::Vector&lt;double&gt;&#32;in_step,&#32;<emphasis class="keywordtype">double</emphasis>&#32;in_quality);
40 
41 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;PrintFullLine();
42 
43 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;PrintTable();
44 
45 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">void</emphasis>&#32;WriteTableToFile(std::string&#32;in_filename);
46 };
47 
48 <emphasis class="preprocessor">#endif&#32;</emphasis><emphasis class="comment">/*&#32;GRADIENTTABLE_H_&#32;*/</emphasis><emphasis class="preprocessor"></emphasis>
    </computeroutput></literallayout>
</section>
